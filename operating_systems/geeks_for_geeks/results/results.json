[
  {
    "url": "https://www.geeksforgeeks.org/operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/operating-systems/?type%3Darticle%26id%3D1269349&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nWhat is an Operating System?\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=next_article_top)\n\n# Operating System Tutorial\n\nLast Updated : 31 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n150 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device.\n\n- Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.\n- A low-level Software that includes all the basic functions like processor management, memory management, file management, etc.\n- It mainly acts a government for your system that has different departments to manage different resources.\n- Examples are Linux, Unix, Windows 11, MS DOS, Android, macOS and iOS.\n\n![OS1](https://media.geeksforgeeks.org/wp-content/uploads/20230510120545/OS1.webp)\n\n## Basics :\n\n1. [Introduction](https://www.geeksforgeeks.org/operating-system-introduction-operating-system-set-1)\n2. [Types of OS](https://www.geeksforgeeks.org/operating-system-types-operating-systems-awaiting-author)\n3. [Functions of OS](https://www.geeksforgeeks.org/functions-of-operating-system)\n4. [System Initialization](https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/)\n5. [Kernel in OS](https://www.geeksforgeeks.org/kernel-in-operating-system/)\n6. [System Call](https://www.geeksforgeeks.org/introduction-of-system-call/)\n7. [Privileged Instructions](https://www.geeksforgeeks.org/operating-system-privileged-and-non-privileged-instructions)\n\n## Process Scheduling :\n\n01. [Process Introduction](https://www.geeksforgeeks.org/process-in-operating-system/)\n02. [Process Creation and Deletion](https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/)\n03. [States of a Process](https://www.geeksforgeeks.org/operating-systems-states-process)\n04. [Process Table and Control Block](https://www.geeksforgeeks.org/operating-system-process-table-process-control-block-pcb)\n05. [Types of Processes in Process Table](https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/)\n06. [Process Management Introduction](https://www.geeksforgeeks.org/gate-notes-operating-system-process-management-introduction)\n07. [Process Scheduler](https://www.geeksforgeeks.org/gate-notes-operating-system-scheduler)\n08. [CPU Scheduling Algorithms](https://www.geeksforgeeks.org/gate-notes-operating-system-process-scheduling)\n09. [Preemptive vs Non-Preemptive](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling)\n10. [Time spent in Context Switch](https://www.geeksforgeeks.org/measure-time-spent-context-switch)\n11. [Dispatcher vs scheduler](https://www.geeksforgeeks.org/operating-system-difference-dispatcher-scheduler)\n12. [Starvation and Aging in Operating Systems](https://www.geeksforgeeks.org/starvation-aging-operating-systems)\n\n[>\\> Quiz on CPU Scheduling](https://www.geeksforgeeks.org/cpu-scheduling-gq)\n\n## Process Synchronization\n\n01. [Inter Process Communication](https://www.geeksforgeeks.org/inter-process-communication)\n02. [Introduction to Process Synchronization](https://www.geeksforgeeks.org/process-synchronization-set-1)\n03. [Critical Section](https://www.geeksforgeeks.org/g-fact-70)\n04. [Peterson\u2019s Algorithm in Process Synchronization](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/)\n05. [Lock variable synchronization mechanism](https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism)\n06. [Semaphores in operating system](https://www.geeksforgeeks.org/semaphores-operating-system)\n07. [Classical IPC Problems](https://www.geeksforgeeks.org/classical-ipc-problems)\n08. [Communication using signals in C](https://www.geeksforgeeks.org/signals-c-set-2)\n09. [Mutex vs. Semaphore](https://www.geeksforgeeks.org/mutex-vs-semaphore)\n10. [Monitors for Process Synchronization](https://www.geeksforgeeks.org/monitors)\n11. [Dekker\u2019s algorithm](https://www.geeksforgeeks.org/operating-system-dekkers-algorithm)\n12. [Bakery Algorithm](https://www.geeksforgeeks.org/operating-system-bakery-algorithm)\n13. [Mutex lock for Linux Thread Synchronization](https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization)\n14. [Priority Inversion](https://www.geeksforgeeks.org/priority-inversion-what-the-heck)\n\n[>\\> Quiz on Process Management in OS](https://www.geeksforgeeks.org/operating-systems-gq/process-synchronization-gq)\n\n## Deadlock :\n\n01. [Deadlock Introduction](https://www.geeksforgeeks.org/operating-system-process-management-deadlock-introduction)\n02. [Deadlock Prevention And Avoidance](https://www.geeksforgeeks.org/deadlock-prevention)\n03. [Deadlock Detection And Recovery](https://www.geeksforgeeks.org/deadlock-detection-recovery)\n04. [Banker\u2019s Algorithm](https://www.geeksforgeeks.org/operating-system-bankers-algorithm)\n05. [Deadlock, Starvation, and Livelock](https://www.geeksforgeeks.org/deadlock-starvation-and-livelock)\n06. [Resource Allocation Graph (RAG)](https://www.geeksforgeeks.org/operating-system-resource-allocation-graph-rag)\n07. [Methods of resource allocation to processes by operating system](https://www.geeksforgeeks.org/methods-of-resource-allocation-to-processes-by-operating-system)\n08. [Program for Deadlock free condition in Operating System](https://www.geeksforgeeks.org/program-for-deadlock-free-condition-in-operating-system)\n09. [Deadlock detection in Distributed systems](https://www.geeksforgeeks.org/operating-system-deadlock-detection-in-distributed-systems)\n10. [Techniques used in centralized approach of deadlock detection in distributed systems](https://www.geeksforgeeks.org/techniques-used-in-centralized-approach-of-deadlock-detection-in-distributed-systems)\n\n[>\\> Quiz on Deadlock](https://www.geeksforgeeks.org/deadlock-gq)\n\n## Multithreading:\n\n1. [Operating System \\| Thread](https://www.geeksforgeeks.org/operarting-system-thread)\n2. [Threads and its types](https://www.geeksforgeeks.org/operating-system-threads-types)\n3. [Operating System \\| User Level thread Vs Kernel Level thread](https://www.geeksforgeeks.org/operating-system-user-level-thread-vs-kernel-level-thread)\n4. [Process-based and Thread-based Multitasking](https://www.geeksforgeeks.org/operating-system-process-based-thread-based-multitasking)\n5. [Multi threading models](https://www.geeksforgeeks.org/multi-threading-model)\n6. [Benefits of Multithreading](https://www.geeksforgeeks.org/operating-system-benefits-multithreading)\n7. [Operating System \\| Remote Procedure call (RPC)](https://www.geeksforgeeks.org/operating-system-remote-procedure-call-rpc)\n\n## Memory Management :\n\n01. [Introduction to memory and memory units](https://www.geeksforgeeks.org/introduction-to-memory-and-memory-units)\n02. [Memory Management in Operating System](https://www.geeksforgeeks.org/memory-management-in-operating-system/)\n03. [Buddy System: Memory allocation technique](https://www.geeksforgeeks.org/operating-system-buddy-system-memory-allocation-technique)\n04. [Paging](https://www.geeksforgeeks.org/operating-system-paging)\n05. [Segmentation](https://www.geeksforgeeks.org/operating-systems-segmentation)\n06. [Virtual Memory](https://www.geeksforgeeks.org/virtual-memory-operating-systems)\n07. [Memory Interleaving](https://www.geeksforgeeks.org/operating-system-memory-interleaving)\n08. [Operating system based Virtualization](https://www.geeksforgeeks.org/operating-system-based-virtualization)\n09. [Swap Space](https://www.geeksforgeeks.org/operating-system-swap-space)\n10. [Page Fault Handling](https://www.geeksforgeeks.org/operating-system-page-fault-handling)\n11. [Memory Segmentation in 8086 Microprocessor](https://www.geeksforgeeks.org/memory-segmentation-8086-microprocessor)\n12. [Program for Next Fit algorithm in Memory Management](https://www.geeksforgeeks.org/program-next-fit-algorithm-memory-management)\n13. [Overlays in Memory Management](https://www.geeksforgeeks.org/operating-system-overlays-memory-management)\n14. [Belady\u2019s Anomaly](https://www.geeksforgeeks.org/beladys-anomaly-in-page-replacement-algorithms/)\n15. [Page Replacement Algorithms](https://www.geeksforgeeks.org/operating-system-page-replacement-algorithm)\n16. [Second Chance (or Clock) Page Replacement Policy](https://www.geeksforgeeks.org/operating-system-second-chance-or-clock-page-replacement-policy)\n17. [Allocating kernel memory (buddy system and slab system)](https://www.geeksforgeeks.org/operating-system-allocating-kernel-memory-buddy-system-slab-system)\n18. [Static and Dynamic Libraries \\| Set 1](https://www.geeksforgeeks.org/static-vs-dynamic-libraries)\n19. [Working with Shared Libraries \\| Set 1](https://www.geeksforgeeks.org/working-with-shared-libraries-set-1)\n20. [Named Pipe or FIFO with example C program](https://www.geeksforgeeks.org/named-pipe-fifo-example-c-program)\n21. [Tracing memory usage in Linux](https://www.geeksforgeeks.org/tracing-memory-usage-linux)\n\n[>\\> Quiz on Memory Management](https://www.geeksforgeeks.org/operating-systems-gq/memory-management-gq)\n\n## Disk Management:\n\n01. [File Systems](https://www.geeksforgeeks.org/file-system-operating-systems)\n02. [Unix File System](https://www.geeksforgeeks.org/operating-system-unix-file-system)\n03. [Implementing Directory Management using Shell Script](https://www.geeksforgeeks.org/operating-system-privileged-and-non-privileged-instructions)\n04. [File Directory \\| Path Name](https://www.geeksforgeeks.org/operating-system-file-directory-path-name)\n05. [Structures of Directory](https://www.geeksforgeeks.org/operating-system-structures-of-directory)\n06. [File Allocation Methods](https://www.geeksforgeeks.org/file-allocation-methods)\n07. [File Access Methods](https://www.geeksforgeeks.org/operating-system-file-access-methods)\n08. [Secondary memory](https://www.geeksforgeeks.org/secondary-memory)\n09. [Secondary memory \u2013 Hard disk drive](https://www.geeksforgeeks.org/operating-system-secondary-memory-hard-disk-drive)\n10. [Disk Scheduling Algorithms](https://www.geeksforgeeks.org/disk-scheduling-algorithms)\n11. [Program for SSTF disk scheduling algorithm](https://www.geeksforgeeks.org/program-for-sstf-disk-scheduling-algorithm)\n12. [What exactly Spooling is all about?](https://www.geeksforgeeks.org/what-exactly-spooling-is-all-about)\n13. [Difference between Spooling and Buffering](https://www.geeksforgeeks.org/difference-between-spooling-and-buffering)\n14. [Free space management](https://www.geeksforgeeks.org/operating-system-free-space-management)\n\n[>\\> Quiz on Input Output Systems](https://www.geeksforgeeks.org/operating-systems-gq/iinput-output-systems-gq)\n\n## Misc\n\n01. [Computer Memory](https://www.geeksforgeeks.org/computer-memory/)\n02. [Introduction to UNIX System](https://www.geeksforgeeks.org/introduction-to-unix-system)\n03. [Microkernel](https://www.geeksforgeeks.org/operating-system-microkernel)\n04. [Kernel I/O Subsystem (I/O System)](https://www.geeksforgeeks.org/operating-system-kernel-i-o-subsystem-i-o-system)\n05. [Important Linux Commands (leave, diff, cal, ncal, locate and ln)](https://www.geeksforgeeks.org/important-linux-commands-leave-diff-cal-ncal-locate-ln)\n06. [Process states and Transitions in a UNIX Process](https://www.geeksforgeeks.org/process-states-and-transitions-in-a-unix-process)\n07. [Introduction to Linux Shell and Shell Scripting](https://www.geeksforgeeks.org/introduction-linux-shell-shell-scripting)\n08. [\u2018crontab\u2019 in Linux with Examples](https://www.geeksforgeeks.org/crontab-in-linux-with-examples)\n09. [indepth and maxdepth in Linux find() command for limiting search to a specific directory.](https://www.geeksforgeeks.org/mindepth-maxdepth-linux-find-command-limiting-search-specific-directory)\n10. [Real time systems](https://www.geeksforgeeks.org/operating-system-real-time-systems)\n11. [Tasks in Real Time systems](https://www.geeksforgeeks.org/tasks-in-real-time-systems)\n12. [Monolithic Kernel and key differences from Microkernel](https://www.geeksforgeeks.org/operating-system-monolithic-kernel-key-differences-microkernel)\n13. [Get/Set process resource limits in C](https://www.geeksforgeeks.org/get-set-process-resource-limits-in-c)\n14. [Dual Mode operations in OS](https://www.geeksforgeeks.org/dual-mode-operations-os)\n\n## Types of Operating System\n\n- Batch OS (e.g. Transactions Process, Payroll System, etc.)\n- Multi-programmed OS(e.g. Windows, UNIX, macOS, etc.)\n- Timesharing OS(e.g. Multics, Linux, etc.)\n- Real-Time OS(e.g. PSOS, VRTX, etc.)\n- Distributed OS(e.g. LOCUS, Solaris, etc.)\n\n## Operating System Functions\n\n- Memory and processor Management\n- Network Management\n- Security Management\n- File Management\n- Error Detection\n- Job Accounting\n\n## Frequently Asked Questions on Operating System - FAQs\n\n### Why learn Operating Systems?\n\n> OS is the most important part of a computer. Through OS users can interact with computer software. It provides an interface between Hardware and CPU. It also provides a platform for the program to run on it and services to users. It performs all the basic tasks required in an application.\n\n### Write the top 10 Operating System Examples?\n\n> Some most popular OS examples are given below:\n>\n> - Windows\n> - Linux\n> - MacOS\n> - Ios\n> - Android\n> - Ubuntu\n> - CentOS\n> - Solaris\n> - Chrome OS\n> - Fedora\n\n### What are the Advantages of a multiprocessor system?\n\n> A multiprocessor system involves the processing of two or more computer programs simultaneously that share the same memory area. It increases reliability.\n\n### What is a thread in OS?\n\n> A thread is a lightweight process or subprogram which is part of the process or a program. A thread has its own Registers, Stack, State, and Program counter.\n\n**Quick Links :**\n\n- [Last Minute Notes (LMNs) \\| Operating Systems](https://www.geeksforgeeks.org/last-minute-notes-operating-systems)\n- [Commonly Asked Operating Systems Interview Questions](https://www.geeksforgeeks.org/commonly-asked-operating-systems-interview-questions-set-1)\n- [\u2018Quizzes\u2019 on Operating Systems !](https://www.geeksforgeeks.org/quiz-corner-gq/#Operating%20Systems%20Mock%20Tests)\n- [\u2018Practice Problems\u2019 on Operating Systems !](https://practice.geeksforgeeks.org/topics/Operating-System/#subjectiveProblemDiv)\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=next_article)\n\n[What is an Operating System?](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n150\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike150\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=vs9ejxf15pyv)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=qdxjvsfp1a5u)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Operating System Tutorial - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20230510120545/OS1.webp",
        "keywords": "Operating System, Process Management, Memory Management, Disk Management, Multithreading, Deadlock Prevention, Process Synchronization, CPU Scheduling Algorithms, Resource Allocation Graph, Virtual Memory, File Systems, Linux Shell Scripting, Real-Time Operating Systems, Microkernel vs Monolithic Kernel, Inter Process Communication",
        "ogUrl": "https://www.geeksforgeeks.org/operating-systems/",
        "ogDescription": "An Operating System (OS) is essential software that manages hardware and software resources, enabling interaction between users and the computer while performing critical functions like process and memory management.",
        "description": "An Operating System (OS) is essential software that manages hardware and software resources, enabling interaction between users and the computer while performing critical functions like process and memory management.",
        "scrapeId": "fae296fe-0697-4bfe-a5af-1c1a639925ae",
        "sourceURL": "https://www.geeksforgeeks.org/operating-systems/",
        "url": "https://www.geeksforgeeks.org/operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 1
  },
  {
    "url": "https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/?type%3Darticle%26id%3D173233&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nFunctions of Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=next_article_top)\n\n# Introduction to Operating System\n\nLast Updated : 31 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n765 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nAn operating system acts as an intermediary between the user of a computer and computer hardware. In short its an interface between computer hardware and user.\n\n- The purpose of an operating system is to provide an environment in which a user can execute programs conveniently and efficiently.\n- An operating system is software that manages computer hardware and softwares. The hardware must provide appropriate mechanisms to ensure the correct operation of the computer system and to prevent user programs from interfering with the proper operation of the system.\n- Operating system is a program running at all times on the computer (usually called the kernel), with all else being application programs.\n- Concerned with the assignment of resources among programs e.g. memory, processors and input / output devices.\n\n## **History of Operating System**\n\nThe operating system has been evolving through the years. The following table shows the history of OS.\n\n| **Era** | **Key Developments** | **Examples** |\n| --- | --- | --- |\n| **1956** | The first Operating System was GN-NAA I/O in 1956 by Genera; Motors. | GM-NAA I/O (1956) |\n| **1960s** | IBM developed a time sharing system TSS/360 | OS/360, DOS/360 and TSS/360 |\n| **1970s** | Unix popularized simplicity and multitasking; rise of personal computers with basic OSs. | Unix (1971), CP/M (1974) |\n| **1980s** | GUI-based OSs gained traction; networking features became standard. | Apple Macintosh (1984), Windows (1985) |\n| **1990s** | Open-source Linux emerged; GUIs in Windows and Mac OS improved. | Linux (1991), Windows 95 (1995) |\n| **2000s-Present** | Mobile OSs dominated; cloud and virtualization technologies advanced computing. | iOS (2007), Android (2008) |\n\nPlease refer [History of Operating Systems](https://www.geeksforgeeks.org/evolution-of-operating-system/) for more details.\n\n## **Characteristics of Operating Systems**\n\nLet us now discuss some of the important characteristic features of operating systems:\n\n- **Device Management:** The operating system keeps track of all the devices. So, it is also called the Input/Output controller that decides which process gets the device, when, and for how much time.\n- **File Management:** It allocates and de-allocates the resources and also decides who gets the resource.\n- **Job Accounting:** It keeps track of time and resources used by various jobs or users.\n- **Error-detecting Aids:** These contain methods that include the production of dumps, traces, error messages, and other debugging and error-detecting methods.\n- **Memory Management:** It is responsible for managing the [primary memory](https://www.geeksforgeeks.org/primary-memory/) of a computer, including what part of it are in use by whom also check how much amount free or used and allocate process\n- **Processor Management:** It allocates the processor to a process and then de-allocates the processor when it is no longer required or the job is done.\n- **Control on System Performance:** It records the delays between the request for a service and the system.\n- **Security:** It prevents unauthorized access to programs and data using passwords or some kind of protection technique.\n- **Convenience:** An OS makes a computer more convenient to use.\n- **Efficiency:** An OS allows the computer system resources to be used efficiently.\n- **Ability to Evolve:** An OS should be constructed in such a way as to permit the effective development, testing, and introduction of new system functions at the same time without interfering with service.\n- **Throughput:** An OS should be constructed so that It can give maximum throughput (Number of tasks per unit time).\n\n## List of common Operating Systems\n\nThere are multiple types of operating systems each having its own unique features:\n\n### **Windows OS**\n\n- **Developer** : Microsoft\n- **Key Features** : User-friendly interface, software compatibility, hardware support, Strong gaming support.\n- **Advantages** : Easy to use for most users, Broad support from third-party applications ,Frequent updates and support.\n- **Typical Use Cases** : Personal computing, Business environment, Gaming.\n\n### macOS\n\n- **Developer** : Apple.\n- **Key Features** : Sleek, intuitive user interface, Strong integration with other Apple products, Robust security features, High performance and stability.\n- **Advantages** : Optimized for Apple hardware, Seamless experience across Apple ecosystem, Superior graphics and multimedia capabilities.\n- **Typical Use Cases** : Creative industries (design, video editing, music production), Personal computing, Professional environments.\n\n### Linux\n\n- **Developer** : Community-driven (various distributions).\n- **Key Features** : Open-source and highly customizable, Robust security and stability, Lightweight and can run on older hardware, Large selection of distributions (e.g., Ubuntu, Fedora, Debian).\n- **Advantages** : Free to use and distribute, Strong community support, Suitable for servers and development environments.\n- **Typical Use Cases** : Servers and data centers, Development and programming, Personal computing for tech enthusiasts.\n\n### Unix\n\n- **Developer:** Originally AT&T Bell Labs, various commercial and open-source versions available\n- **Key Features:** Multiuser and multitasking capabilities, Strong security and stability, Powerful command-line interface, Portability across different hardware platforms\n- **Advantages:** Reliable and robust performance, Suitable for high-performance computing and servers, Extensive support for networking\n- **Typical Use Cases:** Servers and workstations, Development environments, Research and academic settings\n\n## **Functionalities of Operating System**\n\n- **Resource Management:** When parallel accessing happens in the OS means when multiple users are accessing the system the OS works as Resource Manager, Its responsibility is to provide hardware to the user. It decreases the load in the system.\n- **Process Management:** It includes various tasks like **scheduling and termination** of the process. It is done with the help of [CPU Scheduling algorithms](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/) .\n- **Storage Management:** The **file system** mechanism used for the management of the storage. [**NIFS** , **CIFS**](https://www.geeksforgeeks.org/difference-between-nfs-and-cifs/) , **CFS** , **NFS** , etc. are some file systems. All the data is stored in various tracks of Hard disks that are all managed by the storage manager. It included **Hard Disk** .\n- **Memory Management:** Refers to the management of primary memory. The operating system has to keep track of how much memory has been used and by whom. It has to decide which process needs memory space and how much. OS also has to allocate and deallocate the memory space.\n- **Security/Privacy Management:** Privacy is also provided by the Operating system using passwords so that unauthorized applications can\u2019t access programs or data. For example, Windows uses **Kerberos** authentication to prevent unauthorized access to data.\n\nThe process operating system as User Interface:\n\n1. User\n2. System and application programs\n3. Operating system\n4. Hardware\n\nEvery general-purpose computer consists of hardware, an operating system(s), system programs, and application programs. The hardware consists of memory, CPU, ALU, I/O devices, peripheral devices, and storage devices. The system program consists of compilers, loaders, editors, OS, etc.\n\n![Conceptual View of Computer System](https://media.geeksforgeeks.org/wp-content/uploads/20230512132248/Introduction-of-OS-660.webp)\n\nConceptual View of Computer System\n\nEvery computer must have an operating system to run other programs. The operating system coordinates the use of the hardware among the various system programs and application programs for various users. It simply provides an environment within which other programs can do useful work.\n\nAn OS is a package of some programs that runs on a computer machine, allowing it to perform efficiently. It manages the simple tasks of recognizing input from the keyboard, managing files and directories on disk, displaying output on the screen, and controlling peripheral devices.\n\n## Layered Design of Operating System\n\n![OS](https://media.geeksforgeeks.org/wp-content/uploads/20231206144203/Os.png)\n\nFig. Layered OS\n\nThe extended machine provides operations like context save, dispatching, swapping, and I/O initiation. The operating system layer is located on top of the extended machine layer. This arrangement considerably simplifies the coding and testing of OS modules by separating the algorithm of a function from the implementation of its primitive operations. It is now easier to test, debug, and modify an OS module than in a monolithic OS. We say that the lower layer provides an abstraction that is the extended machine. We call the operating system layer the top layer of the OS.\n\n## Purposes and Tasks of Operating Systems\n\nSeveral tasks are performed by the Operating Systems and it also helps in serving a lot of purposes which are mentioned below. We will see how Operating System helps us in serving in a better way with the help of the task performed by it.\n\n### Purposes of an Operating System\n\n- It controls the allocation and use of the computing System\u2019s resources among the various user and tasks.\n- It provides an interface between the computer hardware and the programmer that simplifies and makes it feasible for coding and debugging of application programs.\n\n### Tasks of an Operating System\n\n1. Provides the facilities to create and modify programs and data files using an editor.\n2. Access to the compiler for translating the user program from high-level language to machine language.\n3. Provide a loader program to move the compiled program code to the computer\u2019s memory for execution.\n4. Provide routines that handle the details of I/O programming.\n\n## **I/O System Management**\n\nThe module that keeps track of the status of devices is called the I/O traffic controller. Each I/O device has a device handler that resides in a separate process associated with that device.\n\nThe I/O subsystem consists of\n\n- A memory Management component that includes buffering caching and spooling.\n- A general device driver interface.\n\n## Drivers for Specific Hardware Devices\n\nBelow mentioned are the drivers which are required for a specific Hardware Device. Here we discussed Assemblers, compilers, and interpreters, loaders.\n\n### **Assembler**\n\nThe input to an [assembler](https://www.geeksforgeeks.org/introduction-of-assembler/) is an assembly language program. The output is an object program plus information that enables the loader to prepare the object program for execution. At one time, the computer programmer had at his disposal a basic machine that interpreted, through hardware, certain fundamental instructions. He would program this computer by writing a series of ones and Zeros (Machine language) and placing them into the memory of the machine.\u00a0Examples of assembly languages include\n\n### **Compiler and Interpreter**\n\nThe [High-level languages](https://www.geeksforgeeks.org/difference-between-high-level-and-low-level-languages/) \u2013 examples are C, C++, Java, Python, etc (around 300+ famous high-level languages) are processed by [compilers and interpreters](https://www.geeksforgeeks.org/difference-between-compiler-and-interpreter/) . A compiler is a program that accepts a source program in a \u201chigh-level language \u201cand produces machine code in one go. Some of the compiled languages are FORTRAN, COBOL, C, C++, Rust, and Go. An interpreter is a program that does the same thing but converts high-level code to machine code line-by-line and not all at once. Examples of interpreted languages are\n\n- [Python](https://www.geeksforgeeks.org/python-programming-language/)\n- [Perl](https://www.geeksforgeeks.org/introduction-to-perl/)\n- [Ruby](https://www.geeksforgeeks.org/ruby-programming-language/)\n\n#### **Loader**\n\nA Loader is a routine that loads an object program and prepares it for execution. There are various loading schemes: absolute, relocating, and direct-linking. In general, the loader must load, relocate and link the object program. The loader is a program that places programs into memory and prepares them for execution. In a simple loading scheme, the assembler outputs the machine language translation of a program on a secondary device and a loader places it in the core. The loader places into memory the machine language version of the user\u2019s program and transfers control to it. Since the loader program is much smaller than the assembler, those make more core available to the user\u2019s program.\n\n## Components of an Operating Systems\n\nThere are two basic components of an Operating System.\n\n- [Shell](https://www.geeksforgeeks.org/difference-between-shell-and-kernel/)\n- [Kernel](https://www.geeksforgeeks.org/kernel-in-operating-system/)\n\n### Shell\n\nShell is the outermost layer of the Operating System and it handles the interaction with the user. The main task of the Shell is the management of interaction between the User and OS. Shell provides better communication with the user and the Operating System Shell does it by giving proper input to the user it also interprets input for the OS and handles the output from the OS. It works as a way of communication between the User and the OS.\n\n### Kernel\n\nThe kernel is one of the components of the Operating System which works as a core component. The rest of the components depends on Kernel for the supply of the important services that are provided by the Operating System. The kernel is the primary interface between the Operating system and Hardware.\n\n#### Functions of Kernel\n\nThe following functions are to be performed by the Kernel.\n\n- It helps in controlling the System Calls.\n- It helps in I/O Management.\n- It helps in the management of applications, memory, etc.\n\n#### Types of Kernel\n\nThere are four types of Kernel that are mentioned below.\n\n- [Monolithic Kernel](https://www.geeksforgeeks.org/monolithic-kernel-and-key-differences-from-microkernel/)\n- [Microkernel](https://www.geeksforgeeks.org/microkernel-in-operating-systems/)\n- [Hybrid Kernel](https://www.geeksforgeeks.org/kernel-in-operating-system/)\n- [Exokernel](https://www.geeksforgeeks.org/kernel-in-operating-system/)\n\nFor more, refer to [Kernel in Operating System](https://www.geeksforgeeks.org/kernel-in-operating-system/) .\n\nDifference Between 32-Bit and 64-Bit Operating Systems\n\n| 32-Bit Operating System | 64-Bit Operating System |\n| --- | --- |\n| 32-Bit OS is required for running of 32-Bit Processors, as they are not capable of running on 64-bit processors. | 64-Bit Processors can run on any of the Operating Systems, like 32-Bit OS or 64-Bit OS. |\n| 32-Bit OS gives a low efficient performance. | 64-Bit Operating System provides highly efficient Performance. |\n| Less amount of data is managed in 32-Bit Operating System as compared to 64-Bit Os. | A large amount of data can be stored in 64-Bit Operating System. |\n| 32-Bit Operating System can address 2^32 bytes of RAM. | 64-Bit Operating System can address 2^64 bytes of RAM. |\n\nPlease refer [32 vs 64-bit](https://www.geeksforgeeks.org/difference-32-bit-64-bit-operating-systems) for details.\n\n**The fundamental goals of operating system are**\n\n- Efficient use: Ensure efficient use of a computer\u2019s resources.\n- User convenience: Provide convenient methods of using a computer system.\n- Non interference: Prevent interference in the activities of its users.\n\n#### **Efficient use**\n\nAn operating system must ensure efficient use of the fundamental computer system resources of memory, CPU, and I/O devices such as disks and printers. Poor efficiency can result if a program does not use a resource allocated to it. Efficient use of resources can be obtained by monitoring use of resources and performing corrective actions when necessary. However, monitoring use of resources increases the overhead, which lowers efficiency of use. In practice, operating systems that emphasize efficient use limit their overhead by either restricting their focus to efficiency of a few important resources, like the CPU and the memory, or by not monitoring the use of resources at all, and instead handling user programs and resources in a manner that guarantees high efficiency.\n\n**User convenience**\n\nIn the early days of computing, user convenience was synonymous with bare necessity\u2014the mere ability to execute a program written in a higher level language was considered adequate. Experience with early operating systems led to demands for better service, which in those days meant only fast response to a user request. Other facets of user convenience evolved with the use of computers in new fields. Early operating systems had command-line interfaces, which required a user to type in a command and specify values of its parameters. Users needed substantial training to learn use of the commands, which was acceptable because most users were scientists or computer professionals. However, simpler interfaces were needed to facilitate use of computers by new classes of users. Hence graphical user interfaces (GUIs) were evolved. These interfaces used icons on a screen to represent programs and files and interpreted mouse clicks on the icons and associated menus as commands concerning them. In many ways, this move can be compared to the spread of car driving skills in the first half of the twentieth century. Over a period of time, driving became less of a specialty and more of a skill that could be acquired with limited training and experience.\n\n**Non interference**\n\nA computer user can face different kinds of interference in his computational activities. Execution of his program can be disrupted by actions of other persons, or the OS services which he wishes to use can be disrupted in a similar manner. The OS prevents such interference by allocating resources for exclusive use of programs and OS services, and preventing illegal accesses to resources. Another form of interference concerns programs and data stored in user files.\n\n## Advantages of Operating System\n\n- It helps in managing the data present in the device i.e. Memory Management.\n- It helps in making the best use of computer hardware.\n- It helps in maintaining the security of the device.\n- It helps different applications in running them efficiently.\n\n## Disadvantages of Operating System\n\n- Operating Systems can be difficult for someone to use.\n- Some OS are expensive and they require heavy maintenance.\n- Operating Systems can come under threat if used by hackers.\n\n## Conclusion\n\nOS (operating system) \u2013 this is how we call the absolute core of modern computing API which directly interacts between you and machine. Types of Operating System and its FeaturesDifferent types of operating systems have their distinct features, so we can choose the right one for different applications. Windows (widely used), macOS (high security level), Linux (flexible OS) and smaller systems/devices such as Android and iOS, it all depends on the requirements of what you need.\n\nIn a similar way like technology improves, operating systems will always have a part in managing jobs such as security and enhancing user experience. Operating systems are mostly about the way you use IT \u2013 even if not at a high level, as would have been required by developers or professionals. Few focus areas when picking OS are too, getting a good job done at the moment and all set for later tasks as well.\n\n## Frequently Asked Questions on Operating Systems \u2013 FAQs\n\n### **Explain Operating System**\n\n> The operating system can be explained as the intermediate, which works between the user and the system hardware so that the user can get a nice experience while using a system. Without an Operating system, there will be a lot of difficulties can be faced by the user while running a system.\n\n### **What are the types of operating Systems?**\n\n> The types of Operating systems are listed below.\n>\n> - [Batch Operating System](https://www.geeksforgeeks.org/batch-processing-operating-system/)\n> - [Multi-Programming System](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/)\n> - [Multi-Processing System](https://www.geeksforgeeks.org/multi-processing-operating-system/)\n> - [Multi-Tasking Operating System](https://www.geeksforgeeks.org/multitasking-operating-system/)\n> - [Time-Sharing Operating System](https://www.geeksforgeeks.org/time-sharing-operating-system/)\n> - [Distributed Operating System](https://www.geeksforgeeks.org/what-is-a-distributed-system/)\n> - [Network Operating System](https://www.geeksforgeeks.org/what-is-a-network-operating-system/)\n> - [Real-Time Operating System](https://www.geeksforgeeks.org/real-time-operating-system-rtos/)\n\n### **What is the importance of an Operating System?**\n\n> The operating system is one of the most important parts of a Computer System. Without an Operating System, the system will not be able to work. As Operating System works as an interpreter between the user and the hardware part, which helps in the smooth functioning of the system.\n\n### **What is an OS Structure?**\n\n> Operating System structure is basically the model in which the system works. The structure of the operating system should be user-friendly, such that if any user having less knowledge about the system comes then he/she will not face any difficulties while running the system.\n\n### **What do you mean by a process in Operating System?**\n\n> A process can be simply defined as the instance of a computer. The process always includes the program code and its operations both. The process also includes the threads running in the computer system. It can be a single thread or a multiple thread.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=next_article)\n\n[Functions of Operating System](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=next_article)\n\nA\n\nAluka Madhavi\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n765\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [CBSE - Class 11](https://www.geeksforgeeks.org/tag/cbse-class-11/?ref=article_tag)\n- [school-programming](https://www.geeksforgeeks.org/tag/school-programming/?ref=article_tag)\n\n### Similar Reads\n\n[Introduction to Operating System\\\\\n\\\\\n\\\\\nAn operating system acts as an intermediary between the user of a computer and computer hardware. In short its an interface between computer hardware and user. The purpose of an operating system is to provide an environment in which a user can execute programs conveniently and efficiently. An operat\\\\\n\\\\\n15 min read](https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/?ref=lbp)\n[Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n[Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n[Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n[Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=lbp)\n[CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n[Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n[Starvation and Aging in Operating Systems\\\\\n\\\\\n\\\\\nStarvation occurs when a process in the OS runs out of resources because other processes are using it. This is a problem with resource management while Operating systems employ aging as a scheduling approach to keep them from starving. It is one of the most common scheduling algorithms in batch syst\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/?ref=lbp)\n[Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\nLike765\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1795509795.1740481313&gtm=45je52o0v884918195za200zb858768136&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717421&z=1146608056)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=1puvvmzku7q)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=70x8yhl932z6)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password",
      "metadata": {
        "title": "Introduction to Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20230512132248/Introduction-of-OS-660.webp",
        "keywords": "operating system, user interface, resource management, memory management, process management, file management, security features, kernel functions, device management, multiuser capabilities, graphical user interface, cloud technologies, open-source Linux, system performance, I/O system management",
        "ogUrl": "https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/",
        "ogDescription": "An operating system serves as an intermediary between users and computer hardware, managing resources and providing an environment for program execution.",
        "description": "An operating system serves as an intermediary between users and computer hardware, managing resources and providing an environment for program execution.",
        "scrapeId": "131a7b87-ff1d-4ed5-9bd7-6575732df270",
        "sourceURL": "https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/",
        "url": "https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/",
        "topic": "operating systems"
      }
    },
    "id": 2
  },
  {
    "url": "https://www.geeksforgeeks.org/types-of-operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/types-of-operating-systems/?type%3Darticle%26id%3D191506&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nNeed and Functions of Operating Systems\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=next_article_top)\n\n# Types of Operating Systems\n\nLast Updated : 23 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n821 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides.\n\n## **1\\. Batch Operating System**\n\nThis type of operating system does not interact with the computer directly. There is an operator which takes similar jobs having the same requirements and groups them into batches. It is the responsibility of the operator to sort jobs with similar needs.\u00a0Batch Operating System is designed to manage and execute a large number of jobs efficiently by processing them in groups.\n\n![Batch Operating System](https://media.geeksforgeeks.org/wp-content/uploads/20230511130815/types1-(1).webp)\n\nBatch Operating System\n\n### **Advantages of Batch Operating System**\n\n- Multiple users can share the batch systems.\n- The idle time for the batch system is very less.\n- It is easy to manage large work repeatedly in batch systems.\n\n### **Disadvantages of Batch Operating System**\n\n- CPU is not used efficiently. When the current process is doing IO, CPU is free and could be utilized by other processes waiting.\n- The other jobs will have to wait for an unknown time if any job fails.\n- In batch operating system, average response time increases as all processes are processed one by one.\n\n**Examples of Batch Operating Systems:** Payroll Systems, Bank Statements, etc.\n\n## 2\\. Multi-Programming Operating System\n\nMultiprogramming Operating Systems can be simply illustrated as more than one program is present in the main memory and any one of them can be kept in execution. This is basically used for better utilization of resources.\n\n![MultiProgramming operating system](https://media.geeksforgeeks.org/wp-content/uploads/20230516182714/Types-of-OS-03-660.webp)\n\nMultiProgramming\n\n### **Advantages of Multi-Programming Operating System**\n\n- CPU is better utilized and overall performance of the system improves.\n- It helps in reducing the response time.\n\n### Multi-Tasking/Time-sharing Operating systems\n\nIt is a type of Multiprogramming system with every process running in round robin manner. Each task is given some time to execute so that all the tasks work smoothly. Each user gets the time of the CPU as they use a single system. These systems are also known as Multitasking Systems. The task can be from a single user or different users also. The time that each task gets to execute is called quantum. After this time interval is over OS switches over to the next task.\n\n![Types-of-OS-01](https://media.geeksforgeeks.org/wp-content/uploads/20230516183620/Types-of-OS-01.webp)\n\n### **Advantages of Time-Sharing OS**\n\n- Each task gets an equal opportunity.\n- Fewer chances of duplication of software.\n- CPU idle time can be reduced.\n- Resource Sharing: Time-sharing systems allow multiple users to share hardware resources such as the CPU, memory, and peripherals, reducing the cost of hardware and increasing efficiency.\n- Improved Productivity: Time-sharing allows users to work concurrently, thereby reducing the waiting time for their turn to use the computer. This increased productivity translates to more work getting done in less time.\n- Improved User Experience: Time-sharing provides an interactive environment that allows users to communicate with the computer in real time, providing a better user experience than batch processing.\n\n### **Disadvantages of Time-Sharing OS**\n\n- Reliability problem.\n- One must have to take care of the security and integrity of user programs and data.\n- Data communication problem.\n- High Overhead: Time-sharing systems have a higher overhead than other operating systems due to the need for scheduling, context switching, and other overheads that come with supporting multiple users.\n- Complexity: Time-sharing systems are complex and require advanced software to manage multiple users simultaneously. This complexity increases the chance of bugs and errors.\n- Security Risks: With multiple users sharing resources, the risk of security breaches increases. Time-sharing systems require careful management of user access, authentication, and authorization to ensure the security of data and software.\n\n### **Examples of Time-Sharing OS with explanation**\n\n- **IBM VM/CMS** : IBM VM/CMS is a time-sharing operating system that was first introduced in 1972. It is still in use today, providing a virtual machine environment that allows multiple users to run their own instances of operating systems and applications.\n- **TSO (Time Sharing Option)** : TSO is a time-sharing operating system that was first introduced in the 1960s by IBM for the IBM System/360 mainframe computer. It allowed multiple users to access the same computer simultaneously, running their own applications.\n- **Windows Terminal Services** : Windows Terminal Services is a time-sharing operating system that allows multiple users to access a Windows server remotely. Users can run their own applications and access shared resources, such as printers and network storage, in real-time.\n\n## 3\\. Multi-Processing Operating System\n\n[Multi-Processing Operating System](https://www.geeksforgeeks.org/difference-between-multiprocessing-and-multiprogramming/) is a type of Operating System in which more than one CPU is used for the execution of resources. It betters the throughput of the System.\n\n![Multiprocessing operating system](https://media.geeksforgeeks.org/wp-content/uploads/20230516183450/Types-of-OS-02-660.webp)\n\nMultiprocessing Operating System\n\n### **Advantages of Multi-Processing Operating System**\n\n- It increases the throughput of the system as processes can be parallelized.\n- As it has several processors, so, if one processor fails, we can proceed with another processor.\n\n## 4\\. Multi User Operating Systems\n\nThese systems allow multiple users to be active at the same time. These system can be either multiprocessor or single processor with interleaving.\n\n![Time-Sharing OS](https://media.geeksforgeeks.org/wp-content/uploads/20230512125908/Capture2210.png)\n\nTime-Sharing OS\n\n## **5\\. Distributed Operating System**\n\nThese types of operating system is a recent advancement in the world of computer technology and are being widely accepted all over the world and, that too, at a great pace. Various autonomous interconnected computers communicate with each other using a shared communication network. Independent systems possess their own memory unit and CPU. These are referred to as [loosely coupled systems or distributed systems](https://www.geeksforgeeks.org/difference-between-loosely-coupled-and-tightly-coupled-multiprocessor-system/) . These systems\u2019 processors differ in size and function. The major benefit of working with these types of the operating system is that it is always possible that one user can access the files or software which are not actually present on his system but some other system connected within this network i.e., remote access is enabled within the devices connected in that network.\n\n![Distributed OS](https://media.geeksforgeeks.org/wp-content/uploads/20230516183602/Types-of-OS-04.webp)\n\nDistributed OS\n\n### **Advantages of Distributed Operating System**\n\n- Failure of one will not affect the other network communication, as all systems are independent of each other.\n- Electronic mail increases the data exchange speed.\n- Since resources are being shared, computation is highly fast and durable.\n- Load on host computer reduces.\n- These systems are easily scalable as many systems can be easily added to the network.\n- Delay in data processing reduces.\n\n### **Disadvantages of Distributed Operating System**\n\n- Failure of the main network will stop the entire communication.\n- To establish distributed systems the language is used not well-defined yet.\n- These types of systems are not readily available as they are very expensive. Not only that the underlying software is highly complex and not understood well yet.\n\n**Examples of Distributed Operating Systems are** LOCUS, etc.\n\n### **Issues With Distributed Operating Systems**\n\n- Networking causes delays in the transfer of data between nodes of a distributed system. Such delays may lead to an inconsistent view of data located in different nodes, and make it difficult to know the chronological order in which events occurred in the system.\n- Control functions like scheduling, resource allocation, and deadlock detection have to be performed in several nodes to achieve computation speedup and provide reliable operation when computers or networking components fail.\n- Messages exchanged by processes present in different nodes may travel over public networks and pass through computer systems that are not controlled by the distributed operating system. An intruder may exploit this feature to tamper with messages, or create fake messages to fool the authentication procedure and masquerade as a user of the system.\n\n## **6\\. Network Operating System**\n\nThese systems run on a server and provide the capability to manage data, users, groups, security, applications, and other networking functions. These types of operating systems allow shared access to files, printers, security, applications, and other networking functions over a small private network. One more important aspect of Network Operating Systems is that all the users are well aware of the underlying configuration, of all other users within the network, their individual connections, etc. and that\u2019s why these computers are popularly known as [tightly coupled systems](https://www.geeksforgeeks.org/difference-between-loosely-coupled-and-tightly-coupled-multiprocessor-system/) .\n\n![Network Operating System](https://media.geeksforgeeks.org/wp-content/uploads/20230511145829/types-7-(1).webp)\n\nNetwork Operating System\n\n### **Advantages of Network Operating System**\n\n- Highly stable centralized servers.\n- Security concerns are handled through servers.\n- New technologies and hardware up-gradation are easily integrated into the system.\n- Server access is possible remotely from different locations and types of systems.\n\n### **Disadvantages of Network Operating System**\n\n- Servers are costly.\n- User has to depend on a central location for most operations.\n- Maintenance and updates are required regularly.\n\n**Examples of Network Operating Systems are** Microsoft Windows Server 2003, Microsoft Windows Server 2008, UNIX, Linux, Mac OS X, Novell NetWare, BSD, etc.\n\n## **7\\. Real-Time Operating System**\n\nThese types of OSs serve real-time systems. The time interval required to process and respond to inputs is very small. This time interval is called **response time.Real-time systems** are used when there are time requirements that are very strict like missile systems, air traffic control systems, robots, etc.\n\n### **Types of Real-Time Operating Systems**\n\n- **Hard Real-Time Systems:** Hard Real-Time OSs are meant for applications where time constraints are very strict and even the shortest possible delay is not acceptable. These systems are built for saving life like automatic parachutes or airbags which are required to be readily available in case of an accident. Virtual memory is rarely found in these systems.\n- **Soft Real-Time Systems:** These OSs are for applications where time-constraint is less strict.\n\nFor more, refer to the [Difference Between Hard Real-Time OS and Soft Real-Time OS](https://www.geeksforgeeks.org/difference-between-hard-real-time-and-soft-real-time-system/) .\n\n![Real-Time Operating System](https://media.geeksforgeeks.org/wp-content/uploads/20230511145635/Types8.webp)\n\nReal-Time Operating System\n\n### **Advantages of RTOS**\n\n- **Maximum Consumption:** Maximum utilization of devices and systems, thus more output from all the resources.\n- **Task Shifting:** The time assigned for shifting tasks in these systems is very less. For example, in older systems, it takes about 10 microseconds in shifting from one task to another, and in the latest systems, it takes 3 microseconds.\n- **Focus on Application:** Focus on running applications and less importance on applications that are in the queue.\n- Real-time **operating system in** the **embedded system:** Since the size of programs is small, RTOS can also be used in embedded systems like in transport and others.\n- **Error Free:** These types of systems are error-free.\n- **Memory Allocation:** Memory allocation is best managed in these types of systems.\n\n### **Disadvantages of RTOS**\n\n- **Limited Tasks:** Very few tasks run at the same time and their concentration is very less on a few applications to avoid errors.\n- **Use heavy system resources:** Sometimes the system resources are not so good and they are expensive as well.\n- **Complex Algorithms:** The algorithms are very complex and difficult for the designer to write on.\n- **Device driver and interrupt signals:** It needs specific device drivers and interrupts signal to respond earliest to interrupts.\n- **Thread Priority:** It is not good to set thread priority as these systems are very less prone to switching tasks.\n\n**Examples of Real-Time Operating Systems are** Scientific experiments, medical imaging systems, industrial control systems, weapon systems, robots, air traffic control systems, etc.\n\n## 8\\. Mobile Operating Systems\n\nThese operating systems are mainly for mobile devices. Examples of such operating systems are Android and iOS.\n\n## Conclusion\n\nOperating systems come in various types, each used for specific needs. Whether it\u2019s managing large batches of jobs, enabling multiple users to work simultaneously, coordinating networked computers, or ensuring timely execution in critical systems. Understanding these types helps in choosing the right operating system for the right job, ensuring efficiency and effectiveness.\n\n## Frequently Asked Questions on Types of Operating Systems \u2013 FAQs\n\n### What is a batch operating system?\n\n> A batch operating system processes batches of jobs without user interaction. It collects similar jobs, executes them without manual intervention, and is common in mainframe environments for tasks like payroll processing.\n\n### What is a time-sharing operating system?\n\n> A time-sharing OS allows multiple users to use a computer system simultaneously by dividing CPU time among multiple tasks or users. It provides efficient sharing of resources and is typical in interactive computing environments.\n\n### What are embedded operating systems?\n\n> Embedded OSs are designed for specific hardware and tasks in embedded systems like appliances, vehicles, and industrial machines. They are optimized for reliability, real-time processing, and often have limited user interfaces.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=next_article)\n\n[Need and Functions of Operating Systems](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=next_article)\n\n[A](https://www.geeksforgeeks.org/user/akash1295/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[akash1295](https://www.geeksforgeeks.org/user/akash1295/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n821\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [School Programming](https://www.geeksforgeeks.org/category/school-programming/?ref=article_category)\n- [CBSE - Class 11](https://www.geeksforgeeks.org/tag/cbse-class-11/?ref=article_tag)\n- [school-programming](https://www.geeksforgeeks.org/tag/school-programming/?ref=article_tag)\n\n+1 More\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike821\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/types-of-operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=wpbteebazek8)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=x9q477yojcyx)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Types of Operating Systems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20230511130815/types1-(1).webp",
        "keywords": "Operating Systems, Batch Operating System, Multi-Programming Operating System, Time-Sharing Operating System, Multi-Processing Operating System, Distributed Operating System, Network Operating System, Real-Time Operating System, Mobile Operating Systems, Resource Sharing, User Experience, CPU Utilization, Job Scheduling, System Throughput, Security Risks",
        "ogUrl": "https://www.geeksforgeeks.org/types-of-operating-systems/",
        "ogDescription": "Operating systems are categorized by functionality into types such as batch, multi-programming, time-sharing, multi-processing, multi-user, distributed, network, real-time, and mobile, each serving specific needs and use cases.",
        "description": "Operating systems are categorized by functionality into types such as batch, multi-programming, time-sharing, multi-processing, multi-user, distributed, network, real-time, and mobile, each serving specific needs and use cases.",
        "scrapeId": "7b8beebd-e7da-4f3c-b373-ef8eeddfba52",
        "sourceURL": "https://www.geeksforgeeks.org/types-of-operating-systems/",
        "url": "https://www.geeksforgeeks.org/types-of-operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 3
  },
  {
    "url": "https://www.geeksforgeeks.org/functions-of-operating-system/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/functions-of-operating-system/?type%3Darticle%26id%3D253312&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nTypes of Operating Systems\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=next_article_top)\n\n# Functions of Operating System\n\nLast Updated : 30 Oct, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n393 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of the hardware must be appropriate to ensure the computer system\u2019s correct operation and to prevent user programs from interfering with it.\u00a0The main goal of the Operating System is to make the computer environment more convenient to use and the Secondary goal is to use the resources most efficiently.\u00a0In this article we will see functions of operating system in detail.\n\n## Why Operating Systems Used?\n\nOperating System is used as a communication channel between the Computer hardware and the user. It works as an intermediate between System Hardware and End-User. Operating System handles the following responsibilities:\n\n- It controls all the computer resources.\n- It provides valuable services to user programs.\n- It coordinates the execution of user programs.\n- It provides resources for user programs.\n- It provides an interface (virtual machine) to the user.\n- It hides the complexity of software.\n- It supports multiple execution modes.\n- It monitors the execution of user programs to prevent errors.\n\n## **Functions of an Operating System**\n\n### **Memory Management**\n\nThe operating system manages the Primary Memory or Main Memory. Main memory is made up of a large array of bytes or words where each byte or word is assigned a certain address. Main memory is fast storage and it can be accessed directly by the CPU. For a program to be executed, it should be first loaded in the main memory. An operating system manages the allocation and deallocation of memory to various processes and ensures that the other process does not consume the memory allocated to one process. An Operating System performs the following activities for Memory Management:\n\n- It keeps track of primary memory, i.e., which bytes of memory are used by which user program. The memory addresses that have already been allocated and the memory addresses of the memory that has not yet been used.\n- In multiprogramming, the OS decides the order in which processes are granted memory access, and for how long.\n- It Allocates the memory to a process when the process requests it and deallocates the memory when the process has terminated or is performing an I/O operation.\n\n![Memory Management](https://media.geeksforgeeks.org/wp-content/uploads/20230518091047/1white-660x453.webp)\n\nMemory Management\n\n### **Processor Management**\n\nIn a multi-programming environment, the OS decides the order in which processes have access to the processor, and how much processing time each process has. This function of OS is called [Process Scheduling](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/). An Operating System performs the following activities for [Processor Management](https://www.geeksforgeeks.org/introduction-of-process-management/).\n\nAn operating system manages the processor\u2019s work by allocating various jobs to it and ensuring that each process receives enough time from the processor to function properly.\n\nKeeps track of the status of processes. The program which performs this task is known as a traffic controller. Allocates the CPU that is a processor to a process. De-allocates processor when a process is no longer required.\n\n![Process management](https://media.geeksforgeeks.org/wp-content/uploads/20241021154439058669/Screenshot-2024-10-21-121737.png)\n\nProcess management\n\n### **Device Management**\n\nAn OS manages device communication via its respective drivers. It performs the following activities for device management.\n\n- Keeps track of all devices connected to the system. Designates a program responsible for every device known as the Input/Output controller.\n- Decide which process gets access to a certain device and for how long.\n- Allocates devices effectively and efficiently. Deallocates devices when they are no longer required.\n- \u00a0There are various input and output devices. An OS controls the working of these input-output devices.\n- It receives the requests from these devices, performs a specific task, and communicates back to the requesting process.\n\n### **File Management**\n\nA file system is organized into directories for efficient or easy navigation and usage. These directories may contain other directories and other files. An Operating System carries out the following file management activities. It keeps track of where information is stored, user access settings, the status of every file, and more. These facilities are collectively known as the [file system](https://www.geeksforgeeks.org/file-systems-in-operating-system/).\u00a0An OS keeps track of information regarding the creation, deletion, transfer, copy, and storage of files in an organized way. It also maintains the integrity of the data stored in these files, including the file directory structure, by protecting against unauthorized access.\n\n![File Management](https://media.geeksforgeeks.org/wp-content/uploads/20230518091452/Modules-of-the-hierarchy-of-a-File-Management-System.webp)\n\nFile Management\n\n### I/O Management\n\n**I/O management** is the important function of operating system refers to how the OS handles **input** and **output** operations between the computer and external devices, such as keyboards, mice, printers, hard drives, and monitors.\n\n### **User Interface or Command Interpreter**\n\nThe user interacts with the computer system through the operating system. Hence OS acts as an interface between the user and the computer hardware. This user interface is offered through a set of commands or a graphical user interface (GUI). Through this interface, the user makes interacts with the applications and the machine hardware.\n\n![Command Interpreter](https://media.geeksforgeeks.org/wp-content/uploads/20230518091209/223-1.webp)\n\nCommand Interpreter\n\n### **Booting the Computer**\n\nThe process of starting or restarting the computer is known as booting. If the computer is switched off completely and if turned on then it is called cold booting. Warm booting is a process of using the operating system to restart the computer.\n\n### **Security**\n\nThe operating system uses password protection to protect user data and similar other techniques. it also prevents unauthorized access to programs and user data.\u00a0The operating system provides various techniques which assure the integrity and confidentiality of user data. The following security measures are used to protect user data:\n\n- \u00a0Protection against unauthorized access through login.\n- Protection against intrusion by keeping the firewall active.\n- Protecting the system memory against malicious access.\n- Displaying messages related to system vulnerabilities.\n\n### **Control Over System Performance**\n\nOperating systems play a pivotal role in controlling and optimizing system performance. They act as intermediaries between hardware and software, ensuring that computing resources are efficiently utilized. One fundamental aspect is resource allocation, where the OS allocates CPU time, memory, and I/O devices to different processes, striving to provide fair and optimal resource utilization. Process scheduling, a critical function, helps decide which processes or threads should run when preventing any single task from monopolizing the [CPU](https://www.geeksforgeeks.org/what-are-the-functions-of-a-cpu/) and enabling effective multitasking.\n\n![Control Over System Performance](https://media.geeksforgeeks.org/wp-content/uploads/20230518091718/Screenshot-2023-05-18-091631-660.webp)\n\nControl Over System Performance\n\n### **Job Accounting**\n\nThe operating system Keeps track of time and resources used by various tasks and users, this information can be used to track resource usage for a particular user or group of users.\u00a0In a multitasking OS where multiple programs run simultaneously, the OS determines which applications should run in which order and how time should be allocated to each application.\n\n### **Error-Detecting Aids**\n\nThe operating system constantly monitors the system to detect errors and avoid malfunctioning computer systems.\u00a0From time to time, the operating system checks the system for any external threat or malicious software activity. It also checks the hardware for any type of damage. This process displays several alerts to the user so that the appropriate action can be taken against any damage caused to the system.\n\n### **Coordination Between Other Software and Users**\n\nOperating systems also coordinate and assign [interpreters](https://www.geeksforgeeks.org/introduction-to-interpreters/), [compilers](https://www.geeksforgeeks.org/introduction-to-compilers/), [assemblers](https://www.geeksforgeeks.org/difference-between-compiler-and-assembler/), and other software to the various users of the computer systems. In simpler terms, think of the operating system as the traffic cop of your computer. It directs and manages how different software programs can share your computer\u2019s resources without causing chaos. It ensures that when you want to use a program, it runs smoothly without crashing or causing problems for others. So, it\u2019s like the friendly officer ensuring a smooth flow of traffic on a busy road, making sure everyone gets where they need to go without any accidents or jams.\n\n### **Performs Basic Computer Tasks**\n\nThe management of various peripheral devices such as the mouse, keyboard, and printer is carried out by the operating system. Today most operating systems are plug-and-play. These operating systems automatically recognize and configure the devices with no user interference.\n\n### **Network Management**\n\n- **Network Communication:** Think of them as traffic cops for your internet traffic. Operating systems help computers talk to each other and the internet. They manage how data is packaged and sent over the network, making sure it arrives safely and in the right order.\n\n- **Settings and Monitoring:** Think of them as the settings and security guard for your internet connection. They also let you set up your network connections, like [Wi-Fi](https://www.geeksforgeeks.org/what-is-wi-fiwireless-fidelity/) or [Ethernet](https://www.geeksforgeeks.org/what-is-ethernet/), and keep an eye on how your network is doing. They make sure your computer is using the network efficiently and securely, like adjusting the speed of your internet or protecting your computer from online threats.\n\n## **Services Provided by an Operating System**\n\nThe Operating System provides certain services to the users which can be listed in the following manner:\n\n- **User Interface:** Almost all operating systems have a user interface (UI). This interface can take several forms. One is a [command-line interface(CLI)](https://www.geeksforgeeks.org/what-is-command-line-interface-cli/), which uses text commands and a method for entering them (say, a keyboard for typing in commands in a specific format with specific options). Another is a batch interface, in which commands and directives to control those commands are entered into files, and those files are executed. Most commonly, a [graphical user interface (GUI)](https://www.geeksforgeeks.org/what-is-graphical-user-interface/) is used. the interface is a window system with a pointing device to direct I/O, choose from menus, and make selections and a keyboard to enter text.\n\n- **Program Execution:** The Operating System is responsible for the execution of all types of programs whether it be user programs or system programs. The Operating System utilizes various resources available for the efficient running of all types of functionalities.\n\n- **Handling Input/Output Operations:** The Operating System is responsible for handling all sorts of inputs, i.e., from the keyboard, mouse, desktop, etc. The Operating System does all interfacing most appropriately regarding all kinds of Inputs and Outputs.\n\nFor example, there is a difference between all types of peripheral devices such as mice or keyboards, the Operating System is responsible for handling data between them.\n\n- **Manipulation of File System:** The Operating System is responsible for making decisions regarding the storage of all types of data or files, i.e., [floppy disk/hard disk](https://www.geeksforgeeks.org/difference-between-hard-disk-and-floppy-disk/)/pen drive, etc. The Operating System decides how the data should be manipulated and stored.\n\n- **Resource Allocation:** The Operating System ensures the proper use of all the resources available by deciding which resource to be used by whom for how much time. All the decisions are taken by the Operating System.\n\n- **Accounting:** The Operating System tracks an account of all the functionalities taking place in the computer system at a time. All the details such as the types of errors that occurred are recorded by the Operating System.\n\n- **Information and Resource Protection:** The Operating System is responsible for using all the information and resources available on the machine in the most protected way. The Operating System must foil an attempt from any external resource to hamper any sort of data or information.\n- **Communication:** The operating system implements communication between one process to another process to exchange information. Such communication may occur between processes that are executing on the same computer or between processes that are executing on different computer systems tied together by a computer network.\n\n- **System Services:** The operating system provides various system services, such as printing, time and date management, and event logging.\n\n- **Error Detection:** The operating system needs to be detecting and correcting errors constantly. Errors may occur in the CPU and memory hardware ( for eg. a memory error or a power failure), in I/O devices (such as a parity error on disk, a connection failure on a network, or a lack of paper in the printer), and in the user program ( an arithmetic overflow, an attempt to access an illegal memory location or a too-great use of CPU time). For each type of error, the operating system should take the appropriate action to ensure correct and consistent computing.\n\nAll these services are ensured by the Operating System for the convenience of the users to make the programming task easier. All different kinds of Operating Systems more or less provide the same services.\n\n## Characteristics of Operating System\n\n- **Virtualization:** Operating systems can provide Virtualization capabilities, allowing multiple operating systems or instances of an operating system to run on a single physical machine. This can improve resource utilization and provide isolation between different operating systems or applications.\n\n- **Networking:** Operating systems provide networking capabilities, allowing the computer system to connect to other systems and devices over a network. This can include features such as [network protocols](https://www.geeksforgeeks.org/types-of-network-protocols-and-their-uses/), network interfaces, and [network security](https://www.geeksforgeeks.org/network-security/).\n\n- **Scheduling:** Operating systems provide scheduling algorithms that determine the order in which tasks are executed on the system. These algorithms prioritize tasks based on their resource requirements and other factors to optimize system performance.\n\n- **Interprocess Communication:** Operating systems provide mechanisms for applications to communicate with each other, allowing them to share data and coordinate their activities.\n\n- **Performance Monitoring:** Operating systems provide tools for monitoring system performance, including CPU usage, memory usage, disk usage, and network activity. This can help identify performance bottlenecks and optimize system performance.\n\n- **Backup and Recovery:** Operating systems provide backup and recovery mechanisms to protect data in the event of system failure or data loss.\n- **Debugging:** Operating systems provide [debugging tools](https://www.geeksforgeeks.org/software-engineering-debugging/) that allow developers to identify and fix software bugs and other issues in the system.\n\n## Conclusion\n\nIn conclusion, the functions of an operating system are essential for making a computer work smoothly. It manages the [hardware and software](https://www.geeksforgeeks.org/difference-between-hardware-and-software/), allowing different programs to run, handling memory, files, and devices like [printers](https://www.geeksforgeeks.org/what-is-a-printer/) or [keyboards](https://www.geeksforgeeks.org/types-of-computer-keyboard/), and ensuring everything is secure. Without these core functions, we wouldn\u2019t be able to use computers efficiently. The OS acts like the brain of the computer, coordinating all activities and making sure everything runs properly for users and applications.\n\n## Frequently Asked Questions on Functions of Operating System \u2013 FAQs\n\n### **What does an operating system do?**\n\n> An operating system manages computer hardware and software, coordinates tasks, and provides a user interface for interacting with the computer.\n\n### **How does an operating system manage memory?**\n\n> It allocates memory to programs, ensures efficient use of available memory, and handles virtual memory to extend available space when needed.\n\n### **What is the role of an operating system in file management?**\n\n> It organizes files on storage devices, handles file access and storage, and ensures data integrity and security.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=next_article)\n\n[Types of Operating Systems](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=next_article)\n\n[A](https://www.geeksforgeeks.org/user/Amaninder.Singh/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Amaninder.Singh](https://www.geeksforgeeks.org/user/Amaninder.Singh/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n393\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike393\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/functions-of-operating-system/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=304717646.1740481334&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717422&z=1026749094)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=wtv2e5bghh3x)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=geywqbjjrfj6)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password",
      "metadata": {
        "title": "Functions of Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": [
          "https://media.geeksforgeeks.org/wp-content/uploads/20230518091140/download-(1).webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230518091209/223-1.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230518091047/1white-660x453.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230926192813/imgonline-com-ua-compressed-1V09WkICpTmU6Dy.jpg",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230518091452/Modules-of-the-hierarchy-of-a-File-Management-System.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230518091718/Screenshot-2023-05-18-091631-660.webp"
        ],
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/functions-of-operating-system/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "6155d17d-9dd4-406b-ba83-19100df19382",
        "sourceURL": "https://www.geeksforgeeks.org/functions-of-operating-system/",
        "url": "https://www.geeksforgeeks.org/functions-of-operating-system/",
        "topic": "operating systems"
      }
    },
    "id": 4
  },
  {
    "url": "https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/?type%3Darticle%26id%3D141732&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nWhat is Computer Networking?\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/what-is-computer-networking/?ref=next_article_top)\n\n# What happens when we turn on computer?\n\nLast Updated : 29 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n224 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA computer without a program running is just an inert hunk of electronics. The first thing a computer has to do when it is turned on is to start up a special program called an operating system. The operating system\u2019s job is to help other computer programs work by handling the messy details of controlling the computer\u2019s hardware.\n\n**What happens when we turn on computer?**\n\n1. The power supply sends electricity to the components of the computer, such as the motherboard, hard drive, and fans.\n2. The BIOS (basic input/output system) or [UEFI](https://www.geeksforgeeks.org/uefiunified-extensible-firmware-interface-and-how-is-it-different-from-bios/) initializes and performs a power-on self-test (POST), which checks the basic hardware components to ensure they are working properly. If any issues are detected, error messages may be displayed.\n3. The operating system (OS), such as Windows or macOS, is loaded from the hard drive or another storage device into the computer\u2019s RAM (random access memory).\n4. The OS then initializes its own components and drivers and presents the login screen or desktop environment to the user.\n\n### An overview of the boot process\n\n![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201016104502/12331.png)\n\nThe boot process is something that happens every time you turn your computer on. You don\u2019t really see it, because it happens so fast. You press the power button and come back a few sec (or minutes if on slow storage like HDD) later and Windows 10, or Windows 11, or whatever Operating System you use is all loaded.\n\nThe BIOS chip tells it to look in a fixed place, usually on the lowest-numbered hard disk (the boot disk) for a special program called a boot loader (under Linux the boot loader is called Grub or LILO). The boot loader is pulled into memory and started. The bootloader\u2019s job is to start the real operating system.\n\n### Functions of BIOS\n\n**1\\. POST (Power On Self Test):** The Power On Self Test happens each time you turn your computer on. It sounds complicated and that\u2019s because it kind of is. Your computer does so much when it\u2019s turned on and this is just part of that.\n\n- It initializes the various hardware devices.\n- It is an important process to ensure that all the devices operate smoothly without any conflicts. BIOSes following ACPI create tables describing the devices in the computer.\n- The POST first checks the bios and then tests the CMOS RAM.\n- If there is no problem with this then POST continues to check the CPU, hardware devices such as the Video Card, and the secondary storage devices such as the Hard Drive, Floppy Drives, Zip Drive, or CD/DVD Drives.\n- If some errors are found then an error message is displayed on the screen or a number of beeps are heard.\n- These beeps are known as POST beep codes.\n\n**2\\. Master Boot Record:** The Master Boot Record (MBR) is a special boot sector at the beginning of the disk. The MBR contains the code that loads the rest of OS, known as bootloader. This complicated process (called the Boot Process) starts with the POST (Power On Self Test) and ends when the Bios searches for the MBR on the Hard Drive, which is generally located in the first sector, first head, first cylinder (cylinder 0, head 0, sector 1).\n\nA typical structure looks like this:\n\n![mbr](https://media.geeksforgeeks.org/wp-content/uploads/mbr-2.png)\n\nThe bootstrap loader is stored in the computer\u2019s EPROM, ROM, or another non-volatile memory. When the computer is turned on or restarted, it first performs the power-on-self-test, also known as POST. If the POST is successful and no issues are found, the bootstrap loader will load the operating system for the computer into memory. The computer will then be able to quickly access, load, and run the operating system.\n\n**3\\. init:** init is the last step of the kernel boot sequence. It looks for the file _/etc/inittab_ to see if there is an entry for _initdefault_. It is used to determine the initial run level of the system. A run-level is used to decide the initial state of the operating system.\n\nSome of the run levels are:\n\n- **Level 0:** System Halt.\n- **Level 1:** Single user mode.\n- **Level 2:** Full multiuser mode without network.\n- **Level 3:** Full multiuser mode with network.\n- **Level 4:** user definable.\n- **Level 5:** Full multiuser mode with network and X display manager.\n- **Level 6:** Reboot.\n\nThe above design of init is called SysV- pronounced as [System five](https://en.wikipedia.org/wiki/UNIX_System_V). Several other implementations of init have been written now. Some of the popular implementations are systemd and upstart. Upstart is being used by ubuntu since 2006. More details of the upstart can be found [here](https://help.ubuntu.com/community/UbuntuBootupHowto).\n\nThe next step of init is to start up various daemons that support networking and other services. X server daemon is one of the most important daemons. It manages the display, keyboard, and mouse. When X server daemon is started you see a Graphical Interface and a login screen is displayed.\n\n**4\\. System Configuration:**\n\nThe BIOS allows the user to configure various system settings, such as:\n\n1. Boot order: This determines the order in which the computer checks for bootable devices. For example, if the boot order is set to \u201chard drive\u201d first, the computer will try to boot from the hard drive before checking other devices such as a CD/DVD drive or a USB drive.\n2. Time and date: The BIOS stores the time and date information, which can be set and adjusted by the user. This information is used by the operating system and various applications.\n3. Hardware settings: The BIOS provides options to configure various hardware settings such as CPU voltage, clock speed, and memory timings. These settings can be used to optimize system performance, but should only be changed by advanced users with the proper knowledge.\n\n**5\\. Security:**\n\nThe BIOS can also provide security features such as:\n\n1. Password protection: The BIOS can be set to require a password to access certain features or to prevent unauthorized booting of the computer. This can be useful in preventing unauthorized access to sensitive data.\n2. Secure boot: Secure boot is a feature that ensures that only trusted operating system boot loaders, drivers, and firmware are loaded during the boot process. This helps to prevent malware and other unauthorized software from running on the system.\n3. TPM (Trusted Platform Module): Some modern motherboards have a built-in TPM that provides hardware-based security features such as encryption, digital certificates, and secure key storage. This can help to protect sensitive data and prevent unauthorized access to the system.\n\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/what-is-computer-networking/?ref=next_article)\n\n[What is Computer Networking?](https://www.geeksforgeeks.org/what-is-computer-networking/?ref=next_article)\n\nS\n\nSaket Kumar\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n224\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [School Programming](https://www.geeksforgeeks.org/category/school-programming/?ref=article_category)\n- [Technical Scripter](https://www.geeksforgeeks.org/category/technical-scripter/?ref=article_category)\n- [CBSE - Class 11](https://www.geeksforgeeks.org/tag/cbse-class-11/?ref=article_tag)\n- [OS Basics](https://www.geeksforgeeks.org/tag/os-basics/?ref=article_tag)\n\n+1 More\n\n### Similar Reads\n\n[What happens when we turn on computer?\\\\\n\\\\\n\\\\\nA computer without a program running is just an inert hunk of electronics. The first thing a computer has to do when it is turned on is to start up a special program called an operating system. The operating system's job is to help other computer programs work by handling the messy details of contro\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/?ref=ml_lbp)\n[What is Computer Networking?\\\\\n\\\\\n\\\\\nComputer networking is like having a group of friends who all have phones and can call or text each other. In computer networking, instead of phones, we have computers and instead of phone lines, we use cables, Wi-Fi, or other methods to connect them. When computers are connected to a network, they\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/what-is-computer-networking/?ref=ml_lbp)\n[What is Computer?\\\\\n\\\\\n\\\\\nA computer is an electronic device that can process and store information. It can perform calculations, manipulate data, and execute instructions to accomplish specific tasks. The basic components of a computer include the central processing unit (CPU), memory (RAM), storage (hard drive or solid-sta\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/a-simple-understanding-of-computer/?ref=ml_lbp)\n[Computer Hardware\\\\\n\\\\\n\\\\\nComputer hardware includes the physical parts of a computer, such as a case, central processing unit (CPU), random access memory (RAM), monitor, and mouse which processes the input according to the set of instructions provided to it by the user and gives the desired output. The computer has mainly h\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/computer-hardware/?ref=ml_lbp)\n[What is PC (Personal Computer) Intrusion?\\\\\n\\\\\n\\\\\nWhen someone tries to access any part of our personal computer system then PC intrusion occurs. Every Personal Computer (PC) which is connected to the internet is a target of hackers and cybercriminals. There are several ways an intruder can try to gain access to your computer. They can : Access you\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/what-is-pc-personal-computer-intrusion/?ref=ml_lbp)\n[What are the Uses of Computer in Business?\\\\\n\\\\\n\\\\\nComputers perform many types of tasks, store retrieve, and process information. A computer can create documents, send/receive emails, browse information online, and play video games. In this article, we will learn how computers can help us in business. Computer in BusinessComputers have become a par\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/what-are-the-uses-of-computer-in-business/?ref=ml_lbp)\n[What is Program Counter?\\\\\n\\\\\n\\\\\nMany complex components come together to make a computer system work seamlessly. One such essential element is the program counter. There is a register in a PC (program counter) processor that contains the address of the next instruction to be executed from memory. In this article we learn what prog\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/what-is-program-counter/?ref=ml_lbp)\n[Change what happens when you shut the laptop's lid on Windows 10\\\\\n\\\\\n\\\\\nWe usually see the laptop going to sleep automatically when we shut the laptop\u00e2\u20ac\u2122s lid. We can choose action on what the laptop should do when we shut the laptop\u00e2\u20ac\u2122s lid. There are 4 options to choose from. Shut Down - As all of you are aware of this. The laptop shuts down the operating system. When you\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/change-what-happens-when-you-shut-the-laptops-lid-on-windows-10/?ref=ml_lbp)\n[Computer Security Threats\\\\\n\\\\\n\\\\\nComputer security threats are potential threats to your computer's efficient operation and performance. These could be harmless adware or dangerous trojan infection. As the world becomes more digital, computer security concerns are always developing. A threat in a computer system is a potential dang\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/computer-security-threats/?ref=ml_lbp)\n[Types of Computers\\\\\n\\\\\n\\\\\nPre-Requisite: Basics of Computer A computer is an electronic device that has storage, computations, input (data), output (data) and networking capabilities. With the growing AI, computers also have learning capabilities from the data provided. The input and output data can be in different forms lik\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/types-of-computers/?ref=ml_lbp)\n\nLike224\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1864824423.1740481344&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717422&z=192286597)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=1lu72fd2vp1t)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=3br2cpvzj3x0)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "What happens when we turn on computer? - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20201016104502/12331.png",
        "keywords": "operating system, boot process, Power On Self Test, Master Boot Record, bootstrap loader, kernel boot sequence, system configuration, BIOS settings, secure boot, Trusted Platform Module, X server daemon, init default run level, computer hardware initialization, error messages, POST beep codes",
        "ogUrl": "https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/",
        "ogDescription": "The boot process of a computer involves powering on, performing a Power-On Self Test (POST) via the BIOS, loading the operating system from storage into RAM, and initializing system components to present the user interface.",
        "description": "The boot process of a computer involves powering on, performing a Power-On Self Test (POST) via the BIOS, loading the operating system from storage into RAM, and initializing system components to present the user interface.",
        "scrapeId": "38ffaed5-7120-49ef-97f0-8041b16859f2",
        "sourceURL": "https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/",
        "url": "https://www.geeksforgeeks.org/what-happens-when-we-turn-on-computer/",
        "topic": "operating systems"
      }
    },
    "id": 5
  },
  {
    "url": "https://www.geeksforgeeks.org/kernel-in-operating-system/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/kernel-in-operating-system/?type%3Darticle%26id%3D457728&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nHow Linux Kernel Boots?\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/how-linux-kernel-boots/?ref=next_article_top)\n\n# Kernel in Operating System\n\nLast Updated : 24 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n148 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA kernel is the core part of an operating system. It acts as a bridge between software applications and the hardware of a computer.\n\n- The kernel manages system resources, such as the CPU, memory, and devices, ensuring everything works together smoothly and efficiently.\n- It handles tasks like running programs, accessing files, and connecting to devices like printers and keyboards.\n- An Operating System includes the kernel as its core, but also provides a user interface, file system management, network services, and various utility applications that allow users to interact with the system\n\n![kernel](https://media.geeksforgeeks.org/wp-content/uploads/20250124124411692602/kernel.webp)\n\nKernel (Operating System)\n\n- Facilitates communication between hardware and user applications.\n- Ensures efficient and secure multitasking.\n- Manages system stability and prevents unauthorized resource access.\n\n## **Types of Kernel**\n\nThe kernel manages the system\u2019s resources and facilitates communication between hardware and software components. These kernels are of different types let\u2019s discuss each type along with its advantages and disadvantages:\n\n## **1\\. Monolithic Kernel**\n\nIt is one of the types of kernel where all operating system services operate in kernel space. It has dependencies between systems components. It has huge lines of code which is complex.\n\n**Example:**\n\n```\nUnix, Linux, Open VMS, XTS-400 etc.\n```\n\n### **Advantages**\n\n- **Efficiency:** Monolithic kernels are generally faster than other types of kernels because they don\u2019t have to switch between user and kernel modes for every system call, which can cause overhead.\n- **Tight Integration:** Since all the operating system services are running in kernel space, they can communicate more efficiently with each other, making it easier to implement complex functionalities and optimizations.\n- **Simplicity:** Monolithic kernels are simpler to design, implement, and debug than other types of kernels because they have a unified structure that makes it easier to manage the code.\n- **Lower latency:** Monolithic kernels have lower latency than other types of kernels because system calls and [interrupts](https://www.geeksforgeeks.org/interrupts/) can be handled directly by the kernel.\n\n### **Disadvantages**\n\n- **Stability Issues:** Monolithic kernels can be less stable than other types of kernels because any bug or security vulnerability in a kernel service can affect the entire system.\n- **Security Vulnerabilities:** Since all the operating system services are running in kernel space, any security vulnerability in one of the services can compromise the entire system.\n- **Maintenance Difficulties:** Monolithic kernels can be more difficult to maintain than other types of kernels because any change in one of the services can affect the entire system.\n- **Limited Modularity:** Monolithic kernels are less modular than other types of kernels because all the operating system services are tightly integrated into the kernel space. This makes it harder to add or remove functionality without affecting the entire system.\n\n## **2\\. Micro Kernel**\n\nIt is kernel types which has minimalist approach. It has virtual memory and thread scheduling. [Micro Kernel](https://www.geeksforgeeks.org/microkernel-in-operating-systems/) is more stable with less services in kernel space. It puts rest in user space.\u00a0It is use in small os.\n\n**Example :**\n\n```\nMach, L4, AmigaOS, Minix, K42 etc.\n```\n\n### **Advantages**\n\n- **Reliability:** Microkernel architecture is designed to be more reliable than monolithic kernels. Since most of the operating system services run outside the kernel space, any bug or security vulnerability in a service won\u2019t affect the entire system.\n- **Flexibility** : Microkernel architecture is more flexible than monolithic kernels because it allows different operating system services to be added or removed without affecting the entire system.\n- **Modularity:** Microkernel architecture is more modular than monolithic kernels because each operating system service runs independently of the others. This makes it easier to maintain and debug the system.\n- **Portability:** Microkernel architecture is more portable than monolithic kernels because most of the operating system services run outside the kernel space. This makes it easier to port the operating system to different hardware architectures.\n\n### **Disadvantages**\n\n- **Performance:** Microkernel architecture can be slower than monolithic kernels because it requires more context switches between user space and kernel space.\n- **Complexity:** Microkernel architecture can be more complex than monolithic kernels because it requires more communication and [synchronization mechanisms](https://www.geeksforgeeks.org/introduction-of-process-synchronization/) between the different operating system services.\n- **Development Difficulty:** Developing operating systems based on microkernel architecture can be more difficult than developing monolithic kernels because it requires more attention to detail in designing the communication and synchronization mechanisms between the different services.\n- **Higher Resource Usage:** Microkernel architecture can use more system resources, such as memory and CPU, than monolithic kernels because it requires more communication and synchronization mechanisms between the different operating system services.\n\n## **3\\. Hybrid Kernel**\n\nIt is the combination of both monolithic kernel and microkernel. It has speed and design of monolithic kernel and modularity and stability of microkernel.\n\n**Example :**\n\n```\nWindows NT, Netware, BeOS etc.\n```\n\n### **Advantages**\n\n- **Performance:** Hybrid kernels can offer better performance than microkernels because they reduce the number of context switches required between user space and kernel space.\n- **Reliability:** Hybrid kernels can offer better reliability than monolithic kernels because they isolate [drivers](https://www.geeksforgeeks.org/device-driver-and-its-purpose/) and other kernel components in separate protection domains.\n- **Flexibility:** Hybrid kernels can offer better flexibility than monolithic kernels because they allow different operating system services to be added or removed without affecting the entire system.\n- **Compatibility:** Hybrid kernels can be more compatible than microkernels because they can support a wider range of device drivers.\n\n### **Disadvantages**\n\n- **Complexity:** Hybrid kernels can be more complex than monolithic kernels because they include both monolithic and microkernel components, which can make the design and implementation more difficult.\n- **Security:** Hybrid kernels can be less secure than microkernels because they have a larger attack surface due to the inclusion of monolithic components.\n- **Maintenance:** Hybrid kernels can be more difficult to maintain than microkernels because they have a more complex design and implementation.\n- **Resource Usage:** Hybrid kernels can use more system resources than microkernels because they include both monolithic and microkernel components.\n\n## **4\\. Exo Kernel**\n\nIt is the type of kernel which follows end-to-end principle. It has fewest hardware abstractions as possible. It allocates physical resources to applications.\n\n**Example :**\n\n```\nNemesis, ExOS etc.\n```\n\n### **Advantages**\n\n- **Flexibility:** Exokernels offer the highest level of flexibility, allowing developers to customize and optimize the operating system for their specific application needs.\n- **Performance:** Exokernels are designed to provide better performance than traditional kernels because they eliminate unnecessary abstractions and allow applications to directly access hardware resources.\n- **Security:** Exokernels provide better security than traditional kernels because they allow for fine-grained control over the allocation of system resources, such as memory and [CPU](https://www.geeksforgeeks.org/difference-between-cpu-and-gpu/) time.\n- **Modularity:** Exokernels are highly modular, allowing for the easy addition or removal of operating system services.\n\n### **Disadvantages**\n\n- **Complexity:** Exokernels can be more complex to develop than traditional kernels because they require greater attention to detail and careful consideration of system resource allocation.\n- **Development Difficulty:** Developing applications for exokernels can be more difficult than for traditional kernels because applications must be written to directly access hardware resources.\n- **Limited Support:** Exokernels are still an emerging technology and may not have the same level of support and resources as traditional kernels.\n- **Debugging Difficulty:** Debugging applications and operating system services on exokernels can be more difficult than on traditional kernels because of the direct access to hardware resources.\n\n## **5\\. Nano Kernel**\n\nIt is the type of kernel that offers hardware abstraction but without system services. Micro Kernel also does not have system services therefore the Micro Kernel and Nano Kernel have become analogous.\n\n**Example :**\n\n```\nEROS etc.\n```\n\n### **Advantages**\n\n- **Small Size:** Nanokernels are designed to be extremely small, providing only the most essential functions needed to run the system. This can make them more efficient and faster than other kernel types.\n- **High Modularity:** Nanokernels are highly modular, allowing for the easy addition or removal of operating system services, making them more flexible and customizable than traditional monolithic kernels.\n- **Security:** Nanokernels provide better security than traditional kernels because they have a smaller attack surface and a reduced risk of errors or bugs in the code.\n- **Portability:** Nanokernels are designed to be highly portable, allowing them to run on a wide range of hardware architectures.\n\n### **Disadvantages**\n\n- **Limited Functionality:** Nanokernels provide only the most essential functions, making them unsuitable for more complex applications that require a broader range of services.\n- **Complexity:** Because nanokernels provide only essential functionality, they can be more complex to develop and maintain than other kernel types.\n- **Performance:** While nanokernels are designed for efficiency, their minimalist approach may not be able to provide the same level of performance as other kernel types in certain situations.\n- **Compatibility:** Because of their minimalist design, nanokernels may not be compatible with all hardware and software configurations, limiting their practical use in certain contexts.\n\n## Functions of Kernel\n\nThe kernel is responsible for various critical functions that ensure the smooth operation of the computer system. These functions include:\n\n### **1\\. Process Management**\n\n- Scheduling and execution of processes.\n- Context switching between processes.\n- Process creation and termination.\n\n### **2\\. Memory Management**\n\n- Allocation and deallocation of memory space.\n- Managing virtual memory.\n- Handling memory protection and sharing.\n\n### **3\\. Device Management**\n\n- Managing input/output devices.\n- Providing a unified interface for hardware devices.\n- Handling device driver communication.\n\n### **4\\. File System Management**\n\n- Managing file operations and storage.\n- Handling file system mounting and unmounting.\n- Providing a file system interface to applications.\n\n### **5\\. Resource Management**\n\n- Managing system resources (CPU time, disk space, network bandwidth)\n- Allocating and deallocating resources as needed\n- Monitoring resource usage and enforcing\u00a0resource\u00a0limits\n\n### **6\\. Security and Access Control**\n\n- Enforcing access control policies.\n- Managing user permissions and authentication.\n- Ensuring system security and integrity.\n\n### **7\\. Inter-Process Communication**\n\n- Facilitating communication between processes.\n- Providing mechanisms like message passing and shared memory.\n\n## Working of Kernel\n\n- A kernel loads first into memory when an operating system is loaded and remains in memory until the operating system is shut down again. It is responsible for various tasks such as [disk management](https://www.geeksforgeeks.org/disk-management-in-operating-system/) , task management, and [memory management](https://www.geeksforgeeks.org/memory-management-in-operating-system/) .\n- The kernel has a process table that keeps track of all active processes\n- The process table contains a per-process region table whose entry points to entries in the region table.\n- The kernel loads an executable file into memory during the \u2018exec\u2019 system call\u2019.\n- It decides which process should be allocated to the processor to execute and which process should be kept in the main memory to execute. It basically acts as an interface between user applications and hardware. The major aim of the kernel is to manage communication between software i.e. user-level applications and hardware i.e., CPU and disk memory.\n\n## **Objectives of Kernel**\n\n- To establish communication between user-level applications and hardware.\n- To decide the state of incoming processes.\n- To control disk management.\n- To control memory management.\n- To control task management.\n\n## Conclusion\n\nKernels are the heart of operating systems , managing how hardware and software communicate and ensuring everything runs smoothly. Different types of kernels\u2014like monolithic, microkernels, hybrid kernels, and others\u2014offer various ways to balance performance, flexibility, and ease of maintenance. Understanding these kernel types helps us appreciate how operating systems work and how they handle the complex tasks required to keep our computers and devices running efficiently. Each type of kernel has its own strengths and weaknesses, but all play a crucial role in the world of computing.\n\n## Frequently Asked Questions on Kernel \u2013 FAQs\n\n### **What are the main functions of a kernel?**\n\n> The main functions of a kernel include process management, memory management, device management, and system calls handling.\n\n### **What is a monolithic kernel?**\n\n> A monolithic kernel is a single large process running entirely in a single address space, containing all core services like process management, memory management, file systems, and device drivers.\n\n### **What is a microkernel?**\n\n> A microkernel is a minimalistic kernel that includes only essential functions such as inter-process communication and basic memory management, with other services running in user space.\n\n### **What is a hybrid kernel?**\n\n> A hybrid kernel combines aspects of both monolithic and microkernels, running some services in kernel space and others in user space, to balance performance and modularity.\n\n### What is Kernel Panics?\n\n> A **kernel panic** is a safety measure taken by an operating system\u2019s kernel when it encounters a critical error or fault from which it cannot safely recover. It indicates that the system has reached an unrecoverable state, often due to hardware malfunctions, corrupted drivers, or software bugs.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/how-linux-kernel-boots/?ref=next_article)\n\n[How Linux Kernel Boots?](https://www.geeksforgeeks.org/how-linux-kernel-boots/?ref=next_article)\n\n[P](https://www.geeksforgeeks.org/user/pp_pankaj/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[pp\\_pankaj](https://www.geeksforgeeks.org/user/pp_pankaj/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n148\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Linux/Unix Tutorial\\\\\n\\\\\n\\\\\nLinux is a widely-used open-source operating system, similar to Windows, Mac, and Android. It shares similarities with Unix, another operating system known for its commercial use. Unix and Linux have comparable components, including the kernel, shell, and programs. Many commands in Unix and Linux ex\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/linux-tutorial/?ref=lbp)\n\n## Getting Started with Linux\n\n- [What is Linux Operating System\\\\\n\\\\\n\\\\\nThe Linux Operating System is a type of operating system that is similar to Unix, and it is built upon the Linux Kernel. The Linux Kernel is like the brain of the operating system because it manages how the computer interacts with its hardware and resources. It makes sure everything works smoothly a\\\\\n\\\\\n13 min read](https://www.geeksforgeeks.org/introduction-to-linux-operating-system/?ref=lbp)\n\n* * *\n\n- [LINUX Full Form - Lovable Intellect Not Using XP\\\\\n\\\\\n\\\\\nLINUX stands for Lovable Intellect Not Using XP. Linux was developed by Linus Torvalds and named after him. Linux is an open-source and community-developed operating system for computers, servers, mainframes, mobile devices, and embedded devices. Linux receives requests from system programs and it r\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/linux-full-form/?ref=lbp)\n\n* * *\n\n- [Linux History\\\\\n\\\\\n\\\\\nA popular open-source operating system is Linux. It was initially created by Linus Torvalds in 1991. At the time, Torvalds was a computer science student at the University of Helsinki, Finland and began working on the Linux project as a personal endeavour. The name Linux is a combination of his firs\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/linux-history/?ref=lbp)\n\n* * *\n\n- [Difference between Linux and Windows\\\\\n\\\\\n\\\\\nLinux: Linux could be a free and open supply OS supported operating system standards. It provides programming interface still as programme compatible with operating system primarily based systems and provides giant selection applications. A UNIX operating system additionally contains several several\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/difference-between-linux-and-windows/?ref=lbp)\n\n* * *\n\n- [What are Linux Distributions ?\\\\\n\\\\\n\\\\\nA Linux distribution, often shortened to \u00e2\u20ac\u0153distro,\u00e2\u20ac\u009d is a packaged version of Linux that comes with the Linux kernel plus a collection of software and utilities that make the OS functional and user-friendly. Some distros are optimized for business environments, offering tools for productivity and ente\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/what-are-linux-distributions/?ref=lbp)\n\n* * *\n\n- [Difference between Unix and Linux\\\\\n\\\\\n\\\\\nLinux is an operating system that was developed by Linus Torvalds in 1991. The name \"Linux\" originates from the Linux kernel. It is an open-source software that is completely free to use. It is used for computer hardware and software, game development, mainframes, etc. It can run various client prog\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/linux-vs-unix/?ref=lbp)\n\n* * *\n\n- [Why Linux is Better?\\\\\n\\\\\n\\\\\nLook around and you will see Linux everywhere, yes it is right! Linux is present in Android phones. Android uses the Linux kernel under the hood. As Linux is an open-source operating system, Google's Android developers generally modify the Linux kernel to satisfy their requirements. Linux offers the\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/why-linux-is-better/?ref=lbp)\n\n* * *\n\n\n## Installation with Linux\n\n- [How to Install Arch Linux in VirtualBox?\\\\\n\\\\\n\\\\\nInstalling Arch Linux on a virtual machine is an excellent way to experience this powerful and flexible Linux distribution without affecting your main system. If you're looking to install Arch Linux in VirtualBox, this guide will take you through the process step-by-step. Arch Linux is known for its\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/how-to-install-arch-linux/?ref=lbp)\n\n* * *\n\n- [Fedora Linux Operating System\\\\\n\\\\\n\\\\\nFedora Linux is a free and open-source operating system based on the Linux kernel and was developed by the community-supported Fedora Project. It is known for its fast release cycle, which keeps the operating system up to date with the latest software and technologies. What is the Fedora Linux Opera\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/fedora-operating-system/?ref=lbp)\n\n* * *\n\n- [How to install Ubuntu on VirtualBox?\\\\\n\\\\\n\\\\\nInstalling Ubuntu on VirtualBox is a great way to experience the powerful features of this popular Linux distribution without altering your main operating system. Whether you\u00e2\u20ac\u2122re a developer, a student, or simply curious about Linux, setting up Ubuntu on VirtualBox allows you to test and explore in a\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/how-to-install-ubuntu-on-virtualbox/?ref=lbp)\n\n* * *\n\n- [How to Install Linux Mint?\\\\\n\\\\\n\\\\\nLinux Mint is the second-largest Linux-based distro used in the world. Linux Mint is a community-driven Linux distribution based on Ubuntu which itself is based on Debian and bundled with a variety of free and open-source applications. So here we discuss the installation of Linux mint. Installation\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/how-to-install-linux-mint/?ref=lbp)\n\n* * *\n\n- [How to Install Kali Linux on Windows?\\\\\n\\\\\n\\\\\nKali Linux is an open-source Linux distribution based on Debian, designed for sophisticated penetration testing and security auditing. Kali Linux includes hundreds of tools for diverse information security activities such as penetration testing, security research, computer forensics, and reverse eng\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/how-to-install-kali-linux-on-windows/?ref=lbp)\n\n* * *\n\n- [How to Install Linux on Windows PowerShell Subsystem?\\\\\n\\\\\n\\\\\nThere are several ways to Install a Linux subsystem on your Windows PC Powershell Environment. It is good for learners, but it is recommended using original Linux OS if you are a developer as the Subsystem lacks the pre-installed Linux tools. Before we begin installing a Linux subsystem, we need to\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/how-to-install-linux-on-windows-powershell-subsystem/?ref=lbp)\n\n* * *\n\n- [How to Find openSUSE Linux Version?\\\\\n\\\\\n\\\\\nopenSUSE is well known for its GNU/Linux-based operating systems, mainly Tumbleweed, a tested rolling release, and Leap, a distribution with Long-Term-Support(LTS). MicroOS and Kubic are new transactional, self-contained distributions for use as desktop or container runtime. Here we figure out which\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/how-to-find-opensuse-linux-version/?ref=lbp)\n\n* * *\n\n- [How to Install CentOS\\\\\n\\\\\n\\\\\nCentOS is a popular open-source Linux distribution aimed at servers and provides compatibility with Red Hat's RPM package manager. It is built with the goal of providing a stable operating system that provided great compatibility with the upstream RHEL (Red hat enterprise Linux) CentOS is therefore\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/how-to-install-centos/?ref=lbp)\n\n* * *\n\n\n## Linux Commands\n\n- [Linux Commands\\\\\n\\\\\n\\\\\nLinux commands are essential for controlling and managing the system through the terminal. This terminal is similar to the command prompt in Windows. It\u00e2\u20ac\u2122s important to note that Linux/Unix commands are case-sensitive. These commands are used for tasks like file handling, process management, user adm\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/linux-commands/?ref=lbp)\n\n* * *\n\n- [Essential Unix Commands\\\\\n\\\\\n\\\\\nUnix commands are a set of commands that are used to interact with the Unix operating system. Unix is a powerful, multi-user, multi-tasking operating system that was developed in the 1960s by Bell Labs. Unix commands are entered at the command prompt in a terminal window, and they allow users to per\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/essential-linuxunix-commands/?ref=lbp)\n\n* * *\n\n- [How to Find a File in Linux \\| Find Command\\\\\n\\\\\n\\\\\nLinux, renowned for its robust command-line interface, provides a suite of powerful tools for efficient file and directory management. Among these, the \"find\" command stands out as an indispensable asset, offering unparalleled versatility in searching for files based on diverse criteria. This articl\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/find-command-in-linux-with-examples/?ref=lbp)\n\n* * *\n\n\n## Linux File System\n\n- [Linux File System\\\\\n\\\\\n\\\\\nOperating systems, the software that powers your computer, rely on a crucial element known as the file system. Think of it as a virtual organizational tool that manages, stores, and retrieves your data efficiently. In the Linux world, a diverse range of file systems has emerged, each crafted to addr\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/linux-file-system/?ref=lbp)\n\n* * *\n\n- [Linux File Hierarchy Structure\\\\\n\\\\\n\\\\\nThe Linux File Hierarchy Structure or the Filesystem Hierarchy Standard (FHS) defines the directory structure and directory contents in Unix-like operating systems. It is maintained by the Linux Foundation.\u00c2\u00a0 In the FHS, all files and directories appear under the root directory /, even if they are st\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/linux-file-hierarchy-structure/?ref=lbp)\n\n* * *\n\n- [Linux Directory Structure\\\\\n\\\\\n\\\\\nPrerequisite: Linux File Hierarchy Structure In Linux/Unix operating system everything is a file even directories are files, files are files, and devices like mouse, keyboard, printer, etc are also files. Here we are going to see the Directory Structure in Linux. Types of files in the Linux system.\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/linux-directory-structure/?ref=lbp)\n\n* * *\n\n\n## Linux Kernel\n\n- [Linux Kernel\\\\\n\\\\\n\\\\\nLinux Kernel is the heart of Linux operating systems. It is an open-source (source code that can be used by anyone freely) software that is most popular and widely used in the industry as well as on a personal use basis. Who created Linux and why? Linux was created by Linus Torvalds in 1991 as a hob\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/the-linux-kernel/?ref=lbp)\n\n* * *\n\n- [Kernel in Operating System\\\\\n\\\\\n\\\\\nA kernel is the core part of an operating system. It acts as a bridge between software applications and the hardware of a computer. The kernel manages system resources, such as the CPU, memory, and devices, ensuring everything works together smoothly and efficiently. It handles tasks like running pr\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/kernel-in-operating-system/?ref=lbp)\n\n* * *\n\n- [How Linux Kernel Boots?\\\\\n\\\\\n\\\\\nMany processes are running in the background when we press the system's power button. It is very important to learn the booting process to understand the working of any operating system. Knowing how the kernel boots is a must to solve the booting error. It is a very interesting topic to learn, let u\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/how-linux-kernel-boots/?ref=lbp)\n\n* * *\n\n- [Difference between Operating System and Kernel\\\\\n\\\\\n\\\\\nIn the world of computing, two terms that are frequently mentioned are Operating System (OS) and Kernel. In this article, we will explore the key differences between the OS and the Kernel, their functions, and how they work together to manage hardware and software. What is an Operating System?An Ope\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-operating-system-and-kernel/?ref=lbp)\n\n* * *\n\n- [Linux Kernel Module Programming: Hello World Program\\\\\n\\\\\n\\\\\nKernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. Custom codes can be added to Linux kernels via two methods. The basic way is to add the code to the kernel source tree and\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/linux-kernel-module-programming-hello-world-program/?ref=lbp)\n\n* * *\n\n- [Linux Loadable Kernel Module\\\\\n\\\\\n\\\\\nIf you want to add code to a Linux kit, the basic way to do that is to add source files to the kernel source tree and assemble the kernel. In fact, the process of setting up the kernel consists mainly of selecting which files to upload to the kernel will be merged. But you can also add code to the L\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/linux-loadable-kernel-module/?ref=lbp)\n\n* * *\n\n- [Loadable Kernel Module - Linux Device Driver Development\\\\\n\\\\\n\\\\\nFor Linux device drivers, we can use only two languages: Assembler and C. Assembler implements the main parts of the Linux kernel, while C implements the architecture-dependent parts. Uploaded kernel modules are often referred to as kernel modules or modules, but those are misleading names because t\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/loadable-kernel-module-linux-device-driver-development/?ref=lbp)\n\n* * *\n\n\n## Linux Networking Tools\n\n- [Linux Networking Tools\\\\\n\\\\\n\\\\\nOne can use a variety of network tools to perform tasks such as obtaining information about other systems on your network, accessing other systems, and communicating directly with other users. Network information can be obtained using utilities such as ping, finger, traceroute, host, dig, nslookup e\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/linux-networking-tools/?ref=lbp)\n\n* * *\n\n- [Network configuration and troubleshooting commands in Linux\\\\\n\\\\\n\\\\\nComputers are often connected to each other on a network. They send requests to each other in the form of packets that travel from the host to the destination. Linux provides various commands from network configuration and troubleshooting.\u00c2\u00a0 Network Configuration and Troubleshooting Commands in Linux\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/network-configuration-trouble-shooting-commands-linux/?ref=lbp)\n\n* * *\n\n- [How to configure network interfaces in CentOS?\\\\\n\\\\\n\\\\\nA network interface is a link between a computer and another network(Private or Public). The network interface is basically a card which is known as NIC or Network Interface Card, this does not necessarily have to be in a physical form instead, it can be inbuilt into the software. If we take the exa\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/how-to-configure-network-interfaces-in-centos/?ref=lbp)\n\n* * *\n\n- [Command-Line Tools and Utilities For Network Management in Linux\\\\\n\\\\\n\\\\\nIf you are thinking of becoming a system administrator, or you are already a system admin, then this article is for you. As a system admin, your daily routine will include configuring, maintaining, troubleshooting, monitoring, securing networks, and managing servers within data centers. Network conf\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/command-line-tools-and-utilities-for-network-management-in-linux/?ref=lbp)\n\n* * *\n\n- [Linux - Network Monitoring Tools\\\\\n\\\\\n\\\\\nNetwork monitoring is using a system (hardware or software) that continuously observes your network and the data flows through it, depending on how the monitoring solution actually functions and informs the network administrator. We can keep a check on all the activities of our network easily. While\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/linux-network-monitoring-tools/?ref=lbp)\n\n* * *\n\n\n## Linux Process\n\n- [Processes in Linux/Unix\\\\\n\\\\\n\\\\\nA program/command when executed, a special instance is provided by the system to the process. This instance consists of all the services/resources that may be utilized by the process under execution. Whenever a command is issued in Unix/Linux, it creates/starts a new process. For example, pwd when i\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/processes-in-linuxunix/?ref=lbp)\n\n* * *\n\n- [Process Management in Linux\\\\\n\\\\\n\\\\\nA process means program in execution. It generally takes an input, processes it and gives us the appropriate output. Check Introduction to Process Management for more details about a process. There are basically 2 types of processes. Foreground processes: Such kind of processes are also known as int\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/process-management-in-linux/?ref=lbp)\n\n* * *\n\n- [Getting System and Process Information Using C Programming and Shell in Linux\\\\\n\\\\\n\\\\\nWhenever you start a new process in Linux it creates a file in /proc/ folder with the same name as that of the process id of the process. In that folder, there is a file named \"status\" which has all the details of the process. We can get those Process Information Through shell as follows: cat /proc/\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/getting-system-and-process-information-using-c-programming-and-shell-in-linux/?ref=lbp)\n\n* * *\n\n- [Process states and Transitions in a UNIX Process\\\\\n\\\\\n\\\\\nProcess is an instance of a program in execution. A set of processes combined together make a complete program. There are two categories of processes in Unix, namely User processes : They are operated in user mode. Kernel processes : They are operated in kernel mode. Process States The lifetime of a\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/process-states-and-transitions-in-a-unix-process/?ref=lbp)\n\n* * *\n\n\n## Linux Firewall\n\n- [LINUX Firewall\\\\\n\\\\\n\\\\\nLinux OS, we must know that it is a system based on Unix-like. Systems that are called Unix-like or Unix-based are designed to behave and function similarly to the Unix OS. Linux OS comes under the open-source family (code designed to be publicly accessible) and is based on the Linux kernel. It was\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/linux-firewall/?ref=lbp)\n\n* * *\n\n- [iptables command in Linux with Examples\\\\\n\\\\\n\\\\\nThe iptables command in Linux is a powerful tool that is used for managing the firewall rules and network traffic. It facilitates allowing the administrators to configure rules that help how packets are filtered, translated, or forwarded. On using this iptables, you can set up security policies to c\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/iptables-command-in-linux-with-examples/?ref=lbp)\n\n* * *\n\n- [How to Configure your Linux Firewall - 3 Methods\\\\\n\\\\\n\\\\\nA Linux firewall is essential for protecting your system from unauthorized access and attacks. By configuring firewall rules, you can control the flow of traffic into and out of your system. Linux offers multiple firewall management tools, including iptables and firewalld, both of which can be used\\\\\n\\\\\n13 min read](https://www.geeksforgeeks.org/how-to-setup-firewall-in-linux/?ref=lbp)\n\n* * *\n\n\n## Shell Scripting & Bash Scripting\n\n- [Introduction to Linux Shell and Shell Scripting\\\\\n\\\\\n\\\\\nIf we are using any major operating system, we are indirectly interacting with the shell. While running Ubuntu, Linux Mint, or any other Linux distribution, we are interacting with the shell by using the terminal. In this article we will discuss Linux shells and shell scripting so before understandi\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/introduction-linux-shell-shell-scripting/?ref=lbp)\n\n* * *\n\n- [What is Terminal, Console, Shell and Kernel?\\\\\n\\\\\n\\\\\nUnderstanding the terms terminal, console, shell, and kernel is crucial for anyone working with computers or learning about operating systems. These concepts are key components of how we interact with our devices and software. The terminal is a text-based interface used to interact with the computer\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/what-is-terminal-console-shell-and-kernel/?ref=lbp)\n\n* * *\n\n- [How to Create a Shell Script in linux\\\\\n\\\\\n\\\\\nShell is an interface of the operating system. It accepts commands from users and interprets them to the operating system. If you want to run a bunch of commands together, you can do so by creating a shell script. Shell scripts are very useful if you need to do a task routinely, like taking a backup\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/how-to-create-a-shell-script-in-linux/?ref=lbp)\n\n* * *\n\n- [Shell Scripting - Different types of Variables\\\\\n\\\\\n\\\\\nThe shell is a command-line interpreter for Linux and Unix systems. It provides an interface between the user and the kernel and executes commands. A sequence of commands can be written in a file for execution in the shell. It is called shell scripting. It helps to automate tasks in Linux. Scripting\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/shell-scripting-different-types-of-variables/?ref=lbp)\n\n* * *\n\n- [Bash Scripting - Introduction to Bash and Bash Scripting\\\\\n\\\\\n\\\\\nBash is a command-line interpreter or Unix Shell and it is widely used in GNU/Linux Operating System. \u00c2\u00a0It is written by Brian Jhan Fox. It is used as a default login shell for most Linux distributions. Scripting is used to automate the execution of the tasks so that humans do not need to perform the\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/bash-scripting-introduction-to-bash-and-bash-scripting/?ref=lbp)\n\n* * *\n\n- [Bash Script - Define Bash Variables and its types\\\\\n\\\\\n\\\\\nVariables are an important aspect of any programming language. Without variables, you will not be able to store any required data. With the help of variables, data is stored at a particular memory address and then it can be accessed as well as modified when required. In other words, variables let yo\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/bash-script-define-bash-variables-and-its-types/?ref=lbp)\n\n* * *\n\n- [Shell Scripting - Shell Variables\\\\\n\\\\\n\\\\\nA shell variable is a character string in a shell that stores some value. It could be an integer, filename, string, or some shell command itself. Basically, it is a pointer to the actual data stored in memory. We have a few rules that have to be followed while writing variables in the script (which\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/shell-scripting-shell-variables/?ref=lbp)\n\n* * *\n\n- [Bash Script - Difference between Bash Script and Shell Script\\\\\n\\\\\n\\\\\nIn computer programming, a script is defined as a sequence of instructions that is executed by another program. A shell is a command-line interpreter of Linux which provides an interface between the user and the kernel system and executes a sequence of instructions called commands. A shell is capabl\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/bash-script-difference-between-bash-script-and-shell-script/?ref=lbp)\n\n* * *\n\n- [Shell Scripting - Difference between Korn Shell and Bash shell\\\\\n\\\\\n\\\\\nKorn Shell: Korn Shell or KSH was developed by a person named David Korn, which attempts to integrate the features of other shells like C shell, Bourne Shell, etc. Korn Shell allows developers to generate and create new shell commands whenever it is required. Korn shell was developed a long year bac\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/shell-scripting-difference-between-korn-shell-and-bash-shell/?ref=lbp)\n\n* * *\n\n- [Shell Scripting - Interactive and Non-Interactive Shell\\\\\n\\\\\n\\\\\nA shell gives us an interface to the Unix system. While using an operating system, we indirectly interact with the shell. On Linux distribution systems, each time we use a terminal, we interact with the shell. The job of the shell is to interpret or analyze the Unix commands given by users. A shell\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/shell-scripting-interactive-and-non-interactive-shell/?ref=lbp)\n\n* * *\n\n- [Shell Script to Show the Difference Between echo \u00e2\u20ac\u0153$SHELL\u00e2\u20ac\u009d and echo \u00e2\u20ac\u02dc$SHELL\u00e2\u20ac\u2122\\\\\n\\\\\n\\\\\nIn shell scripting and Linux, the echo command is used to display text on the terminal or console. When used with the $SHELL variable, which contains the path of the current user's shell program, the output of the echo command can be different depending on whether the variable is enclosed in single\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/shell-script-to-show-the-difference-between-echo-shell-and-echo-shell/?ref=lbp)\n\n* * *\n\n\nLike148\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/kernel-in-operating-system/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1830340579.1740481355&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102685792&z=680177845)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=3rtzo89e75lh)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=qac4v95l156j)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Kernel in Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20250124124411692602/kernel.webp",
        "keywords": "kernel, operating system, monolithic kernel, microkernel architecture, hybrid kernel, exokernel, nanokernel, process management, memory management, device management, file system management, resource management, security and access control, inter-process communication, kernel functions",
        "ogUrl": "https://www.geeksforgeeks.org/kernel-in-operating-system/",
        "ogDescription": "Kernels are essential components of operating systems that manage communication between hardware and software, with various types like monolithic, microkernel, hybrid, exokernel, and nanokernel each offering distinct advantages and disadvantages in terms of performance, stability, and modularity.",
        "description": "Kernels are essential components of operating systems that manage communication between hardware and software, with various types like monolithic, microkernel, hybrid, exokernel, and nanokernel each offering distinct advantages and disadvantages in terms of performance, stability, and modularity.",
        "scrapeId": "df26ae0c-4ed5-414d-b99d-c7494969ebeb",
        "sourceURL": "https://www.geeksforgeeks.org/kernel-in-operating-system/",
        "url": "https://www.geeksforgeeks.org/kernel-in-operating-system/",
        "topic": "operating systems"
      }
    },
    "id": 6
  },
  {
    "url": "https://www.geeksforgeeks.org/introduction-of-system-call/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/introduction-of-system-call/?type%3Darticle%26id%3D170376&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nSystem Programs in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=next_article_top)\n\n# Introduction of System Call\n\nLast Updated : 24 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n264 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**A system call** is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to **interact with the operating system**. A computer program makes a system call when it requests the operating system\u2019s kernel. System call **provides** the services of the operating system to the user programs via the Application Program Interface(API). System calls are the only entry points into the kernel system and are executed in kernel mode.\n\n![introduction_to_system_call](https://media.geeksforgeeks.org/wp-content/uploads/20250124123632394421/introduction_to_system_call.webp)\n\n- A user program can interact with the operating system using a system call. A number of services are requested by the program, and the OS responds by launching a number of systems calls to fulfill the request.\n\n- A system call can be written in high-level languages like C or Pascal or in assembly language. If a high-level language is used, the operating system may directly invoke system calls, which are predefined functions.\n\n- A system call is initiated by the program executing a specific instruction, which triggers a switch to kernel mode, allowing the program to request a service from the OS. The OS then handles the request, performs the necessary operations, and returns the result back to the program.\n\n- System calls are essential for the proper functioning of an operating system, as they provide a standardized way for programs to access system resources. Without system calls, each program would need to implement its methods for accessing hardware and system services, leading to inconsistent and error-prone behavior.\n\n## **Services Provided by System Calls**\n\n- Process Creation and Management\n- Main Memory Management\n- File Access, Directory, and [File System Management](https://www.geeksforgeeks.org/file-systems-in-operating-system/)\n- Device Handling(I/O)\n- Protection\n- Networking, etc.\n  - **Process Control:** end, abort, create, terminate, allocate, and free memory.\n  - **File Management:** create, open, close, delete, read files, etc.\n  - [**Device Management**](https://www.geeksforgeeks.org/device-management-in-operating-system/)\n  - **Information Maintenance**\n  - **Communication**\n\n## Features of System Calls\n\n- **Interface:** System calls provide a well-defined interface between user programs and the operating system. Programs make requests by calling specific functions, and the operating system responds by executing the requested service and returning a result.\n- **Protection:** System calls are used to access privileged operations that are not available to normal user programs. The operating system uses this privilege to protect the system from malicious or unauthorized access.\n- **Kernel Mode:** When a system call is made, the program is temporarily switched from user mode to [kernel](https://www.geeksforgeeks.org/kernel-in-operating-system/) mode. In kernel mode, the program has access to all system resources, including hardware, memory, and other processes.\n- **Context Switching:** A system call requires a [context switch](https://www.geeksforgeeks.org/context-switch-in-operating-system/), which involves saving the state of the current process and switching to the kernel mode to execute the requested service. This can introduce overhead, which can impact system performance.\n- **Error Handling:** System calls can return error codes to indicate problems with the requested service. Programs must check for these errors and handle them appropriately.\n- **Synchronization:** System calls can be used to synchronize access to shared resources, such as files or network connections. The operating system provides synchronization mechanisms, such as locks or [semaphores](https://www.geeksforgeeks.org/semaphores-and-its-types/), to ensure that multiple programs can access these resources safely.\n\n## How does System Call Work?\n\nHere is a detailed explanation step by step how system calls work:\n\n- **Users need special resources:** Sometimes programs need to do some special things that can\u2019t be done without the permission of the OS like reading from a file, writing to a file, getting any information from the hardware, or requesting a space in memory.\n- **The program makes a system call request:** There are special predefined instructions to make a request to the operating system. These instructions are nothing but just a \u201csystem call\u201d. The program uses these system calls in its code when needed.\n- **Operating system sees the system call:** When the OS sees the system call then it recognizes that the program needs help at this time so it temporarily stops the program execution and gives all the control to a special part of itself called \u2018Kernel\u2019. Now \u2018Kernel\u2019 solves the need of the program.\n- **The operating system performs the operations:** Now the operating system performs the operation that is requested by the program. Example: reading content from a file etc.\n- **Operating system give control back to the program :** After performing the special operation, OS give control back to the program for further execution of program.\n\n## Types of System Calls\n\nServices provided by an OS are typically related to any kind of operation that a user program can perform like creation, termination, forking, moving, communication, etc. Similar types of operations are grouped into one single system call category. System calls are classified into the following categories:\n\n![Lightbox](https://media.geeksforgeeks.org/wp-content/uploads/20231017212555/Types-of-System-Calls-(3)-(2).png)\n\nread more about \u2013 [Different Types of System Calls in OS](https://www.geeksforgeeks.org/different-types-of-system-calls-in-os/)\n\n## **Examples of a System Call in Windows and Unix**\n\nSystem calls for Windows and Unix come in many different forms. These are listed in the table below as follows:\n\n| Process | Windows | Unix |\n| --- | --- | --- |\n| Process Control | CreateProcess()<br>ExitProcess()<br>WaitForSingleObject() | Fork()<br>Exit()<br>Wait() |\n| File manipulation | CreateFile()<br>ReadFile()<br>WriteFile() | Open()<br>Read()<br>Write()<br>Close() |\n| Device Management | SetConsoleMode()<br>ReadConsole()<br>WriteConsole() | Ioctl()<br>Read()<br>Write() |\n| Information Maintenance | GetCurrentProcessID()<br>SetTimer()<br>Sleep() | Getpid()<br>Alarm()<br>Sleep() |\n| Communication | CreatePipe()<br>CreateFileMapping()<br>MapViewOfFile() | Pipe()<br>Shmget()<br>Mmap() |\n| Protection | SetFileSecurity()<br>InitializeSecurityDescriptor()<br>SetSecurityDescriptorgroup() | Chmod()\u00a0<br>Umask()<br>Chown() |\n\n**Open():** Accessing a file on a file system is possible with the open() system call. It gives the file resources it needs and a handle the process can use. A file can be opened by multiple processes simultaneously or just one process. Everything is based on the structure and file system.\n\n**Read():** Data from a file on the file system is retrieved using it. In general, it accepts three arguments:\n\n- A description of a file.\n- A buffer for read data storage.\n- How many bytes should be read from the file\n\nBefore reading, the file to be read could be identified by its file descriptor and opened using the open() function.\n\n**Wait():** In some systems, a process might need to hold off until another process has finished running before continuing. When a parent process creates a child process, the execution of the parent process is halted until the child process is complete. The parent process is stopped using the wait() system call. The parent process regains control once the child process has finished running.\n\n**Write():** Data from a user buffer is written using it to a device like a file. A program can produce data in one way by using this system call. generally, there are three arguments:\n\n- A description of a file.\n- A reference to the buffer where data is stored.\n- The amount of data that will be written from the buffer in bytes.\n\n**Fork():** The [fork()](https://www.geeksforgeeks.org/fork-system-call/) system call is used by processes to create copies of themselves. It is one of the methods used the most frequently in operating systems to create processes. When a parent process creates a child process, the parent process\u2019s execution is suspended until the child process is finished. The parent process regains control once the child process has finished running.\n\n**Exit():** A system call called exit() is used to terminate a program. In environments with multiple threads, this call indicates that the thread execution is finished. After using the exit() system function, the operating system recovers the resources used by the process.\n\n## Methods to Pass Parameters to OS\n\nIf a system call occur, we have to pass parameter to the Kernal part of the Operating system.\n\nFor example look at the given **open()** system call:\n\nC`\n//function call example\n#include <fcntl.h>\nint open(const char *pathname, int flags, mode_t mode);\n`\n\nHere **pathname**, **flags** and **mode\\_t** are the parameters.\n\nSo it is to be noted that :\n\n- We can\u2019t pass the parameters directly like in an ordinary function call.\n- In Kernal mode there is a different way to perform a function call.\n\nSo we can\u2019t run it in the normal address space that the process had already created and hence we cant place the parameters in the top of the stack because it is not available to the Kernal of the operating system for processing. so we have to adopt any other methods to pass the parameters to the Kernal of the OS.\n\n**We can done it through,**\n\n- **Passing parameters in registers**\n- **Address of the block is passed as a parameter in a register.**\n- **Parameters are pushed into a stack.**\n\nLet us discuss about each points in detail:\n\n### 1\\. Passing Parameters in Registers\n\n- It is the simplest method among the three\n- Here we directly pass the parameters to registers.\n- But it will it is limited when, number of parameters are greater than the number of registers.\n- Here is the C program code:\n\nC`\n// Passing parameters in registers.\n#include <fcntl.h>\n#include <stdio.h>\nint main()\n{\n    const char* pathname = \"example.txt\";\n    int flags = O_RDONLY;\n    mode_t mode = 0644;\n    int fd = open(pathname, flags, mode);\n// in function call open(), we passed the parameters pathanme,flags,mode to the kernal directly\n    if (fd == -1) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n    // File operations here...\n    close(fd);\n    return 0;\n}\n`\n\n### 2\\. Address of The Block is Passed as Parameters\n\n- It can be applied when the number of parameters are greater than the number of registers.\n- Parameters are stored in blocks or table.\n- The address of the block is passed to a register as a parameter.\n- Most commonly used in Linux and Solaris.\n- Here is the C program code:\n\nC`\n//Address of the block is passed as parameters\n#include <stdio.h>\n#include <fcntl.h>\nint main() {\n    const char *pathname = \"example.txt\";\n    int flags = O_RDONLY;\n    mode_t mode = 0644;\n    int params[3];\n          // Block of data(parameters) in array\n    params[0] = (int)pathname;\n    params[1] = flags;\n    params[2] = mode;\n    int fd = syscall(SYS_open, params);\n          // system call\n    if (fd == -1) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n    // File operations here...\n    close(fd);\n    return 0;\n}\n`\n\n### 3\\. Parameters Are Pushed in a Stack\n\n- In this method parameters can be pushed in using the program and popped out using the operating system\n- So the Kernal can easily access the data by retrieving information from the top of the stack.\n- Here is the C program code\n\nC`\n//parameters are pushed into the stack\n#include <stdio.h>\n#include <fcntl.h>\n#include <unistd.h>\nint main() {\n    const char *pathname = \"example.txt\";\n    int flags = O_RDONLY;\n    mode_t mode = 0644;\n    int fd;\n    asm volatile(\n        \"mov %1, %%rdi\n\"\n        \"mov %2, %%rsi\n\"\n        \"mov %3, %%rdx\n\"\n        \"mov $2, %%rax\n\"\n        \"syscall\"\n        : \"=a\" (fd)\n        : \"r\" (pathname), \"r\" (flags), \"r\" (mode)\n        : \"%rdi\", \"%rsi\", \"%rdx\"\n    );\n    if (fd == -1) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n    // File operations here...\n    close(fd);\n    return 0;\n}\n`\n\n## Advantages of System Calls\n\n- **Access to Hardware Resources:** System calls allow programs to access hardware resources such as [disk drives](https://www.geeksforgeeks.org/hard-disk-drive-hdd-secondary-memory/), [printers](https://www.geeksforgeeks.org/what-is-a-printer/), and network devices.\n- **Memory Management:** System calls provide a way for programs to allocate and deallocate memory, as well as access memory-mapped hardware devices.\n- **Process Management:** System calls allow programs to create and terminate processes, as well as manage inter-process communication.\n- **Security:** System calls provide a way for programs to access privileged resources, such as the ability to modify system settings or perform operations that require administrative permissions.\n- **Standardization:** System calls provide a standardized interface for programs to interact with the operating system, ensuring consistency and compatibility across different hardware platforms and operating system versions.\n\n## Disadvantages of System Call\n\n- **Performance Overhead**: System calls involve switching between user mode and kernel mode, which can slow down program execution.\n- **Security Risks**: Improper use or vulnerabilities in system calls can lead to security breaches or unauthorized access to system resources.\n- **Error Handling Complexity**: Handling errors in system calls, such as resource allocation failures or timeouts, can be complex and require careful [programming](https://www.geeksforgeeks.org/introduction-to-programming-languages/).\n- **Compatibility Challenges**: System calls may vary between different [operating systems](https://www.geeksforgeeks.org/what-is-an-operating-system/), requiring developers to write code that works across multiple platforms.\n- **Resource Consumption**: System calls can consume significant system resources, especially in environments with many concurrent processes making frequent calls.\n\n## Conclusion\n\nIn conclusion, system calls are a important part of how [computer programs](https://www.geeksforgeeks.org/what-is-a-computer-program/) interact with the operating system. They provide a way for applications to request services from the OS, such as accessing files, managing memory, or communicating over networks. System calls act as a bridge between user-level programs and the low-level operations handled by the operating system [kernel](https://www.geeksforgeeks.org/kernel-in-operating-system/). Understanding system calls is essential for developers to create efficient and functional software that can leverage the full capabilities of the underlying operating system.\n\n## Frequently Asked Questions on System Call in Operating Systems \u2013 FAQs\n\n### How does a system call work?\n\n> When a program executes a system call, it transitions from user mode to kernel mode, which is a higher privileged mode. The transition is typically initiated by invoking a specific function or interrupting instruction provided by the programming language or the operating system.\n>\n> Once in kernel mode, the system call is handled by the operating system. The kernel performs the requested operation on behalf of the program and returns the result. Afterward, control is returned to the user-level program, which continues its execution.\n\n### **Why do programs need to use system calls?**\n\n> Programs use system calls to interact with the underlying operating system and perform essential tasks that require privileged access or system-level resources.\n\n### **What are some examples of system calls?**\n\n> Examples include opening and closing files, reading and writing data, creating processes, allocating memory, and performing network operations like sending and receiving data.\n\n### Why are system calls necessary?\n\n> System calls are necessary as they enable applications to request essential services from the operating system, such as file access, memory management, and hardware control, ensuring secure and efficient interaction with computer resources.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=next_article)\n\n[System Programs in Operating System](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=next_article)\n\n[S](https://www.geeksforgeeks.org/user/Samit%20Mandal/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Samit Mandal](https://www.geeksforgeeks.org/user/Samit%20Mandal/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n264\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike264\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/introduction-of-system-call/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1328242160.1740481366&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=593919928)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=lfvkrt68fh5c)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=a9cdksg6qm79)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Introduction of System Call - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20250124123632394421/introduction_to_system_call.webp",
        "keywords": "system call, operating system, kernel mode, Application Program Interface, process management, memory management, file system management, device handling, context switching, error handling, synchronization mechanisms, privileged operations, accessing hardware resources, standardized interface, security risks",
        "ogUrl": "https://www.geeksforgeeks.org/introduction-of-system-call/",
        "ogDescription": "System calls are essential interfaces that allow computer programs to request services from the operating system's kernel, enabling interaction with system resources like files, memory, and hardware.",
        "description": "System calls are essential interfaces that allow computer programs to request services from the operating system's kernel, enabling interaction with system resources like files, memory, and hardware.",
        "scrapeId": "758ace28-8f6f-4722-88df-fd6e0dcca8e0",
        "sourceURL": "https://www.geeksforgeeks.org/introduction-of-system-call/",
        "url": "https://www.geeksforgeeks.org/introduction-of-system-call/",
        "topic": "operating systems"
      }
    },
    "id": 7
  },
  {
    "url": "https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/?type%3Darticle%26id%3D270153&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nSpecial Machine Instructions in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/special-machine-instructions-in-operating-system/?ref=next_article_top)\n\n# Privileged and Non-Privileged Instructions in Operating System\n\nLast Updated : 08 Aug, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n73 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nIn an operating system, instructions executed by the CPU can be classified into privileged and non-privileged instructions. These classifications help the operating system ensure security, stability, and efficient resource management. In this article, we will discuss Privileged and Non-Privileged Instructions in Operating Systems.\n\n## **What are Privileged Instructions?**\n\nPrivileged instructions are those that can only be executed by the [operating system](https://www.geeksforgeeks.org/what-is-an-operating-system/) kernel or a privileged process, such as a device driver. These instructions typically perform operations that require direct access to hardware or other privileged resources, such as setting up memory mappings or accessing I/O devices. The Instructions that can run only in [Kernel Mode](https://www.geeksforgeeks.org/difference-between-user-mode-and-kernel-mode/) are called Privileged Instructions. Privileged Instructions possess the following characteristics:\n\n- If any attempt is made to execute a Privileged Instruction in User Mode, then it will not be executed and treated as an illegal instruction. The Hardware traps it in the Operating System.\n- Before transferring the control to any User Program, it is the responsibility of the Operating System to ensure that the **Timer** is set to interrupt. Thus, if the timer interrupts then the Operating System regains control.\n- Thus, any instruction which can modify the contents of the Timer is Privileged Instruction.\n- Privileged Instructions are used by the Operating System to achieve correct operation.\n- Various examples of Privileged Instructions include:\n  - I/O instructions and Halt instructions\n  - Turn off all Interrupts\n  - Set the Timer\n  - [Context Switching](https://www.geeksforgeeks.org/context-switch-in-operating-system/)\n  - Clear the Memory or Remove a process from the Memory\n  - Modify entries in the Device-status table\n\n## **Role of OS in managing Privileged Instructions**\n\n- **Access control:** The operating system employs access control mechanisms to limit access to privileged instructions. These mechanisms are restricted to authorized processes or users with elevated privileges. This guarantees that privileged instructions can only be executed by trusted processes and thwarts unauthorized access of malicious programs to system resources.\n- **Memory protection:** By deploying [memory](https://www.geeksforgeeks.org/computer-memory/) protection techniques, the operating system restricts processes from accessing any memory location that belongs to it or other processes. This aids in preventing tampering with the operating system or other processes by ensuring that processes cannot do so. Furthermore, it hinders malevolent programs from resulting in system crashes or risking the system\u2019s safety.\n- **Interrupt handling:** The execution of privileged instructions like system calls or exceptions is handled by the operating system through interrupt handling to ensure safety and accuracy, so when an interrupt occurs during the execution of a process it\u2019s necessary to save its state before transferring control to a suitable handler and then restoring it on completion.\n- **Virtualization:** Using virtualization techniques allows the operating system to create a simulated environment where processes can execute privileged instructions without having direct access to the underlying hardware thus creating a more secure and isolated execution environment for privileged instructions by limiting process access to authorized hardware resources only.\n\n![](https://media.geeksforgeeks.org/wp-content/uploads/Untitled-drawing-9-1.jpg)\n\n## **What are Non-Privileged Instructions?**\n\nNon-privileged instructions are those that can be executed by any process, including [user-level processes](https://www.geeksforgeeks.org/difference-between-user-level-thread-and-kernel-level-thread/). These instructions are typically used for performing computations, accessing user-level resources such as files and memory, and managing process control. Non-privileged instructions are executed in user mode, which provides limited access to system resources and ensures that processes cannot interfere with one another. The Instructions that can run only in User Mode are called Non-Privileged Instructions .\n\nVarious examples of Non-Privileged Instructions include:\n\n- Reading the status of Processor\n- Reading the System Time\n- Generate any Trap Instruction\n- Sending the final printout of Printer\n\nAlso, it is important to note that in order to change the mode from Privileged to Non-Privileged, we require a Non-privileged Instruction that does not generate any [interrupt.](https://www.geeksforgeeks.org/interrupts/)\n\n## Differences Between Privileged and Non-Privileged Instructions\n\n| Criteria | Privileged Instructions | Non-Privileged Instructions |\n| --- | --- | --- |\n| **Access to Resources** | Direct access to system resources | Limited access to system resources |\n| **Execution Mode** | Executed in kernel mode | Executed in user mode |\n| **Execution Permissions** | Require special permissions to execute | Do not require special permissions to execute |\n| **Purpose** | Used for performing low-level system operations | Used for general-purpose computing |\n| **Risks** | Higher risk of causing system crashes or security vulnerabilities | Less risky in terms of system crashes or security vulnerabilities |\n\n## Advantages of Privileged and Non-Privileged Instructions\n\n- **Security:** This ensures that unauthorized persons do not access resources of their system. The operating system or other trusted processes can only execute privileged instructions while user programs can run non-privileged instructions.\n- **Performance:** This reduces overhead and latency by allowing them to access hardware resources directly.\n- **Stability:** Non-privileged instructions are limited in accessing system resources while privileged instructions can only be executed by trusted processes. The distinction between user programs and critical system functions keeps any harm caused by the user program at bay.\n- **Flexibility:** Operating systems support a variety of applications and hardware devices because they have both types of instructions. Developers find it easy to create new applications and hardware through an interface defined within the operating system for compatibility purposes.\n- **Debugging:** With a clear demarcation between trusted and untrusted processes, this makes it easier to debug the operating system itself plus the applications running on top of it. To resolve issues, developers must identify them first which is made possible through this separation.\n\n## Disadvantages of Privileged and Non-Privileged Instructions\n\n- **Overhead:** Instructions that are either privileged or non-privileged can have an impact on overhead as well as performance degradation. Changes between the two modes, privileged and non-privileged ones, may take long time causing the system performance to drop.\n- **Complexity:** Operating systems using such instructions with distinct access levels (privileged or non-privileged) become extremely complex and challenging to develop and maintain. The necessity of both types of instructions makes it even harder to design system features and ensure system stability.\n- **Compatibility:** Privileged and non-privileged instructions may bring compatibility problems among different hardware platforms or operating systems. Diverse implementations of privileged instructions make it hard for creation of applications working on various platforms.\n- **Vulnerabilities:** These resources are targeted by attackers who exploit security flaws in the operating system.\n\n## Conclusion\n\nPrivileged instructions are used by the operating system kernel and privileged processes to perform low-level system operations, while non-privileged instructions are used by user-level processes for general-purpose computing. The distinction between privileged and non-privileged instructions is an important mechanism for ensuring the security and stability of an operating system.\n\n## Frequently Asked Questions on Privileged and Non-Privileged Instructions \u2013 FAQs\n\n### What do privileged instructions run under?\n\n> Privileged instructions only run in kernel mode.\n\n### Is reading the clock a privileged instruction?\n\n> Non-privileged because it\u2019s how applications invoke system calls.\n\n### Is HLT a Non-privileged instruction?\n\n> No. HLT(Halt) is a Privileged instruction.\n\n### What is the mode bit of a privileged set of instructions?\n\n> The\u00a0**K (kernel-mode)**\u00a0bit indicates whether the processor is in privileged mode or user mode\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/special-machine-instructions-in-operating-system/?ref=next_article)\n\n[Special Machine Instructions in Operating System](https://www.geeksforgeeks.org/special-machine-instructions-in-operating-system/?ref=next_article)\n\n[R](https://www.geeksforgeeks.org/user/RishabhJain12/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[RishabhJain12](https://www.geeksforgeeks.org/user/RishabhJain12/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n73\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Privileged and Non-Privileged Instructions in Operating System\\\\\n\\\\\n\\\\\nIn an operating system, instructions executed by the CPU can be classified into privileged and non-privileged instructions. These classifications help the operating system ensure security, stability, and efficient resource management. In this article, we will discuss Privileged and Non-Privileged In\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/?ref=ml_lbp)\n[Special Machine Instructions in Operating System\\\\\n\\\\\n\\\\\nMachine instructions are machine code programs or commands. In other words, commands written in the machine code of a computer that it can recognize and subsequently execute. Machine code or machine language refers to a computer programming language consisting of a string of ones and zeros, i.e., bi\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/special-machine-instructions-in-operating-system/?ref=ml_lbp)\n[Instruction Execution in Operating System\\\\\n\\\\\n\\\\\nInstruction execution in an operating gadget refers to the process by which the central processing unit (CPU) of a computer device carries out commands provided by means of walking applications or strategies. The operating machine plays an essential position in managing and coordinating this trainin\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/instruction-execution-in-operating-system/?ref=ml_lbp)\n[Priority Inversion in Operating Systems\\\\\n\\\\\n\\\\\nLet us first put 'priority inversion' in the context of the Big Picture i.e. where does this come from. In Operating System, one of the important concepts is Task Scheduling. There are several Scheduling methods such as First Come First Serve, Round Robin, Priority-based scheduling, etc. Each schedu\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/priority-inversion-what-the-heck/?ref=ml_lbp)\n[Process Creation and Deletions in Operating Systems\\\\\n\\\\\n\\\\\nA process is an instance of a program running, and its lifecycle includes various stages such as creation, execution, and deletion. The operating system handles process creation by allocating necessary resources and assigning each process a unique identifier. Process deletion involves releasing reso\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/?ref=ml_lbp)\n[Design and Implementation in Operating System\\\\\n\\\\\n\\\\\nThe design of an operating system is a broad and complex topic that touches on many aspects of computer science. This article will cover the design of operating systems in general and then focus on the implementation aspect. Design Goals:Design goals are the objectives of the operating system. They\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/design-and-implementation-in-operating-system/?ref=ml_lbp)\n[Precedence Graph in Operating System\\\\\n\\\\\n\\\\\nPrerequisite - Process Synchronization Precedence Graph is a directed acyclic graph which is used to show the execution level of several processes in operating system. It consists of nodes and edges. Nodes represent the processes and the edges represent the flow of execution. Properties of Precedenc\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/precedence-graph-in-operating-system/?ref=ml_lbp)\n[Blocking and Nonblocking IO in Operating System\\\\\n\\\\\n\\\\\nBlocking and non-blocking IO are two different methods used by OS to handle I/O operations. A blocking call is where the OS decides that it needs to wait for a certain operation to complete before allowing the program to continue execution. The result of this is that user can't do anything else whil\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/blocking-and-nonblocking-io-in-operating-system/?ref=ml_lbp)\n[I/O scheduling in Operating Systems\\\\\n\\\\\n\\\\\nYou can manage connectivity in your active I/O configurations through I/O operations, which offers a centralized point of control. In addition to allowing you to view and change the paths between a processor and an input/output device, which may involve using dynamic switching, it actively participa\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/i-o-scheduling-in-operating-systems/?ref=ml_lbp)\n[List scheduling in Operating System\\\\\n\\\\\n\\\\\nPrerequisite - CPU Scheduling List Scheduling also known as Priority List Based Scheduling is a scheduling technique in which an ordered list of processes are made by assigning them some priorities. So, basically what happens is, a list of processes that are ready to be executed at a given point is\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/list-scheduling-in-operating-system/?ref=ml_lbp)\n\nLike73\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=648931279.1740481377&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102693808~102717421&z=532063789)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481376841&cv=11&fst=1740481376841&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb884918195&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fprivileged-and-non-privileged-instructions-in-operating-system%2F&hn=www.googleadservices.com&frm=0&tiba=Privileged%20and%20Non-Privileged%20Instructions%20in%20Operating%20System%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=1868750503.1740481377&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=ubalupjyeqea)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=s4fm1nukdhfu)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Privileged and Non-Privileged Instructions in Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/Untitled-drawing-9-1.jpg",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "867bd8c0-4c86-4777-8f8d-1a713b0823c1",
        "sourceURL": "https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/",
        "url": "https://www.geeksforgeeks.org/privileged-and-non-privileged-instructions-in-operating-system/",
        "topic": "operating systems"
      }
    },
    "id": 8
  },
  {
    "url": "https://www.geeksforgeeks.org/process-in-operating-system/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/process-in-operating-system/?type%3Darticle%26id%3D1354757&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nMulti Processing Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/multi-processing-operating-system/?ref=next_article_top)\n\n# Process in Operating System\n\nLast Updated : 30 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n1 Like\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA process is a program in execution. For example, when we write a program in C or C++ and compile it, the compiler creates binary code. The original code and binary code are both programs. When we actually run the binary code, it becomes a process.\n\n- A process is an 'active' entity instead of a program, which is considered a 'passive' entity.\n- A single program can create many processes when run multiple times; for example, when we open a .exe or binary file multiple times, multiple instances begin (multiple processes are created).\u00a0.\n\n## **How Does a Process Look Like in Memory?**\n\nA process in memory is divided into several distinct sections, each serving a different purpose. Here's how a process typically looks in memory:\n\n![Process Management](https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/process.png)\n\n- **Text Section**: A text or code segment contains executable instructions. It is typically a read only section\n- **Stack**: The stack contains temporary data, such as function parameters, returns addresses, and local variables.\n- **Data Section**: Contains the global variable.\n- **Heap Section**: [Dynamically memory allocated](https://www.geeksforgeeks.org/what-is-dynamic-memory-allocation) to process during its run time.\n\n## Attributes of a Process\n\nA **process** has several important attributes that help the operating system manage and control it. These attributes are stored in a structure called the [**Process Control Block (PCB)**](https://www.geeksforgeeks.org/process-control-block-in-os/) (sometimes called a task control block). The PCB keeps all the key information about the process, including:\n\n1. **Process ID (PID)**: A unique number assigned to each process so the operating system can identify it.\n2. [**Process State**](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/): This shows the current status of the process, like whether it is running, waiting, or ready to execute.\n3. **Priority and other CPU Scheduling Information**: Data that helps the operating system decide which process should run next, like priority levels and pointers to scheduling queues.\n4. **I/O Information**: Information about input/output devices the process is using.\n5. **File Descriptors:** Information about open files files and network connections.\n6. **Accounting Information**: Tracks how long the process has run, the amount of CPU time used, and other resource usage data.\n7. **Memory Management Information**: Details about the memory space allocated to the process, including where it is loaded in memory and the structure of its memory layout (stack, heap, etc.).\n\nThese attributes in the PCB help the operating system control, schedule, and manage each process effectively.\n\n## **States of Process**\n\nA process is in one of the following states:\n\n- **New:** Newly Created Process (or) being-created process.\n- **Ready:** After the creation process moves to the Ready state, i.e. the process is ready for execution.\n- **Running:** Currently running process in CPU (only one process at a time can be under execution in a single processor).\n- **Wait (or Block):** When a process requests I/O access.\n- **Complete (or Terminated):** The process completed its execution.\n- **Suspended Ready:** When the ready queue becomes full, some processes are moved to a suspended ready state\n- **Suspended Block:** When the waiting queue becomes full.\n\n![process-states](https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/process-states1.png)\n\nPlease refer [States of a Process](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/) for more details.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/multi-processing-operating-system/?ref=next_article)\n\n[Multi Processing Operating System](https://www.geeksforgeeks.org/multi-processing-operating-system/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n1\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n\n### Similar Reads\n\n[Process in Operating System\\\\\n\\\\\n\\\\\nA process is a program in execution. For example, when we write a program in C or C++ and compile it, the compiler creates binary code. The original code and binary code are both programs. When we actually run the binary code, it becomes a process. A process is an 'active' entity instead of a progra\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/process-in-operating-system/?ref=ml_lbp)\n[Multi Processing Operating System\\\\\n\\\\\n\\\\\nThe operating system functions like a manager of all the available resources. Therefore operating system is defined as an interface between the system and the user. There are various types of operating systems such as Batch Operating Systems, Multi-programming Operating Systems, distributed operatin\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/multi-processing-operating-system/?ref=ml_lbp)\n[Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=ml_lbp)\n[Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=ml_lbp)\n[Cooperating Process in Operating System\\\\\n\\\\\n\\\\\nPre-requisites: Process Synchronization In an operating system, everything is around the process. How the process goes through several different states. So in this article, we are going to discuss one type of process called as Cooperating Process. In the operating system there are two types of proce\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/?ref=ml_lbp)\n[Booting Process in DOS Operating System\\\\\n\\\\\n\\\\\nBooting may be defined as process of loading the operating system into memory. The booting process starts from the moment when we power on computer and continues till moment, computer is ready for use. In the case of DOS, booting process starts when we start computer and continues till DOS prompt is\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/booting-process-in-dos-operating-system/?ref=ml_lbp)\n[Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=ml_lbp)\n[System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=ml_lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=ml_lbp)\n[Concurrent Processes in Operating System\\\\\n\\\\\n\\\\\nConcurrent processing is a computing model in which multiple processors execute instructions simultaneously for better performance. Concurrent means, which occurs when something else happens. The tasks are broken into subtypes, which are then assigned to different processors to perform simultaneousl\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/concurrent-processes-in-operating-system/?ref=ml_lbp)\n\nLike1\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/process-in-operating-system/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1783708427.1740481388&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1152538478)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481387803&cv=11&fst=1740481387803&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb858768136&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fprocess-in-operating-system%2F&hn=www.googleadservices.com&frm=0&tiba=Process%20in%20Operating%20System%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=1853978649.1740481388&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=flul7m2kh5d3)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=svndbyw84sz5)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Process in Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/process.png",
        "keywords": "process, program execution, binary code, Process Control Block, Process ID, process state, CPU scheduling, I/O information, memory management, text section, stack section, heap section, suspended ready state, suspended block state, attributes of a process",
        "ogUrl": "https://www.geeksforgeeks.org/process-in-operating-system/",
        "ogDescription": "A process is an active program in execution, characterized by distinct memory sections and managed by attributes stored in a Process Control Block (PCB), which includes information such as Process ID, state, priority, and memory management details.",
        "description": "A process is an active program in execution, characterized by distinct memory sections and managed by attributes stored in a Process Control Block (PCB), which includes information such as Process ID, state, priority, and memory management details.",
        "scrapeId": "07cd4fdc-d8d0-4c2a-b0d1-34128b79a7da",
        "sourceURL": "https://www.geeksforgeeks.org/process-in-operating-system/",
        "url": "https://www.geeksforgeeks.org/process-in-operating-system/",
        "topic": "operating systems"
      }
    },
    "id": 9
  },
  {
    "url": "https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/?type%3Darticle%26id%3D387556&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nCooperating Process in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/?ref=next_article_top)\n\n# Process Creation and Deletions in Operating Systems\n\nLast Updated : 31 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n16 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA process is an instance of a program running, and its lifecycle includes various stages such as creation, execution, and deletion.\n\n- The operating system handles process creation by allocating necessary resources and assigning each process a unique identifier.\n- Process deletion involves releasing resources once a process completes its execution.\n- Processes are often organized in a hierarchy, where parent processes create child processes, forming a tree-like structure.\n\n## **Process Creation**\n\nAs discussed above, processes in most of the operating systems (both Windows and Linux)formhierarchy. So a new process is always created by a parent process. The process that creates the new one is called the parent process, and the newly created process is called the child process. A process can create multiple new processes while it\u2019s running by using system calls to create them.\n\n1\\. When a new process is created, the operating system assigns a unique Process Identifier (PID) to it and inserts a new entry in the primary process table.\n\n2\\. Then required memory space for all the elements of the process such as program, data, and stack is allocated including space for its [Process Control Block](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/) (PCB).\n\n3\\. Next, the various values in PCB are initialized such as,\n\n1. The process identification part is filled with PID assigned to it in step (1) and also its parent\u2019s PID.\n2. The processor register values are mostly filled with zeroes, except for the stack pointer and program counter. The stack pointer is filled with the address of the stack-allocated to it in step (2) and the program counter is filled with the address of its program entry point.\n3. The process state information would be set to \u2018New\u2019.\n4. Priority would be lowest by default, but the user can specify any priority during creation. Then the operating system will link this process to the scheduling queue and the process state would be changed from \u2018New\u2019 to \u2018Ready\u2019. Now the process is competing for the CPU.\n5. Additionally, the operating system will create some other data structures such as log files or accounting files to keep track of process activity.\n\n### **Understanding System Calls for Process Creation in UNIX Operating System:**\n\nProcess creation is achieved through the\u00a0[**fork() system call**](https://www.geeksforgeeks.org/fork-system-call/). The new process that gets created is called the child process, and the one that started it (the one that was already running) is called the parent process. After the `fork()` call, you end up with two processes: the parent and the child, both running independently.\n\n- The `fork()` system call creates a copy of the current process, including all its resources, but with just one thread.\n- The `exec()` system call replaces the current process\u2019s memory with the code and data from a specified executable file. It doesn\u2019t return; instead, it \u201ctransfers\u201d the process to the new program.\n- The `waitpid()` function makes the parent process wait until a specific child process finishes executing.\n\n![unix_process_creation](https://media.geeksforgeeks.org/wp-content/uploads/20241230174218450609/unix_process_creation.webp)\n\nProcess creation in Unix\n\n> Example:\n>\n> int pid = fork();\n>\n> if (pid == 0)\n>\n> {\n>\n> /\\\\* Child process \\*/\n>\n> exec(\u201cfoo\u201d);\n>\n> }\n>\n> else\n>\n> {\n>\n> /\\\\* Parent process \\*/\n>\n> waitpid(pid, &status, options);\n>\n> }\n\n### **Understanding System Calls for Process Creation in Windows Operating System:**\n\nIn Windows, the system call used for process creation is `CreateProcess()`. This function is responsible for creating a new process, initializing its memory, and loading the specified program into the process\u2019s address space.\n\n- `CreateProcess()` in Windows combines the functionality of both UNIX\u2019s `fork()` and `exec()`. It creates a new process with its own memory space rather than duplicating the parent process like `fork()` does. It also allows specifying which program to run, similar to how `exec()` works in UNIX.\n\n- When you use `CreateProcess()`, you need to provide some extra details to handle any changes between the parent and child processes. These details control things like the process\u2019s environment, security settings, and how the child process works with the parent or other processes. It gives you more control and flexibility compared to the UNIX system.\n\n## **Process Deletion**\n\nProcesses terminate themselves when they finish executing their last statement, after which the operating system uses the `exit()` system call to delete their context. Then all the resources held by that process like physical and [virtual memory](https://www.geeksforgeeks.org/virtual-memory-in-operating-system/), 10 buffers, open files, etc., are taken back by the operating system. A process P can be terminated either by the operating system or by the parent process of P.\n\nA parent may terminate a process due to one of the following reasons:\n\n1. When task given to the child is not required now.\n2. When the child has taken more resources than its limit.\n3. The parent of the process is exiting, as a result, all its children are deleted. This is called cascaded termination.\n\nA process can be terminated/deleted in many ways. Some of the ways are:\n\n1. **Normal termination:** The process completes its task and calls an exit() system call. The operating system cleans up the resources used by the process and removes it from the process table.\n2. **Abnormal termination/Error exit:** A process may terminate abnormally if it encounters an error or needs to stop immediately. This can happen through the `abort()` system call.\n3. **Termination by parent process:** A parent process may terminate a child process when the child finishes its task. This is done by the using kill() system call.\n4. **Termination by signal:** The parent process can also send specific signals like `SIGSTOP` to pause the child or `SIGKILL` to immediately terminate it.\n\n## Conclusion\n\nProcesses are created using system calls like `fork()` in UNIX or `CreateProcess()` in Windows, which handle the allocation of resources, assignment of unique identifiers, and initialization of the process control block. Once a process completes its task, it can terminate through various methods, such as normal termination, abnormal termination, or by the parent process using system calls like `exit()`, `abort()`, or `kill()`.\n\n## **Frequently Asked Questions on** Process Creation and Deletions in Operating Systems\n\n### **What is the difference between process creation and process termination?**\n\n> _**Process Creation**_ _is the start of a process, where the operating system allocates resources, assigns a unique ID, and sets up the process control block._\n>\n> _**Process Termination**_ _is the end of a process, where the operating system deallocates resources, removes the process from the system, and records its exit status_.\n\n### What are the 7 process states in an operating system?\n\n> _New State, Ready State, Running State, Termination State, Block or Wait State, Suspend Ready State, Suspend Wait State._\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/?ref=next_article)\n\n[Cooperating Process in Operating System](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/?ref=next_article)\n\n[S](https://www.geeksforgeeks.org/user/ShivaTeja2/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[ShivaTeja2](https://www.geeksforgeeks.org/user/ShivaTeja2/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n16\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Process Creation and Deletions in Operating Systems\\\\\n\\\\\n\\\\\nA process is an instance of a program running, and its lifecycle includes various stages such as creation, execution, and deletion. The operating system handles process creation by allocating necessary resources and assigning each process a unique identifier. Process deletion involves releasing reso\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/?ref=ml_lbp)\n[Cooperating Process in Operating System\\\\\n\\\\\n\\\\\nPre-requisites: Process Synchronization In an operating system, everything is around the process. How the process goes through several different states. So in this article, we are going to discuss one type of process called as Cooperating Process. In the operating system there are two types of proce\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/?ref=ml_lbp)\n[Design and Implementation in Operating System\\\\\n\\\\\n\\\\\nThe design of an operating system is a broad and complex topic that touches on many aspects of computer science. This article will cover the design of operating systems in general and then focus on the implementation aspect. Design Goals:Design goals are the objectives of the operating system. They\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/design-and-implementation-in-operating-system/?ref=ml_lbp)\n[5 State Process Model in Operating System\\\\\n\\\\\n\\\\\nIn an operating system (OS), managing how programs run and interact with system resources is crucial for efficient performance. The 5-state process model is a fundamental framework used by OSs to categorize and control the behavior of processes, which are individual instances of programs running on\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/5-state-process-model-in-operating-system/?ref=ml_lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=ml_lbp)\n[Disk Defragmentation in Operating System\\\\\n\\\\\n\\\\\nIn the world of computer storage management, retaining the performance of Hard Disk Drives (HDDs) is important for ensuring easy operation and responsiveness of the running system. One key method used to obtain this is disk defragmentation. As data is written, modified, and deleted on a disk through\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/disk-defragmentation-in-operating-system/?ref=ml_lbp)\n[Process in Operating System\\\\\n\\\\\n\\\\\nA process is a program in execution. For example, when we write a program in C or C++ and compile it, the compiler creates binary code. The original code and binary code are both programs. When we actually run the binary code, it becomes a process. A process is an 'active' entity instead of a progra\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/process-in-operating-system/?ref=ml_lbp)\n[Page Fault Handling in Operating System\\\\\n\\\\\n\\\\\nA page fault occurs when a program attempts to access data or code that is in its address space but is not currently located in the system RAM. This triggers a sequence of events where the operating system must manage the fault by loading the required data from secondary storage into RAM. Page fault\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/page-fault-handling-in-operating-system/?ref=ml_lbp)\n[Directory Implementation in Operating System\\\\\n\\\\\n\\\\\nDirectory implementation in the operating system can be done using Singly Linked List and Hash table. The efficiency, reliability, and performance of a file system are greatly affected by the selection of directory-allocation and directory-management algorithms. There are numerous ways in which the\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/directory-implementation-in-operating-system/?ref=ml_lbp)\n[Difference Between Application Software and Operating System\\\\\n\\\\\n\\\\\nA computer can only carry out certain tasks with the help of software, which is a set of guidelines or instructions. Software can be broadly divided into two categories: system software and application software. The primary program on a computer that has direct access to the hardware of the system i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/difference-between-application-software-and-operating-system/?ref=ml_lbp)\n\nLike16\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1160808176.1740481398&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=226389357)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481398168&cv=11&fst=1740481398168&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb884918195&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fprocess-creation-and-deletions-in-operating-systems%2F&hn=www.googleadservices.com&frm=0&tiba=Process%20Creation%20and%20Deletions%20in%20Operating%20Systems%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=1965604510.1740481398&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=kmqk4chvopst)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=125phj8qhv9a)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Process Creation and Deletions in Operating Systems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20241230174218450609/unix_process_creation-660.webp",
        "keywords": "process lifecycle, process creation, process deletion, operating system, unique identifier, parent process, child process, system calls, Process Control Block, fork system call, CreateProcess function, normal termination, abnormal termination, process states, resource allocation",
        "ogUrl": "https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/",
        "ogDescription": "Processes are created and managed by the operating system through system calls like fork() in UNIX and CreateProcess() in Windows, which allocate resources, assign unique identifiers, and initialize process control blocks, while termination can occur through various methods such as normal or abnormal termination.",
        "description": "Processes are created and managed by the operating system through system calls like fork() in UNIX and CreateProcess() in Windows, which allocate resources, assign unique identifiers, and initialize process control blocks, while termination can occur through various methods such as normal or abnormal termination.",
        "scrapeId": "75822b1c-eb99-4451-9593-008eab6acdbd",
        "sourceURL": "https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/",
        "url": "https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 10
  },
  {
    "url": "https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Java for Android](https://www.geeksforgeeks.org/learn-java-for-android-app-development-a-complete-guide/?ref=shm)\n- [Android Studio](https://www.geeksforgeeks.org/android-studio-tutorial/?ref=shm)\n- [Android Kotlin](https://www.geeksforgeeks.org/kotlin-android-tutorial/?ref=shm)\n- [Kotlin](https://www.geeksforgeeks.org/kotlin-programming-language/?ref=shm)\n- [Flutter](https://www.geeksforgeeks.org/flutter-tutorial/?ref=shm)\n- [Dart](https://www.geeksforgeeks.org/dart-tutorial/?ref=shm)\n- [Android Project](https://www.geeksforgeeks.org/android-projects-from-basic-to-advanced-level/?ref=shm)\n- [Android Interview](https://www.geeksforgeeks.org/android-interview-questions-for-experienced/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?type%3Darticle%26id%3D200098&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nCPU Scheduling in Operating Systems\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article_top)\n\n# States of a Process in Operating Systems\n\nLast Updated : 22 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n426 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer [Process in Operating System](https://www.geeksforgeeks.org/process-in-operating-system/) to understand more details about processes.\n\nEach process goes through several stages throughout its life cycle. In this article, We discuss different states of process in detail.\n\n## Process Lifecycle\n\nWhen you run a program (which becomes a process), it goes through different phases before it completion. These phases, or states, can vary depending on the operating system, but the most common process lifecycle includes **two**, **five**, or **seven** states. Here\u2019s a simple explanation of these states:\n\n## The Two-State Model\n\nThe simplest way to think about a process\u2019s lifecycle is with just **two states**:\n\n1. **Running**: This means the process is actively using the CPU to do its work.\n2. **Not Running**: This means the process is not currently using the CPU. It could be waiting for something, like user input or data, or it might just be paused.\n\n![Two State Process Model](https://media.geeksforgeeks.org/wp-content/uploads/20241017170033937669/Screenshot-2024-10-17-170011.png)\n\nTwo State Process Model\n\nWhen a new process is created, it starts in the **not running** state. Initially, this process is kept in a program called the [**dispatcher**](https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/).\n\nHere\u2019s what happens step by step:\n\n1. **Not Running State**: When the process is first created, it is not using the CPU.\n2. **Dispatcher Role**: The dispatcher checks if the CPU is free (available for use).\n3. **Moving to Running State**: If the CPU is free, the dispatcher lets the process use the CPU, and it moves into the **running** state.\n4. **CPU Scheduler Role**: When the CPU is available, the [**CPU scheduler**](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/) decides which process gets to run next. It picks the process based on a set of rules called the **scheduling scheme**, which varies from one operating system to another.\n\n## The Five-State Model\n\nThe [**five-state process lifecycle**](https://www.geeksforgeeks.org/5-state-process-model-in-operating-system/) is an expanded version of the two-state model. The two-state model works well when all processes in the **not running** state are ready to run. However, in some operating systems, a process may not be able to run because it is waiting for something, like input or data from an external device. To handle this situation better, the **not running state** is divided into two separate states:\n\n![five-state-process-model](https://media.geeksforgeeks.org/wp-content/uploads/20241017162800402546/five-state-model.png)\n\nFive state Process Model\n\nHere\u2019s a simple explanation of the five-state process model:\n\n- **New:** This state represents a newly created process that hasn\u2019t started running yet. It has not been loaded into the main memory, but its process control block (PCB) has been created, which holds important information about the process.\n- **Ready:** A process in this state is ready to run as soon as the CPU becomes available. It is waiting for the operating system to give it a chance to execute.\n- **Running**: This state means the process is currently being executed by the CPU. Since we\u2019re assuming there is only one CPU, at any time, only one process can be in this state.\n- **Blocked/Waiting:** This state means the process cannot continue executing right now. It is waiting for some event to happen, like the completion of an input/output operation (for example, reading data from a disk).\n- **Exit/Terminate:** A process in this state has finished its execution or has been stopped by the user for some reason. At this point, it is released by the operating system and removed from memory.\n\n## The Seven-State Model\n\nThe states of a process are as follows:\n\n- **New State:** In this step, the process is about to be created but not yet created. It is the program that is present in secondary memory that will be picked up by the OS to create the process.\n\n- **Ready State: New -> Ready** to run. After the creation of a process, the process enters the ready state i.e. the process is loaded into the main memory. The process here is ready to run and is waiting to get the CPU time for its execution. Processes that are ready for execution by the CPU are maintained in a queue called a ready queue for ready processes.\n\n- **Run State:** The process is chosen from the ready queue by the OS for execution and the instructions within the process are executed by any one of the available processors.\n\n- **Blocked or Wait State:** Whenever the process requests access to I/O needs input from the user or needs access to a critical region(the lock for which is already acquired) it enters the blocked or waits state. The process continues to wait in the main memory and does not require CPU. Once the I/O operation is completed the process goes to the ready state.\n\n- **Terminated or Completed State:** Process is killed as well as PCB is deleted. The resources allocated to the process will be released or deallocated.\n\n- **Suspend Ready:** Process that was initially in the ready state but was swapped out of main memory(refer to [Virtual Memory](https://www.geeksforgeeks.org/virtual-memory-in-operating-system/) topic) and placed onto external storage by the scheduler is said to be in suspend ready state. The process will transition back to a ready state whenever the process is again brought onto the main memory.\n\n- **Suspend Wait or Suspend Blocked:** Similar to suspend ready but uses the process which was performing I/O operation and lack of main memory caused them to move to secondary memory. When work is finished it may go to suspend ready.\n\n![state](https://media.geeksforgeeks.org/wp-content/uploads/20250122155935521530/state.webp)\n\n- **CPU and I/O Bound Processes:** If the process is intensive in terms of CPU operations, then it is called CPU bound process. Similarly, If the process is intensive in terms of I/O operations then it is called I/O bound process.\n\n## **How Does a Process Move From One State to Other State?**\n\nA process can move between different states in an operating system based on its execution status and resource availability. Here are some examples of how a process can move between different states:\n\n- **New to Ready:** When a process is created, it is in a new state. It moves to the ready state when the operating system has allocated resources to it and it is ready to be executed.\n\n- **Ready to Running:** When the CPU becomes available, the operating system selects a process from the ready queue depending on various scheduling algorithms and moves it to the running state.\n\n- **Running to Blocked:** When a process needs to wait for an event to occur (I/O operation or [system call](https://www.geeksforgeeks.org/introduction-of-system-call/)), it moves to the blocked state. For example, if a process needs to wait for user input, it moves to the blocked state until the user provides the input.\n\n- **Running to Ready:** When a running process is preempted by the operating system, it moves to the ready state. For example, if a higher-priority process becomes ready, the operating system may preempt the running process and move it to the ready state.\n\n- **Blocked to Ready:** When the event a blocked process was waiting for occurs, the process moves to the ready state. For example, if a process was waiting for user input and the input is provided, it moves to the ready state.\n\n- **Running to Terminated:** When a process completes its execution or is terminated by the operating system, it moves to the terminated state.\n\n## **Types of Schedulers**\n\n- **Long-Term Scheduler:** Decides how many processes should be made to stay in the ready state. This decides the degree of [multiprogramming](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/). Once a decision is taken it lasts for a long time which also indicates that it runs infrequently. Hence it is called a long-term scheduler.\n\n- **Short-Term Scheduler:** [Short-term scheduler](https://www.geeksforgeeks.org/short-term-scheduler-in-operating-system/) will decide which process is to be executed next and then it will call the dispatcher. A dispatcher is a software that moves the process from ready to run and vice versa. In other words, it is context switching. It runs frequently. Short-term scheduler is also called CPU scheduler.\n\n- **Medium Scheduler:** Suspension decision is taken by the [medium-term scheduler](https://www.geeksforgeeks.org/medium-term-scheduler-in-operating-system/). The medium-term scheduler is used for [swapping](https://www.geeksforgeeks.org/swapping-in-operating-system/) which is moving the process from main memory to secondary and vice versa. The swapping is done to reduce degree of multiprogramming.\n\n## **Multiprogramming**\n\nWe have many processes ready to run. There are two types of multiprogramming:\n\n- **Preemption:** Process is forcefully removed from CPU. Pre-emption is also called time sharing or [multitasking](https://www.geeksforgeeks.org/multitasking-operating-system/).\n- **Non-Preemption:** Processes are not removed until they complete the execution. Once control is given to the CPU for a process execution, till the CPU releases the control by itself, control cannot be taken back forcibly from the CPU.\n\n## **Degree of Multiprogramming**\n\nThe number of processes that can reside in the ready state at maximum decides the degree of multiprogramming, e.g., if the degree of programming = 100, this means 100 processes can reside in the ready state at maximum.\n\n## **Operation on The Process**\n\n- **Creation:** The process will be ready once it has been created, enter the ready queue ( [main memory](https://www.geeksforgeeks.org/computer-memory/)), and be prepared for execution.\n- **Planning:** The operating system picks one process to begin executing from among the numerous processes that are currently in the ready queue. Scheduling is the process of choosing the next process to run.\n- **Application:** The processor begins running the process as soon as it is scheduled to run. During execution, a process may become blocked or wait, at which point the processor switches to executing the other processes.\n- **Killing or Deletion:** The OS will terminate the process once its purpose has been fulfilled. The process\u2019s context will be over there.\n- **Blocking:** When a process is waiting for an event or resource, it is blocked. The operating system will place it in a blocked state, and it will not be able to execute until the event or resource becomes available.\n- **Resumption:** When the event or resource that caused a process to block becomes available, the process is removed from the blocked state and added back to the ready queue.\n- **Context Switching:** When the operating system switches from executing one process to another, it must save the current process\u2019s context and load the context of the next process to execute. This is known as context switching.\n- **Inter-Process Communication:** Processes may need to communicate with each other to share data or coordinate actions. The operating system provides mechanisms for inter-process communication, such as shared memory, message passing, and synchronization primitives.\n- **Process Synchronization:** Multiple processes may need to access a shared resource or critical section of code simultaneously. The operating system provides [synchronization](https://www.geeksforgeeks.org/introduction-of-process-synchronization/) mechanisms to ensure that only one process can access the resource or critical section at a time.\n- **Process States:** Processes may be in one of several states, including ready, running, waiting, and terminated. The operating system manages the process states and transitions between them.\n\n## Features of The Process State\n\n- A process can move from the running state to the waiting state if it needs to wait for a resource to become available.\n- A process can move from the waiting state to the ready state when the resource it was waiting for becomes available.\n- A process can move from the ready state to the running state when it is selected by the operating system for execution.\n- The scheduling algorithm used by the operating system determines which process is selected to execute from the ready state.\n- The operating system may also move a process from the running state to the ready state to allow other processes to execute.\n- A process can move from the running state to the terminated state when it completes its execution.\n- A process can move from the waiting state directly to the terminated state if it is aborted or killed by the operating system or another process.\n- A process can go through ready, running and waiting state any number of times in its lifecycle but new and terminated happens only once.\n- The process state includes information about the program counter, [CPU registers](https://www.geeksforgeeks.org/different-classes-of-cpu-registers/), memory allocation, and other resources used by the process.\n- The operating system maintains a process control block (PCB) for each process, which contains information about the process state, priority, scheduling information, and other process-related data.\n- The process state diagram is used to represent the transitions between different states of a process and is an essential concept in process management in operating systems.\n\n## Conclusion\n\nIn conclusion, understanding the states of a process in an [operating system](https://www.geeksforgeeks.org/what-is-an-operating-system/) is essential for comprehending how the system efficiently manages multiple processes. These states\u2014new, ready, running, waiting, and terminated\u2014represent different stages in a process\u2019s life cycle. By transitioning through these states, the operating system ensures that processes are executed smoothly, resources are allocated effectively, and the overall performance of the computer is optimized. This knowledge helps us appreciate the complexity and efficiency behind the scenes of modern computing.\n\n## Frequently Asked Questions on States of a Process in Operating Systems \u2013 FAQs\n\n### **When does a process enter the \u2018ready\u2019 state?**\n\n> A process enters the \u2018ready\u2019 state when it is loaded into the main memory and is waiting to be assigned to a processor for execution. It is ready to run but is waiting for CPU time.\n\n### **Can a process move directly from \u2018running\u2019 to \u2018ready\u2019 state?**\n\n> Yes, a process can move from \u2018running\u2019 to \u2018ready\u2019 state if it is interrupted or preempted by a higher priority process, or if it voluntarily yields the CPU.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article)\n\n[CPU Scheduling in Operating Systems](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article)\n\n[A](https://www.geeksforgeeks.org/user/Aniket_Dusey/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Aniket\\_Dusey](https://www.geeksforgeeks.org/user/Aniket_Dusey/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n426\n\nImprove\n\nArticle Tags :\n\n- [Android](https://www.geeksforgeeks.org/category/android/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [B-Tree](https://www.geeksforgeeks.org/tag/b-tree/?ref=article_tag)\n- [Functions](https://www.geeksforgeeks.org/tag/functions/?ref=article_tag)\n- [Intellipaat](https://www.geeksforgeeks.org/tag/intellipaat/?ref=article_tag)\n- [JP Morgan](https://www.geeksforgeeks.org/tag/jp-morgan/?ref=article_tag)\n- [proces](https://www.geeksforgeeks.org/tag/proces/?ref=article_tag)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n- [Python numpy-Random](https://www.geeksforgeeks.org/tag/python-numpy-random/?ref=article_tag)\n- [SQL-PL/SQL](https://www.geeksforgeeks.org/tag/sql-plsql/?ref=article_tag)\n- [TCS-coding-questions](https://www.geeksforgeeks.org/tag/tcs-coding-questions/?ref=article_tag)\n\n+8 More\n\nPractice Tags :\n\n- [Functions](https://www.geeksforgeeks.org/explore?category=Functions&ref=article_practice_tag)\n\n### Similar Reads\n\n[Introduction to Operating System\\\\\n\\\\\n\\\\\nAn operating system acts as an intermediary between the user of a computer and computer hardware. In short its an interface between computer hardware and user. The purpose of an operating system is to provide an environment in which a user can execute programs conveniently and efficiently. An operat\\\\\n\\\\\n15 min read](https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/?ref=lbp)\n[Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n[Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n[Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n[Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=lbp)\n[CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n[Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n[Starvation and Aging in Operating Systems\\\\\n\\\\\n\\\\\nStarvation occurs when a process in the OS runs out of resources because other processes are using it. This is a problem with resource management while Operating systems employ aging as a scheduling approach to keep them from starving. It is one of the most common scheduling algorithms in batch syst\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/?ref=lbp)\n[Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\nLike426\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=2471622.1740481409&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717421&z=637301718)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=ajad3shyfk5l)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=vzd50ilycwp9)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "States of a Process in Operating Systems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20241017170033937669/Screenshot-2024-10-17-170011.png",
        "keywords": "process lifecycle, operating system, process states, two-state model, five-state model, seven-state model, dispatcher role, CPU scheduler, blocked state, inter-process communication, process control block, context switching, process synchronization, degree of multiprogramming, scheduling algorithms",
        "ogUrl": "https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/",
        "ogDescription": "Understanding the various states of a process\\u2014new, ready, running, waiting, and terminated\\u2014is crucial for grasping how operating systems manage process execution and resource allocation efficiently.",
        "description": "Understanding the various states of a process\\u2014new, ready, running, waiting, and terminated\\u2014is crucial for grasping how operating systems manage process execution and resource allocation efficiently.",
        "scrapeId": "4c5345e2-4a9e-4aea-ba2d-41189965412f",
        "sourceURL": "https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/",
        "url": "https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 11
  },
  {
    "url": "https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?type%3Darticle%26id%3D165768&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nOperations on Processes\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/operations-on-processes/?ref=next_article_top)\n\n# Process Table and Process Control Block (PCB)\n\nLast Updated : 27 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n326 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control block (PCB) is used to track the process\u2019s execution status. Each block of memory contains information about the process state, program counter, stack pointer, status of opened files, scheduling algorithms, etc.\n\nAll this information is required and must be saved when the process is switched from one state to another. When the process makes a transition from one state to another, the operating system must update information in the process\u2019s PCB. A **Process Control Block (PCB)** contains information about the process, i.e. registers, quantum, priority, etc. The **Process Table** is an array of PCBs, which logically contains a PCB for all of the current processes in the system.\n\n## Structure of the Process Control Block\n\nA Process Control Block (PCB) is a data structure used by the operating system to manage information about a process. The process control keeps track of many important pieces of information needed to manage processes efficiently. The diagram helps explain some of these key data items.\n\n![process-control-block](https://media.geeksforgeeks.org/wp-content/uploads/20241122132710403798/process---------control---------block.webp)\n\nProcess Control Block\n\n- **Pointer:** It is a stack pointer that is required to be saved when the process is switched from one state to another to retain the current position of the process.\n- **Process state:** It stores the respective state of the process.\n- **Process number:** Every process is assigned a unique id known as process ID or PID which stores the process identifier.\n- **Program counter:** [Program Counter](https://www.geeksforgeeks.org/what-is-program-counter/) stores the counter, which contains the address of the next instruction that is to be executed for the process.\n- **Register:** [Registers](https://www.geeksforgeeks.org/different-classes-of-cpu-registers/) in the PCB, it is a data structure. When a processes is running and it\u2019s time slice expires, the current value of process specific registers would be stored in the PCB and the process would be swapped out. When the process is scheduled to be run, the register values is read from the PCB and written to the CPU registers. This is the main purpose of the registers in the PCB.\n- **Memory limits:** This field contains the information about [memory management system](https://www.geeksforgeeks.org/memory-management-in-operating-system/) used by the operating system. This may include page tables, segment tables, etc.\n- **List of Open files:** This information includes the list of files opened for a process.\n\n## ![Process Table and Process Control Block](https://media.geeksforgeeks.org/wp-content/uploads/process-control-block.jpg)\n\n## **Additional Points to Consider for Process Control Block (PCB)**\n\n- **Interrupt Handling:** The PCB also contains information about the interrupts that a process may have generated and how they were handled by the operating system.\n- **Context Switching:** The process of switching from one process to another is called context switching. The PCB plays a crucial role in context switching by saving the state of the current process and restoring the state of the next process.\n- **Real-Time Systems:** Real-time operating systems may require additional information in the PCB, such as deadlines and priorities, to ensure that time-critical processes are executed in a timely manner.\n- **Virtual Memory Management:** The PCB may contain information about a process [virtual memory](https://www.geeksforgeeks.org/virtual-memory-in-operating-system/) management, such as page tables and page fault handling.\n- **Fault Tolerance:** Some operating systems may use multiple copies of the PCB to provide fault tolerance in case of hardware failures or software errors.\n\n## Location of The Process Control Block\n\nThe Process Control Block (PCB) is stored in a special part of memory that normal users can\u2019t access. This is because it holds important information about the process. Some operating systems place the PCB at the start of the kernel stack for the process, as this is a safe and secure spot.\n\n## Advantages\n\n### Advantages of Process Table\n\n- **Keeps Track of Processes:** It helps the operating system know which processes are running, waiting, or completed.\n- **Helps in Scheduling:** The process table provides information needed to decide which process should run next.\n- **Easy Process Management:** It organizes all the details about processes in one place, making it simple for the OS to manage them.\n\n### Advantages of Process Control Block (PCB)\n\n- **Stores Process Details:** PCB keeps all the important information about a process, like its state, ID, and resources it uses.\n- **Helps Resume Processes:** When a process is paused, PCB saves its current state so it can continue later without losing data.\n- **Ensures Smooth Execution:** By storing all the necessary details, PCB helps the operating system run processes efficiently and without interruptions.\n\n## Disadvantages\n\n### Disadvantages of Process Table\n\n- **Takes Up Memory** : The process table needs space to store information about all processes, which can use a lot of memory in systems with many processes.\n- **Slower Operations** : When there are too many processes, searching or updating the table can take more time, slowing down the system.\n- **Extra Work for the System** : The operating system has to constantly update the process table, which adds extra work and can reduce overall system performance.\n\n### Disadvantages of Process Control Block (PCB)\n\n- **Uses More Memory** : Each process needs its own PCB, so having many processes can consume a lot of memory.\n- **Slows Context Switching** : During [context switching](https://www.geeksforgeeks.org/context-switch-in-operating-system/) , the system has to update the PCB of the old process and load the PCB of the new one, which takes time and affects performance.\n- **Security Risks** : If the PCB is not well-protected, someone could access or modify it, causing security problems for processes.\n\n## Conclusion\n\nThe **Process Table** and **PCB** are important for managing processes in an operating system. The Process Table keeps a list of all active processes, and the PCB holds details about each process. The PCB enables smooth process switching, effective [multitasking](https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/), and efficient resource allocation. While they use some memory and processing power, they are essential for running multiple tasks smoothly.\n\n## Frequently Asked Questions on Process Table and Process Control Block \u2013 FAQ\u2019s\n\n### What information does a Process Control Block (PCB) contain?\n\n> A process control board (PCB) stores various information about a process so that the operating system can manage it properly. A typical printed circuit board contains the following components: Process ID (PID), Process Status, CPU Registers, Memory Management Information, I/O Information, etc.\n\n### **Can processes share the same PCB?**\n\n> No, each process has its own **unique PCB**. Sharing would lead to confusion as the OS would not be able to differentiate between processes.\n\n### **What happens to a PCB when a process finishes?**\n\n> When a process terminates:\n>\n> - Its PCB is removed from the Process Table.\n> - The resources held by the process are released.\n\n### **How does the OS prioritize processes using the Process Table?**\n\n> The Process Table includes priority information in each PCB. The OS uses this priority to decide which process gets CPU time first, especially in a priority-based scheduling system.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/operations-on-processes/?ref=next_article)\n\n[Operations on Processes](https://www.geeksforgeeks.org/operations-on-processes/?ref=next_article)\n\nR\n\nRajshree Srivastava\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n326\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike326\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=b3wvsoqv6bgl)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=elbp0erct7v5)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Process Table and Process Control Block (PCB) - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20241122132710403798/process---------control---------block.webp",
        "keywords": "Process Control Block, Process Table, context switching, process identification number, operating system, process execution status, memory management system, real-time operating systems, fault tolerance, interrupt handling, scheduling algorithms, process management, process state, CPU registers, virtual memory management",
        "ogUrl": "https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/",
        "ogDescription": "The Process Control Block (PCB) is a crucial data structure used by operating systems to manage and track essential information about processes, including their state, execution status, and resource usage, facilitating efficient multitasking and context switching.",
        "description": "The Process Control Block (PCB) is a crucial data structure used by operating systems to manage and track essential information about processes, including their state, execution status, and resource usage, facilitating efficient multitasking and context switching.",
        "scrapeId": "66e7210b-fdb8-4670-8dde-5b16e00b1faf",
        "sourceURL": "https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/",
        "url": "https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/",
        "topic": "operating systems"
      }
    },
    "id": 12
  },
  {
    "url": "https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/?type%3Darticle%26id%3D1359976&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nStates of a Process in Operating Systems\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=next_article_top)\n\n# Different types of Processes in Process Table\n\nLast Updated : 23 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\nLike Article\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nThe **process table** is a data structure used by the operating system to keep track of all processes. It is the collection of Program control Blocks ( [PCBs](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/)) which contains information about each process, such as its ID (PID), current state (e.g., running, ready, waiting), CPU usage, memory allocation, and open files.\n\n- The process table helps the operating system manage processes efficiently by tracking their progress and resource usage.\n\n- Each entry in the table corresponds to one process, and the operating system updates it as the process moves through different states inits lifecycle.\n\n## Process states\n\nThe states of a process represent the different stages a process goes through during its lifecycle in an operating system. A process can be in states such as **new**, **ready**, **running**, **waiting**, or **terminated**, depending on what it is doing and the resources it needs. These states help the operating system manage processes efficiently, ensuring that tasks are executed smoothly and system resources are used effectively.\n\nread more about - [States of a Process in Operating Systems](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/)\n\nDifferent types of processes in process table can be:\n\n1. New Process\n2. Ready Process\n3. Running Process\n4. Blocked / Waiting Process\n5. Terminated Process\n6. Zombie Process\n7. Orphan Process\n8. Daemon Process\n\n### 1\\. **New (Created) Process**\n\nA process that has been created but is not yet ready for execution. It remains in this state until the operating system assigns the necessary resources.\n\n### 2\\. **Ready Process**\n\nIt is the process that is ready to be loaded into the main memory. This process is ready to run and is waiting to get the CPU time for its execution. Processes that are ready for execution by the CPU are maintained in a queue called a ready queue for ready processes.\n\n### 3\\. **Running Process**\n\nA process that is currently being executed by the CPU. Only one process (or more in multicore systems) can be in the running state at a time.\n\n### 4\\. **Blocked (Waiting) Process**\n\nA process that is waiting for an event to occur, such as input/output (I/O) completion or a resource becoming available. It cannot continue execution until the required condition is met.\n\n### 5\\. **Terminated Process**\n\nA process that has completed its execution or has been explicitly killed. It remains in the process table briefly until the operating system removes it.\n\n### 6\\. **Zombie Process**\n\nA zombie process is a process that has completed its execution but still remains in the process table because its parent process has not yet read its exit status. It is called a \"zombie\" because it is no longer active or running, but it still exists as a placeholder in the system.\n\nEntry of child process remains in the process table until the parent process retrieves the exit status. During this time, the child process is referred to as a **zombie process**. This happens because the operating system keeps the process table entry to allow the parent to gather information about the terminated child.\n\nread more about - [Zombie Processes and their Prevention](https://www.geeksforgeeks.org/zombie-processes-prevention/)\n\n### 7\\. **Orphan Process**\n\nAn\u00a0orphan process\u00a0is a child process currently performing its execution, whose parent has finished its execution and has terminated, leaving the process table without waiting for the child process to finish. Orphan processes are still active and continue to run normally, but they no longer have their original parent process to monitor or control them.\n\nread more about - [Orphan Process](https://www.geeksforgeeks.org/orphan-processes)\n\n### 8\\. **Daemon Process**\n\nA **daemon process** is a background process that runs independently of any user control and performs specific tasks for the system. Daemons are usually started when the system starts, and they run until the system stops. A daemon process typically performs system services and is available at all times to more than one task or user. Daemon processes are started by the root user or root shell and can be stopped only by the root user.\n\nread more about - [Daemon Process](https://www.geeksforgeeks.org/daemon-processes)\n\n## Conclusion\n\nThe process table is a vital component of an operating system, helping to track and manage all active processes efficiently. Understanding the different process states and types, such as new, ready, running, waiting, terminated, zombie, orphan, and daemon processes, provides a clear picture of how the operating system handles multitasking and resource allocation. Each process type plays a unique role in the system's lifecycle, ensuring smooth execution of tasks and optimal use of system resources. By learning about these concepts, we gain insights into the inner workings of operating systems and their process management techniques.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=next_article)\n\n[States of a Process in Operating Systems](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=next_article)\n\n[B](https://www.geeksforgeeks.org/user/brijkan3mz4/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[brijkan3mz4](https://www.geeksforgeeks.org/user/brijkan3mz4/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n\n### Similar Reads\n\n[Different types of Processes in Process Table\\\\\n\\\\\n\\\\\nThe process table is a data structure used by the operating system to keep track of all processes. It is the collection of Program control Blocks (PCBs) which contains information about each process, such as its ID (PID), current state (e.g., running, ready, waiting), CPU usage, memory allocation, a\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/?ref=ml_lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=ml_lbp)\n[Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=ml_lbp)\n[Process Scheduler : Job and Process Status\\\\\n\\\\\n\\\\\nWhen the jobs moves through the system and makes progress, it changes it's states from HOLD to FINISH. When the job is being processed by the job manager and the process manager, it is always in one of these 5 states: HOLD: When a user submits a job and it accepts the job, the job is put on HOLD and\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/process-scheduler-job-and-process-status/?ref=ml_lbp)\n[Process states and Transitions in a UNIX Process\\\\\n\\\\\n\\\\\nProcess is an instance of a program in execution. A set of processes combined together make a complete program. There are two categories of processes in Unix, namely User processes : They are operated in user mode. Kernel processes : They are operated in kernel mode. Process States The lifetime of a\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/process-states-and-transitions-in-a-unix-process/?ref=ml_lbp)\n[Difference Between Process, Parent Process, and Child Process\\\\\n\\\\\n\\\\\nRunning program is a process. From this process, another process can be created. There is a parent-child relationship between the two processes. This can be achieved using a library function called fork(). fork() function splits the running process into two processes, the existing one is known as pa\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/difference-between-process-parent-process-and-child-process/?ref=ml_lbp)\n[Difference between Batch Processing System and Online Processing System\\\\\n\\\\\n\\\\\nPrerequisite - Types of Operating System 1. Batch Processing System : An Batch processing system handles large amounts of data which processed on a routine schedule. Processing occurs after the economic event occurs and is recorded. It requires fewer programming, hardware, and training resources. In\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-batch-processing-system-and-online-processing-system/?ref=ml_lbp)\n[Difference between Process Image and Multi Thread Process image\\\\\n\\\\\n\\\\\n1\\. Process Image : Process image is an executable file required during the execution of any process. It consists of several segments related to the execution of the process. Following are the contents of the process image - 1. Process Control Block 2. Stack 3. Data 4. Code 2. Multi Thread Process Im\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/difference-between-process-image-and-multi-thread-process-image/?ref=ml_lbp)\n[Concurrent Processes in Operating System\\\\\n\\\\\n\\\\\nConcurrent processing is a computing model in which multiple processors execute instructions simultaneously for better performance. Concurrent means, which occurs when something else happens. The tasks are broken into subtypes, which are then assigned to different processors to perform simultaneousl\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/concurrent-processes-in-operating-system/?ref=ml_lbp)\n[Program for FCFS CPU Scheduling \\| Set 2 (Processes with different arrival times)\\\\\n\\\\\n\\\\\nWe have already discussed FCFS Scheduling of processes with same arrival time. In this post, scenarios, when processes have different arrival times, are discussed. Given n processes with their burst times and arrival times, the task is to find the average waiting time and an average turn around time\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/program-for-fcfs-cpu-scheduling-set-2-processes-with-different-arrival-times/?ref=ml_lbp)\n\nLike\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=u2ii841omr7k)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=2gd2fy5y645c)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Different types of Processes in Process Table - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "keywords": "process table, data structure, Program Control Blocks, process states, New Process, Ready Process, Running Process, Blocked Process, Terminated Process, Zombie Process, Orphan Process, Daemon Process, operating system management, resource allocation, multitasking techniques",
        "ogUrl": "https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/",
        "ogDescription": "The process table is a crucial data structure in operating systems that tracks all processes and their states, including new, ready, running, waiting, terminated, zombie, orphan, and daemon processes, to ensure efficient management and resource allocation.",
        "description": "The process table is a crucial data structure in operating systems that tracks all processes and their states, including new, ready, running, waiting, terminated, zombie, orphan, and daemon processes, to ensure efficient management and resource allocation.",
        "scrapeId": "b2f9ad7a-41a4-496e-b1b0-212faa857204",
        "sourceURL": "https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/",
        "url": "https://www.geeksforgeeks.org/different-types-of-processes-in-process-table/",
        "topic": "operating systems"
      }
    },
    "id": 13
  },
  {
    "url": "https://www.geeksforgeeks.org/introduction-of-process-management/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/introduction-of-process-management/?type%3Darticle%26id%3D142463&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nProcess Table and Process Control Block (PCB)\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=next_article_top)\n\n# Introduction of Process Management\n\nLast Updated : 30 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n246 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nProcess Management for a single tasking or batch processing system is easy as only one [process](https://www.geeksforgeeks.org/process-in-operating-system/) is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multiple active processes can may share resources like memory and may communicate with each other. This further makes things complex as an Operating System has to do process synchronization.\n\nPlease remember the main advantages of having [multiprogramming](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/) are system responsiveness and better CPU utilization. We can run multiple processes in interleaved manner on a single CPU. For example, when the current process is getting busy with IO, we assign CPU to some other process.\n\n## **CPU-Bound vs I/O-Bound Processes**\n\nA CPU-bound process requires more CPU time or spends more time in the running state.\u00a0An I/O-bound process requires more I/O time and less CPU time. An I/O-bound process spends more time in the waiting state.\n\nProcess planning is an integral part of the process management operating system. It refers to the mechanism used by the operating system to determine which process to run next. The goal of process scheduling is to improve overall system performance by maximizing CPU utilization, minimizing throughput time, and improving system response time.\n\n## **Process Management Tasks**\n\nProcess management is a key part in operating systems with multi-programming or multitasking.\n\n- [Process Creation and Termination](https://www.geeksforgeeks.org/process-creation-and-deletions-in-operating-systems/) : Process creation involves creating a Process ID, setting up Process Control Block, etc. A process can be terminated either by the operating system or by the parent process. Process termination involves clearing all resources allocated to it.\n- [CPU Scheduling](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/) : In a multiprogramming system, multiple processes need to get the CPU. It is the job of Operating System to ensure smooth and efficient execution of multiple processes.\n- [Deadlock Handling](https://www.geeksforgeeks.org/handling-deadlocks/) : Making sure that system does not reach a state where two or processes cannot proceed due to a cycling dependency on each other.\n- [Inter-Process Communication](https://www.geeksforgeeks.org/inter-process-communication-ipc/) : Operating System provides facilities such as shared memory and message passing for cooperating processes to communicate.\n- [Process Synchronization](https://www.geeksforgeeks.org/introduction-of-process-synchronization/) : Process Synchronization is the coordination of execution of multiple processes in a multiprogramming system to ensure that they access shared resources (like memory) in a controlled and predictable manner.\n\n## Process Operations\n\nPlease remember a [process goes through different states](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/) before termination and these state changes require different operations on processes by an operating system. These operations include process creation, process scheduling, execution and killing the process. Here are the key process operations:\n\n![Process Operations](https://media.geeksforgeeks.org/wp-content/uploads/20240709113806/Screenshot-2024-07-09-113355.png)\n\nProcess Operations\n\n### Process Creation\n\nProcess creation in an operating system (OS) is the act of generating a new process. This new process is an instance of a program that can execute independently.\n\n### Scheduling\n\nOnce a process is ready to run, it enters the \u201cready queue.\u201d The scheduler\u2019s job is to pick a process from this queue and start its execution.\n\n### Execution\n\nExecution means the CPU starts working on the process. During this time, the process might:\n\n- Move to a waiting queue if it needs to perform an I/O operation.\n- Get blocked if a higher-priority process needs the CPU.\n\n### Killing the Process\n\nAfter the process finishes its tasks, the operating system ends it and removes its Process Control Block (PCB).\n\n## **Context Switching of Process**\n\nThe process of saving the context of one process and loading the context of another process is known as [Context Switching](https://www.geeksforgeeks.org/context-switch-in-operating-system). In simple terms, it is like loading and unloading the process from the running state to the ready state.\n\n### **When Does Context Switching Happen?**\n\nContext Switching Happen:\n\n- When a high-priority process comes to a ready state (i.e. with higher priority than the running process).\n- An Interrupt occurs.\n- User and kernel-mode switch (It is not necessary though)\n- Preemptive CPU scheduling is used.\n\n### **Context Switch vs Mode Switch**\n\nA mode switch occurs when the CPU privilege level is changed, for example when a system call is made or a fault occurs. The kernel works in more a privileged mode than a standard user task. If a user process wants to access things that are only accessible to the kernel, a mode switch must occur. The currently executing process need not be changed during a mode switch. A mode switch typically occurs for a process context switch to occur. Only the [kernel](https://www.geeksforgeeks.org/kernel-in-operating-system) can cause a context switch.\n\n## Process Scheduling Algorithms\n\nThe operating system can use different scheduling algorithms to schedule processes. Here are some \u00a0commonly used timing algorithms:\n\n- **First-Come, First-Served (FCFS):** This is the simplest scheduling algorithm, where the process is executed on a first-come, first-served basis. [FCFS](https://www.geeksforgeeks.org/first-come-first-serve-cpu-scheduling-non-preemptive) is non-preemptive, which means that once a process starts executing, it continues until it is finished or waiting for I/O.\n- **Shortest Job First (SJF):** [SJF](https://www.geeksforgeeks.org/sjf-full-form) is a proactive scheduling algorithm that selects the process with the shortest burst time. The burst time is the time a process takes to complete its execution. SJF minimizes the average waiting time of processes.\n- **Round Robin (RR):** [Round Robin](https://www.geeksforgeeks.org/round-robin-scheduling-with-different-arrival-times) is a proactive scheduling algorithm that reserves a fixed amount of time in a round for each process. If a process does not complete its execution within the specified time, it is blocked and added to the end of the queue. RR ensures fair distribution of CPU time to all processes and avoids starvation.\n- **Priority Scheduling:** This scheduling algorithm assigns priority to each process and the process with the highest priority is executed first. Priority can be set based on process type, importance, or resource requirements.\n- **Multilevel Queue:** This scheduling algorithm divides the ready queue into several separate queues, \u00a0each queue having a different priority. Processes are queued based on their priority, and each queue uses its own scheduling algorithm. This scheduling algorithm is useful in scenarios where different types of processes have different priorities.\n\n## Advantages of Process Management\n\n- **Running Multiple Programs:** Process management lets you run multiple applications at the same time, for example, listen to music while browsing the web.\n- **Process Isolation:** It ensures that different programs don\u2019t interfere with each other, so a problem in one program won\u2019t crash another.\n- **Fair Resource Use:** It makes sure resources like CPU time and memory are shared fairly among programs, so even lower-priority programs get a chance to run.\n- **Smooth Switching:** It efficiently handles switching between programs, saving and loading their states quickly to keep the system responsive and minimize delays.\n\n## Disadvantages of Process Management\n\n- **Overhead:** Process management uses system resources because the OS needs to keep track of various data structures and scheduling queues. This requires CPU time and memory, which can affect the system\u2019s performance.\n- **Complexity:** Designing and maintaining an OS is complicated due to the need for complex scheduling algorithms and resource allocation methods.\n- **Deadlocks:** To keep processes running smoothly together, the OS uses mechanisms like semaphores and mutex locks. However, these can lead to deadlocks, where processes get stuck waiting for each other indefinitely.\n- **Increased Context Switching:** In [multitasking](https://www.geeksforgeeks.org/difference-between-multitasking-multithreading-and-multiprocessing/) systems, the OS frequently switches between processes. Storing and loading the state of each process (context switching) takes time and computing power, which can slow down the system.\n\n## Conclusion\n\nIn conclusion, process management is a important function of an [operating system](https://www.geeksforgeeks.org/what-is-an-operating-system/), ensuring that multiple programs can run smoothly and efficiently. It involves creating, [scheduling](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/), and terminating processes, as well as managing resources and handling communication between processes. Effective process management optimizes the use of system resources, maintains system stability, and enhances the overall performance and responsiveness of the computer. Understanding and implementing robust process management strategies are crucial for maintaining an efficient and reliable computing environment.\n\n## GATE-CS-Questions on Process Management\n\n### **Q.1:** Which of the following need not necessarily be saved on a context switch between processes? (GATE-CS-2000)\n\n(A) General purpose registers\n\n(B) Translation lookaside buffer\n\n(C) Program counter\n\n(D) All of the above\n\n**Answer: (B)**\n\n> In a process context switch, the state of the first process must be saved somehow, so that when the scheduler gets back to the execution of the first process, it can restore this state and continue. The state of the process includes all the registers that the process may be using, especially the program counter, plus any other operating system-specific data that may be necessary. A translation look-aside buffer (TLB) is a CPU cache that memory management hardware uses to improve virtual address translation speed. A [TLB](https://www.geeksforgeeks.org/translation-lookaside-buffer-tlb-in-paging) has a fixed number of slots that contain page table entries, which map virtual addresses to physical addresses. On a context switch, some TLB entries can become invalid, since the virtual-to-physical mapping is different. The simplest strategy to deal with this is to completely flush the TLB.\n\n### **Q.2:** The time taken to switch between user and kernel modes of execution is t1 while the time taken to switch between two processes is t2. Which of the following is TRUE? (GATE-CS-2011)\n\n(A) t1 > t2\n\n(B) t1 = t2\n\n(C) t1 < t2\n\n(D) nothing can be said about the relation between t1 and t2.\n\n**Answer: (C)**\n\n> Process switching involves a mode switch. Context switching can occur only in kernel mode.\n\n## Frequently Asked Questions on Process Management \u2013 FAQs\n\n### Why process management is important?\n\n> Process management is important in an operating system because it ensures that all the programs running on your computer work smoothly and efficiently.\n\n### What is the main difference between process manager and memory manager?\n\n> Processes in the system are manage by processor manager and also it is responsible for the sharing of the CPU. whereas, memory in the system is managed by memory manager and it is responsible also for allocation and deallocation of memory, virtual memory management, etc.\n\n### What is the difference between a process and a program?\n\n> A program is a set of instructions stored on disk (passive), while a process is an instance of the program in execution (active). A single program can be associated with multiple processes.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=next_article)\n\n[Process Table and Process Control Block (PCB)](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n246\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [cpu-scheduling](https://www.geeksforgeeks.org/tag/cpu-scheduling/?ref=article_tag)\n- [Operating Systems-Process Management](https://www.geeksforgeeks.org/tag/operating-systems-process-management/?ref=article_tag)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike246\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/introduction-of-process-management/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=ipessjba4fv)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=16cnja7zviol)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Introduction of Process Management - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20240709113806/Screenshot-2024-07-09-113355.png",
        "keywords": "Process Management, Multiprogramming, Process Synchronization, CPU Scheduling, I/O-Bound Processes, Deadlock Handling, Inter-Process Communication, Process Creation and Termination, Context Switching, Scheduling Algorithms, First-Come First-Served, Shortest Job First, Round Robin Scheduling, Priority Scheduling, Process Isolation",
        "ogUrl": "https://www.geeksforgeeks.org/introduction-of-process-management/",
        "ogDescription": "Process management in operating systems involves creating, scheduling, and terminating processes while ensuring efficient CPU utilization and resource sharing among multiple active processes.",
        "description": "Process management in operating systems involves creating, scheduling, and terminating processes while ensuring efficient CPU utilization and resource sharing among multiple active processes.",
        "scrapeId": "93d69b7b-56e6-42fe-bddf-be16379c8d90",
        "sourceURL": "https://www.geeksforgeeks.org/introduction-of-process-management/",
        "url": "https://www.geeksforgeeks.org/introduction-of-process-management/",
        "topic": "operating systems"
      }
    },
    "id": 14
  },
  {
    "url": "https://www.geeksforgeeks.org/process-schedulers-in-operating-system/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?type%3Darticle%26id%3D142462&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nInter Process Communication (IPC)\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=next_article_top)\n\n# Process Schedulers in Operating System\n\nLast Updated : 02 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n325 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA process is the instance of a computer program in execution.\n\n- Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.\n- One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the CPU.\n- Process Schedulers are fundamental components of operating systems responsible for deciding the order in which processes are executed by the CPU. In simpler terms, they manage how the CPU allocates its time among multiple tasks or processes that are competing for its attention.\n\n## What is Process Scheduling?\n\nProcess scheduling is the activity of the process manager that handles the removal of the running process from the CPU and the selection of another process based on a particular strategy. Throughout its lifetime, a process moves between various [**scheduling queues**](https://www.geeksforgeeks.org/types-of-scheduling-queues/), such as the ready queue, waiting queue, or devices queue.\n\n![Process-Scheduler](https://media.geeksforgeeks.org/wp-content/uploads/20231201161329/Process-Scheduler.png)\n\nProcess scheduler\n\n## Categories of Scheduling\n\nScheduling falls into one of two categories:\n\n- **Non-Preemptive:** In this case, a process\u2019s resource cannot be taken before the process has finished running. When a running process finishes and transitions to a waiting state, resources are switched.\n- **Preemptive:** In this case, the OS can switch a process from running state to ready state. This switching happens because the CPU may give other processes priority and substitute the currently active process for the higher priority process.\n\nPlease refer [Preemptive vs Non-Preemptive Scheduling](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/) for details.\n\n## Types of Process Schedulers\n\nThere are three types of process schedulers:\n\n### **1\\. Long Term or Job Scheduler**\n\nLong Term Scheduler loads a process from disk to main memory for execution. The new process to the \u2018Ready State\u2019.\n\n- It mainly moves processes from [Job Queue](https://www.geeksforgeeks.org/types-of-scheduling-queues/) to [Ready Queue](https://www.geeksforgeeks.org/types-of-scheduling-queues/).\n- It controls the Degree of [Multi-programming](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/), i.e., the number of processes present in a ready state or in main memory at any point in time.\n- It is important that the long-term scheduler make a careful selection of both I/O and CPU-bound processes. I/O-bound tasks are which use much of their time in input and output operations while CPU-bound processes are which spend their time on the CPU. The job scheduler increases efficiency by maintaining a balance between the two.\n- In some systems, the long-term scheduler might not even exist. For example, in time-sharing systems like Microsoft Windows, there is usually no long-term scheduler. Instead, every new process is directly added to memory for the short-term scheduler to handle.\n- Slowest among the three (that is why called long term).\n\n### **2\\. Short-Term or CPU Scheduler**\n\nCPU Scheduler is responsible for selecting one process from the ready state for running (or assigning CPU to it).\n\n- STS (Short Term Scheduler) must select a new process for the CPU frequently to avoid starvation.\n- The CPU scheduler uses different [scheduling algorithms](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/) to balance the allocation of CPU time.\n- It picks a process from ready queue.\n- Its main objective is to make the best use of CPU.\n- It mainly calls [dispatcher](https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/).\n- Fastest among the three (that is why called Short Term).\n\nThe [dispatcher](https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/) is responsible for loading the process selected by the Short-term scheduler on the CPU (Ready to Running State). Context switching is done by the dispatcher only. A dispatcher does the following work:\n\n- Saving context (process control block) of previously running process if not finished.\n- Switching system mode to user mode.\n- Jumping to the proper location in the newly loaded program.\n\nTime taken by dispatcher is called dispatch latency or process context switch time.\n\n![scheduling_queues](https://media.geeksforgeeks.org/wp-content/uploads/20241231150439409400/scheduling_queues.webp)\n\nShort-Term Scheduler\n\n### **3\\. Medium-Term Scheduler**\n\nMedium Term Scheduler (MTS) is responsible for moving a process from memory to disk (or swapping).\n\n- It reduces the degree of multiprogramming (Number of processes present in main memory).\n- A running process may become suspended if it makes an I/O request. A suspended processes cannot make any progress towards completion. In this condition, to remove the process from memory and make space for other processes, the suspended process is moved to the secondary storage. This process is called swapping, and the process is said to be swapped out or rolled out. Swapping may be necessary to improve the process mix (of CPU bound and IO bound)\n- When needed, it brings process back into memory and pick up right where it left off.\n- It is faster than long term and slower than short term.\n\n![mts](https://media.geeksforgeeks.org/wp-content/uploads/20241231145333769989/mts.webp)\n\nMedium-Term Scheduler\n\n## **Some Other Schedulers**\n\n- **I/O Schedulers:** I/O schedulers are in charge of managing the execution of I/O operations such as reading and writing to discs or networks. They can use various algorithms to determine the order in which I/O operations are executed, such as [FCFS](https://www.geeksforgeeks.org/first-come-first-serve-cpu-scheduling-non-preemptive/) (First-Come, First-Served) or RR (Round Robin).\n- **Real-Time Schedulers:** In real-time systems, real-time schedulers ensure that critical tasks are completed within a specified time frame. They can prioritize and schedule tasks using various algorithms such as [EDF](https://www.geeksforgeeks.org/earliest-deadline-first-edf-cpu-scheduling-algorithm/) (Earliest Deadline First) or RM (Rate Monotonic).\n\n## Comparison Among Scheduler\n\n| Long Term Scheduler | Short Term Schedular | Medium Term Scheduler |\n| --- | --- | --- |\n| It is a job scheduler | It is a CPU scheduler | It is a process-swapping scheduler. |\n| The slowest scheduler. | Speed is the fastest among all of them. | Speed lies in between both short and long-term schedulers. |\n| It controls the degree of multiprogramming | It gives less control over how much multiprogramming is done. | It reduces the degree of multiprogramming. |\n| It is barely present or nonexistent in the time-sharing system. | It is a minimal time-sharing system. | It is a component of systems for time sharing. |\n| It can re-enter the process into memory, allowing for the continuation of execution. | It selects those processes which are ready to execute | It can re-introduce the process into memory and execution can be continued. |\n\n## Context Switching\n\nIn order for a process execution to be continued from the same point at a later time, context switching is a mechanism to store and restore the state or context of a CPU in the Process Control block. A context switcher makes it possible for multiple processes to share a single CPU using this method. A [multitasking operating system](https://www.geeksforgeeks.org/multitasking-operating-system/) must include context switching among its features.\n\nThe state of the currently running process is saved into the process control block when the scheduler switches the CPU from executing one process to another. The state used to set the computer, registers, etc. for the process that will run next is then loaded from its own PCB. After that, the second can start processing.\n\n![Context Switching](https://media.geeksforgeeks.org/wp-content/uploads/20230616113957/download-(1).png)\n\nContext Switching\n\nIn order for a process execution to be continued from the same point at a later time, context switching is a mechanism to store and restore the state or context of a CPU in the [Process Control block](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/). A context switcher makes it possible for multiple processes to share a single CPU using this method. A multitasking operating system must include context switching among its features.\n\n- Program Counter\n- Scheduling information\n- The base and limit register value\n- Currently used register\n- Changed State\n- I/O State information\n- Accounting information\n\n> Read more: [Context Switching in Operating System](https://www.geeksforgeeks.org/context-switch-in-operating-system/)\n\n## Conclusion\n\nProcess schedulers are the essential parts of operating system that manage how the CPU handles multiple tasks or processes. They ensure that processes are executed efficiently, making the best use of CPU resources and maintaining system responsiveness. By choosing the right process to run at the right time, schedulers help optimize overall system performance, improve user experience, and ensure fair access to CPU resources among competing processes.\n\n## Frequently Asked Questions on Process Scheduling \u2013 FAQs\n\n### **What is the job queue?**\n\n> _A job queue is like a waiting line where tasks are kept until the computer is ready to work on them. When you send a task to the computer, it goes into the queue, and the computer does them one by one, usually in the order they were added._\n\n### What is CPU scheduling in OS?\n\n> In an operating system, CPU scheduling refers to a technique that permits one process to utilize the CPU while keeping the other programs waiting or put on hold.\n\n### What is Inter-Process Communication (IPC)?\n\n> IPC is an operating system technique that facilitates data sharing, synchronization, and communication between processes.\n\n### What is PCB in OS?\n\n> The operating system uses a data structure called a Process Control Block (PCB) to store and handle process-related data.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=next_article)\n\n[Inter Process Communication (IPC)](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n325\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [cpu-scheduling](https://www.geeksforgeeks.org/tag/cpu-scheduling/?ref=article_tag)\n- [GATE CS](https://www.geeksforgeeks.org/tag/gate-cs-2/?ref=article_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike325\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1338184686.1740481449&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=769669935)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=iuj1g5d514)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=gglbl6tp3g94)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Process Schedulers in Operating System - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20231201161329/Process-Scheduler.png",
        "keywords": "Process Scheduling, Operating System, Process Scheduler, Non-Preemptive Scheduling, Preemptive Scheduling, Long Term Scheduler, Short Term Scheduler, Medium Term Scheduler, Context Switching, I/O Schedulers, Real-Time Schedulers, Degree of Multiprogramming, Process Control Block, CPU-bound processes, I/O-bound tasks",
        "ogUrl": "https://www.geeksforgeeks.org/process-schedulers-in-operating-system/",
        "ogDescription": "Process scheduling is a critical function of operating systems that manages the execution order of multiple processes on the CPU to optimize performance and resource allocation.",
        "description": "Process scheduling is a critical function of operating systems that manages the execution order of multiple processes on the CPU to optimize performance and resource allocation.",
        "scrapeId": "14923cd0-9863-4282-a9ff-9fa6c2c93593",
        "sourceURL": "https://www.geeksforgeeks.org/process-schedulers-in-operating-system/",
        "url": "https://www.geeksforgeeks.org/process-schedulers-in-operating-system/",
        "topic": "operating systems"
      }
    },
    "id": 15
  },
  {
    "url": "https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?type%3Darticle%26id%3D142464&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nCPU Scheduling Criteria\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=next_article_top)\n\n# CPU Scheduling in Operating Systems\n\nLast Updated : 14 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n177 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**CPU scheduling** is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a CPU scheduling time.\n\n- Maximize the CPU utilization\n- Minimize the response and waiting time of the process.\n\n## What is the Need for a CPU Scheduling Algorithm?\n\n**CPU scheduling** is the process of deciding which process will own the CPU to use while another process is suspended. The main function of CPU scheduling is to ensure that whenever the CPU remains idle, the OS has at least selected one of the processes available in the ready-to-use line.\n\nIn Multiprogramming, if the long-term scheduler selects multiple I/O binding processes then most of the time, the CPU remains idle. The function of an effective program is to improve resource utilization.\n\n## Terminologies Used in CPU Scheduling\n\n- **Arrival Time:** The time at which the process arrives in the ready queue.\n- **Completion Time:** The time at which the process completes its execution.\n- **Burst Time:** Time required by a process for CPU execution.\n- **Turn Around Time:** Time Difference between completion time and arrival time.\n\n> Turn Around Time = Completion Time \u00a0\u2013 \u00a0Arrival Time\n\n- **Waiting Time(W.T):** Time Difference between turn around time and burst time.\n\n> Waiting Time = Turn Around Time \u00a0\u2013 \u00a0Burst Time\n\n## Things to Take Care While Designing a CPU Scheduling Algorithm\n\nDifferent **CPU Scheduling algorithms** have different structures and the choice of a particular algorithm depends on a variety of factors.\n\n- **CPU Utilization:** The main purpose of any CPU algorithm is to keep the CPU as busy as possible. Theoretically, CPU usage can range from 0 to 100 but in a real-time system, it varies from 40 to 90 percent depending on the system load.\n- **Throughput:** The average CPU performance is the number of processes performed and completed during each unit. This is called throughput. The output may vary depending on the length or duration of the processes.\n- **Turn Round Time:** For a particular process, the important conditions are how long it takes to perform that process. The time elapsed from the time of process delivery to the time of completion is known as the conversion time. Conversion time is the amount of time spent waiting for memory access, waiting in line, using CPU, and waiting for I / O.\n- **Waiting Time:** The Scheduling algorithm does not affect the time required to complete the process once it has started performing. It only affects the waiting time of the process i.e. the time spent in the waiting process in the ready queue.\n- **Response Time:** In a collaborative system, turn around time is not the best option. The process may produce something early and continue to computing the new results while the previous results are released to the user. Therefore another method is the time taken in the submission of the application process until the first response is issued. This measure is called response time.\n\n## Different Types of CPU Scheduling Algorithms\n\nThere are mainly two types of scheduling methods:\n\n- **Preemptive Scheduling:** Preemptive scheduling is used when a process switches from running state to ready state or from the waiting state to the ready state.\n- **Non-Preemptive Scheduling:** Non-Preemptive scheduling is used when a process terminates , or when a process switches from running state to waiting state.\n\n![CPU-Scheduling](https://media.geeksforgeeks.org/wp-content/uploads/20241022164302652117/CPU-Scheduling.png)\n\nCPU Scheduling\n\nPlease refer [Preemptive vs Non-Preemptive Scheduling](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/) for details.\n\n## CPU Scheduling Algorithms\n\nLet us now learn about these CPU scheduling algorithms in operating systems one by one:\n\n- [FCFS \u2013 First Come, First Serve](https://www.geeksforgeeks.org/first-come-first-serve-cpu-scheduling-non-preemptive/)\n- [SJF \u2013 Shortest Job First](https://www.geeksforgeeks.org/shortest-job-first-or-sjf-cpu-scheduling/)\n- [SRTF \u2013 Shortest Remaining Time First](https://www.geeksforgeeks.org/shortest-remaining-time-first-preemptive-sjf-scheduling-algorithm/)\n- [Round Robin](https://www.geeksforgeeks.org/round-robin-scheduling-in-operating-system/)\n- [Priority Scheduling](https://www.geeksforgeeks.org/priority-scheduling-in-operating-system/)\n- [HRRN \u2013 Highest Response Ratio Next](https://www.geeksforgeeks.org/highest-response-ratio-next-hrrn-cpu-scheduling/)\n- [Multiple Queue Scheduling](https://www.geeksforgeeks.org/multilevel-feedback-queue-scheduling-mlfq-cpu-scheduling/)\n- [Multilevel Feedback Queue Scheduling](https://www.geeksforgeeks.org/multilevel-feedback-queue-scheduling-mlfq-cpu-scheduling/)\n\n## Comparison of CPU Scheduling Algorithms\n\nHere is a brief comparison between different CPU scheduling algorithms:\n\n| Algorithm | Allocation | Complexity | Average waiting time (AWT) | Preemption | Starvation | Performance |\n| --- | --- | --- | --- | --- | --- | --- |\n| FCFS | According to the arrival time of the processes, the CPU is allocated. | Simple and easy to implement | Large. | No | No | Slow performance |\n| SJF | Based on the lowest CPU burst time \u00a0(BT). | More complex than FCFS | Smaller than FCFS | No | Yes | Minimum Average Waiting Time |\n| SRTF | Same as SJF the allocation of the CPU is based on the lowest CPU burst time (BT). But it is preemptive. | More complex than FCFS | Depending on some measures e.g., arrival time, process size, etc | Yes | Yes | The preference is given to the short jobs |\n| RR | According to the order of the process arrives with fixed time quantum (TQ) | The complexity depends on Time Quantum size | Large as compared to SJF and Priority scheduling. | Yes | No | Each process has given a fairly fixed time |\n| Priority Pre-emptive | According to the priority. The bigger priority task executes first | This type is less complex | Smaller than FCFS | Yes | Yes | Well performance but contain a starvation problem |\n| Priority non-preemptive | According to the priority with monitoring the new incoming higher priority jobs | This type is less complex than Priority preemptive | Preemptive Smaller than FCFS | No | Yes | Most beneficial with batch systems |\n| MLQ | According to the process that resides in the bigger queue priority | More complex than the priority scheduling algorithms | Smaller than FCFS | No | Yes | Good performance but contain a starvation problem |\n| MFLQ | According to the process of a bigger priority queue. | It is the most Complex but its complexity rate depends on the TQ size | Smaller than all scheduling types in many cases | No | No | Good performance |\n\n## **Questions for Practice**\n\n### **Question:** Which of the following is false about SJF?\n\nS1: It causes minimum average waiting time\n\nS2: It can cause starvation\n\n(A) Only S1\n\n(B) Only S2\n\n(C) Both S1 and S2\n\n(D) Neither S1 nor S2\n\n**Answer:** (D) S1 is true SJF will always give minimum average waiting time. S2 is true SJF can cause starvation.\n\n### **Question:** Consider the following table of arrival time and burst time for three processes P0, P1 and P2.\n\n| Process | Arrival time | Burst Time |\n| P0 | 0 ms | 9 ms |\n| P1 | 1 ms | 4 ms |\n| P2 | 2 ms | 9 ms |\n\n**The pre-emptive shortest job first scheduling algorithm is used. Scheduling is carried out only at arrival or completion of processes. What is the average waiting time for the three processes?**\n\n(A) 5.0 ms\n\n(B) 4.33 ms\n\n(C) 6.33\n\n(D) 7.33\n\n**Solution:** (A)\n\nProcess P0 is allocated processor at 0 ms as there is no other process in the ready queue. P0 is preempted after 1 ms as P1 arrives at 1 ms and burst time for P1 is less than remaining time of P0. P1 runs for 4ms. P2 arrived at 2 ms but P1 continued as burst time of P2 is longer than P1. After P1 completes, P0 is scheduled again as the remaining time for P0 is less than the burst time of P2. P0 waits for 4 ms, P1 waits for 0 ms and P2 waits for 11 ms. So average waiting time is (0+4+11)/3 = 5.\n\n### **Question:** Consider the following set of processes, with the arrival times and the CPU-burst times given in milliseconds.\n\n| Process | Arrival time | Burst Time |\n| P1 | 0 ms | 5 ms |\n| P2 | 1 ms | 3 ms |\n| P3 | 2 ms | 3 ms |\n| P4 | 4 ms | 1 ms |\n\n**What is the average turnaround time for these processes with the preemptive Shortest Remaining Processing Time First algorithm ?**\n\n(A) 5.50\n\n(B) 5.75\n\n(C) 6.00\n\n(D) 6.25\n\nAnswer: (A)\n\n**Solution:** The following is Gantt Chart of execution\n\n| P1 | P2 | P4 | P3 | P1 |\n| 1 | 4 | 5 | 8 | 12 |\n\nTurn Around Time = Completion Time \u2013 Arrival Time Avg Turn Around Time\u00a0 =\u00a0 (12 + 3 + 6+\u00a0 1)/4 = 5.50\n\n### **Question:** An operating system uses the Shortest Remaining Time First (SRTF) process scheduling algorithm. Consider the arrival times and execution times for the following processes:\n\n| Process | Arrival time | Burst Time |\n| P1 | 20 ms | 0 ms |\n| P2 | 25 ms | 15 ms |\n| P3 | 10 ms | 30 ms |\n| P4 | 15 ms | 45 ms |\n\n### What is the total waiting time for process P2?\n\n(A) 5\n\n(B) 15\n\n(C) 40\n\n(D) 55\n\nAnswer (B)\n\n**Solution:** At time 0, P1 is the only process, P1 runs for 15 time units. At time 15, P2 arrives, but P1 has the shortest remaining time. So P1 continues for 5 more time units. At time 20, P2 is the only process. So it runs for 10 time units At time 30, P3 is the shortest remaining time process. So it runs for 10 time units At time 40, P2 runs as it is the only process. P2 runs for 5 time units. At time 45, P3 arrives, but P2 has the shortest remaining time. So P2 continues for 10 more time units. P2 completes its execution at time 55.\n\nTotal waiting time for P2\n\n= Completion time \u2013 (Arrival time + Execution time)\n\n= 55 \u2013 (15 + 25)\n\n= 15\n\n## Conclusion\n\nIn conclusion, CPU scheduling is a fundamental component of operating systems that plays a crucial role in managing how processes are allocated CPU time. Effective CPU scheduling ensures that the system runs efficiently, maintains fairness among processes, and meets various performance criteria. Different scheduling algorithms, such as First-Come, First-Served (FCFS), Shortest Job Next (SJN), Priority Scheduling, and Round Robin (RR), each have their own strengths and are suited to different types of workloads and system requirements.\n\n## Frequently Asked Questions on CPU Scheduling \u2013 FAQs\n\n### **Can CPU scheduling algorithms be combined?**\n\n> Yes, many operating systems implement hybrid scheduling algorithms that combine features from multiple algorithms to improve performance and responsiveness.\n\n### **What is context switching?**\n\n> Context switching is the process of storing the state of a currently running process and loading the state of another process. This allows multiple processes to share the CPU, but it can introduce overhead and reduce system efficiency.\n\n### **How does aging work in CPU scheduling?**\n\n> Aging is a technique used to prevent starvation in priority scheduling. It gradually increases the priority of a waiting process over time, ensuring that lower-priority processes eventually get CPU time.\n\n### **What is the role of the dispatcher in CPU scheduling?**\n\n> The dispatcher is a component of the operating system responsible for switching the CPU from one process to another.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=next_article)\n\n[CPU Scheduling Criteria](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n177\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [cpu-scheduling](https://www.geeksforgeeks.org/tag/cpu-scheduling/?ref=article_tag)\n- [GATE CS](https://www.geeksforgeeks.org/tag/gate-cs-2/?ref=article_tag)\n- [Operating Systems-CPU Scheduling](https://www.geeksforgeeks.org/tag/operating-systems-cpu-scheduling/?ref=article_tag)\n- [Volkswagen IT Services](https://www.geeksforgeeks.org/tag/volkswagen-it-services/?ref=article_tag)\n\n+1 More\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike177\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=352851852.1740481460&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=429726937)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=pnb7xokixpz1)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=hxcibuui3zhv)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "CPU Scheduling in Operating Systems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20241022164302652117/CPU-Scheduling.png",
        "keywords": "CPU scheduling, operating system, CPU utilization, response time, waiting time, CPU scheduling algorithms, Preemptive Scheduling, Non-Preemptive Scheduling, Shortest Job First, Round Robin, Priority Scheduling, throughput, turnaround time, context switching, aging in CPU scheduling",
        "ogUrl": "https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/",
        "ogDescription": "CPU scheduling is a critical operating system function that determines which process uses the CPU at any given time to optimize resource utilization and minimize waiting times through various algorithms like FCFS, SJF, and Round Robin.",
        "description": "CPU scheduling is a critical operating system function that determines which process uses the CPU at any given time to optimize resource utilization and minimize waiting times through various algorithms like FCFS, SJF, and Round Robin.",
        "scrapeId": "bfad7cb9-e480-47ba-8769-0b4a8a47601c",
        "sourceURL": "https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/",
        "url": "https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 16
  },
  {
    "url": "https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?type%3Darticle%26id%3D242731&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nCPU Scheduling in Operating Systems\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article_top)\n\n# Preemptive and Non-Preemptive Scheduling\n\nLast Updated : 03 Feb, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n193 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive.\n\nUnderstanding the differences between preemptive and non-preemptive scheduling helps in designing and choosing the right scheduling algorithms for various types of operating systems.\n\n## **Preemptive Scheduling**\n\nThe operating system can interrupt or preempt a running process to allocate CPU time to another process, typically based on priority or time-sharing policies. Mainly a process is switched from the running state to the ready state. Algorithms based on preemptive scheduling are [Round Robin (RR)](https://www.geeksforgeeks.org/program-round-robin-scheduling-set-1/), [Shortest Remaining Time First (SRTF)](https://www.geeksforgeeks.org/program-shortest-job-first-scheduling-set-2srtf-make-changesdoneplease-review/) , [Priority (preemptive version)](https://www.geeksforgeeks.org/program-for-preemptive-priority-cpu-scheduling/) , etc.\n\n> In the following example P2 is preempted at time 1 due to arrival of a higher priority process.\n\n![Preemptive Scheduling](https://media.geeksforgeeks.org/wp-content/uploads/pre-2.png)\n\nPreemptive Scheduling\n\n### **Advantages of Preemptive Scheduling**\n\n- Because a process may not monopolize the processor, it is a more reliable method and does not cause denial of service attack.\n- Each preemption occurrence prevents the completion of ongoing tas s.\n- The average response time is improved. Utilizing this method in a multi-programming environment is more advantageous.\n- Most of the modern operating systems (Window, Linux and macOS) implement Preemptive Scheduling.\n\n### **Disadvantages of Preemptive Scheduling**\n\n- More Complex to implement in Operating Systems.\n- Suspending the running process, change the context, and dispatch the new incoming process all take more time.\n- Might cause starvation : A low-priority process might be preempted again and again if multiple high-priority processes arrive.\n- Causes Concurrency Problems as processes can be stopped when they were accessing shared memory (or variables) or resources.\n\n## **Non-Preemptive Scheduling**\n\nIn non-preemptive scheduling, a running process cannot be interrupted by the operating system; it voluntarily relinquishes control of the CPU. In this scheduling, once the resources (CPU cycles) are allocated to a process, the process holds the CPU till it gets terminated or reaches a waiting state.\n\nAlgorithms based on non-preemptive scheduling are: [First Come First Serve](https://www.geeksforgeeks.org/first-come-first-serve-cpu-scheduling-non-preemptive/), [Shortest Job First (SJF basically non preemptive)](https://www.geeksforgeeks.org/program-shortest-job-first-sjf-scheduling-set-1-non-preemptive/) and [Priority (nonpreemptive version)](https://www.geeksforgeeks.org/operating-system-priority-scheduling-different-arrival-time-set-2/) , etc.\n\n> Below is the table and Gantt Chart according to the **First Come FIrst Serve (FCFS)** Algorithm: We can notice that every process finishes execution once it gets CPU.\n\n![Non Preemptive Scheduling](https://media.geeksforgeeks.org/wp-content/uploads/nonpre.png)\n\n### **Advantages of Non-Preemptive Scheduling**\n\n- It is easy to implement in an operating system. It was used in Windows 3.11 and early macOS.\n- It has a minimal scheduling burden.\n- Less computational resources are used.\n\n### **Disadvantages of Non-Preemptive Scheduling**\n\n- It is open to denial of service attack. A malicious process can take CPU forever.\n- Since we cannot implement round robin, the average response time becomes less.\n\n## **Differences Between Preemptive and Non-Preemptive Scheduling**\n\n- In Preemptive Scheduling, there is the overhead of [switching](https://www.geeksforgeeks.org/what-is-switching/) the process from the ready state to the running state, vise-verse, and maintaining the ready queue. Whereas in the case of non-preemptive scheduling has no overhead of switching the process from running state to ready state.\n- Preemptive scheduling attains flexibility by allowing the critical processes to access the CPU as they arrive in the ready queue, no matter what process is executing currently. Non-preemptive scheduling is called rigid as even if a critical process enters the ready queue the process running CPU is not disturbed.\n- Preemptive Scheduling has to maintain the integrity of shared data that\u2019s why it is cost associative which is not the case with Non-preemptive Scheduling.\n\n| Parameter | PREEMPTIVE SCHEDULING | NON-PREEMPTIVE SCHEDULING |\n| --- | --- | --- |\n| **Basic** | In this resources(CPU Cycle) are allocated to a process for a limited time. | Once resources(CPU Cycle) are allocated to a process, the process holds it till it completes its burst time or switches to waiting state |\n| **Interrupt** | Process can be interrupted in between. | Process can not be interrupted until it terminates itself or its time is up |\n| **Starvation** | If a process having high priority frequently arrives in the ready queue, a low priority process may starve | If a process with a long burst time is running CPU, then later coming process with less CPU burst time may starve |\n| **Overhead** | It has overheads of scheduling the processes | It does not have overheads |\n| **Flexibility** | flexible | Rigid |\n| **Cost** | Cost associated | No cost associated |\n| **Response Time** | Preemptive scheduling response time is less | Non-preemptive scheduling response time is high |\n| **Decision making** | Decisions are made by the scheduler and are based on priority and time slice allocation | Decisions are made by the process itself and the OS just follows the process\u2019s instructions |\n| **Process control** | The OS has greater control over the scheduling of processes | The OS has less control over the scheduling of processes |\n| **Overhead** | Higher overhead due to frequent context switching | Lower overhead since context switching is less frequent |\n| **Concurrency Overhead** | More as a process might be preempted when it was accessing a shared resource. | Less as a process is never preempted. |\n| **Examples** | Examples of preemptive scheduling are Round Robin and Shortest Remaining Time First | Examples of non-preemptive scheduling are First Come First Serve and Shortest Job First |\n\n## Preemptive and Non-Preemptive Scheduling \u2013 FAQ\u2019s\n\n### How is priority determined in preemptive scheduling?\n\n> Preemptive scheduling systems often assign priority levels to tasks or processes. The priority can be determined based on factors like the nature of the task, its importance, or its deadline. Higher-priority tasks are given precedence and are allowed to execute before lower-priority tasks.\n\n### **What happens in non-preemptive scheduling if a task does not yield the CPU?**\n\n> In non-preemptive scheduling, if a task does not voluntarily yield the CPU, it can lead to a situation called a \u201cstarvation\u201d or \u201cdeadlock\u201d where other tasks are unable to execute. To avoid such scenarios, it\u2019s important to ensure that tasks have mechanisms to release the CPU when necessary, such as waiting for I/O operations or setting maximum execution times.\n\n### **Which scheduling method is better for real-time systems?**\n\n> Preemptive scheduling is generally better for real-time systems because it allows high-priority tasks to be addressed immediately, meeting the time-sensitive requirements of such systems.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article)\n\n[CPU Scheduling in Operating Systems](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=next_article)\n\n[A](https://www.geeksforgeeks.org/user/Ankit_Bisht/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Ankit\\_Bisht](https://www.geeksforgeeks.org/user/Ankit_Bisht/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n193\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Technical Scripter](https://www.geeksforgeeks.org/category/technical-scripter/?ref=article_category)\n- [Operating Systems-CPU Scheduling](https://www.geeksforgeeks.org/tag/operating-systems-cpu-scheduling/?ref=article_tag)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n\n+1 More\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike193\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1358771997.1740481470&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1959713805)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=i8ftdpluyl0z)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=s28mi2maoo9w)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password",
      "metadata": {
        "title": "Preemptive and Non-Preemptive Scheduling - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/pre-2.png",
        "keywords": "CPU scheduling, preemptive scheduling, non-preemptive scheduling, scheduling algorithms, Round Robin, Shortest Remaining Time First, Priority scheduling, denial of service attack, average response time, multi-programming environment, context switching, starvation, real-time systems, operating system performance, flexibility in scheduling",
        "ogUrl": "https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/",
        "ogDescription": "Efficient CPU scheduling in operating systems is crucial for performance, with preemptive scheduling allowing process interruption for priority management, while non-preemptive scheduling requires processes to voluntarily yield control, each having distinct advantages and disadvantages.",
        "description": "Efficient CPU scheduling in operating systems is crucial for performance, with preemptive scheduling allowing process interruption for priority management, while non-preemptive scheduling requires processes to voluntarily yield control, each having distinct advantages and disadvantages.",
        "scrapeId": "f564be46-21a2-41b7-93b0-eb85dc075fcd",
        "sourceURL": "https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/",
        "url": "https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/",
        "topic": "operating systems"
      }
    },
    "id": 17
  },
  {
    "url": "https://www.geeksforgeeks.org/measure-time-spent-context-switch/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/measure-time-spent-context-switch/?type%3Darticle%26id%3D189854&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nContext Switching in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article_top)\n\n# Measure the time spent in context switch?\n\nLast Updated : 03 May, 2023\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n34 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA _Context switch_ is a time spent between two processes (i.e., bringing a waiting process into execution and sending an executing process into a waiting-for state). This happens in multitasking. The operating system must bring the state information if waiting for the process into memory and save the state information of the currently running process.\n\nIn order to solve this problem, we would like to record the timestamps of the first and last instructions of the swapping processes. The context switch time is the difference between the two processes.\n\n**Let\u2019s take an example:** Assume there are only two processes, P1 and P2.\u00a0P1 is executing and P2 is waiting for execution. At some point, the operating system must swap P1 and P2, let\u2019s assume it happens at the nth instruction of P1. If t(x, k) indicates the timestamp in microseconds of the kth instruction of process x, then the context switch would take t(2, 1) \u2013 t(1, n).\n\nAnother issue is that swapping is governed by the scheduling algorithm of the operating system and there may be many kernel-level threads that are also doing context switches. Other processes could be contending for the CPU or the kernel handling interrupts. The user does not have any control over these extraneous context switches. For instance, if at time t(1, n) the kernel decides to handle an interrupt, then the context switch time would be overstated.\n\nIn order to avoid these obstacles, we must construct an environment such that after P1 executes, the task scheduler immediately selects P2 to run. This may be accomplished by constructing a data channel, such as a pipe between P1 and P2.\n\nThat is, let\u2019s allow P1 to be the initial sender and P2 to be the receiver. Initially, P2 is blocked(sleeping) as it awaits the data token. When P1 executes, it delivers the data token over the data channel to P2 and immediately attempts to read the response token. A context switch results and the task scheduler must select another process to run. Since P2 is now in a ready-to-run state, it is a desirable candidate to be selected by the task scheduler for execution. When P2 runs, the role of P1 and P2 are swapped. P2 is now acting as the sender and P1 as the blocked receiver.\n\n**To summaries \u2013**\n\n1. P2 blocks awaiting data from P1\n2. P1 marks the starting time.\n3. P1 sends a token to P2.\n4. P1 attempts to read a response token from P2. This induces a context switch.\n5. P2 is scheduled and receives the token.\n6. P2 sends a response token to P1.\n7. P2 attempts to read a response token from P1. This induces a context switch.\n8. P1 is scheduled and receives the token.\n9. P1 marks the end time.\n\nThe key is that the delivery of a data token induces a context switch. Let Td and Tr be the time it takes to deliver and receive a data token, respectively, and let Tc be the amount of time spent in a context switch. In step 2, P1 records the timestamp of the delivery of the token, and at step 9, it records the timestamp of the response. The amount of time elapsed, T, between these events, may be expressed by:\n\n```\n T = 2 * (Td + Tc + Tr)\n```\n\n**This formula arises because of the following events:**\n\n- P1 sends the token (3)\n- CPU context switches (4)\n- P2 receives it (5)\n- P2 then sends the response token (6)\n- CPU context switches (7)\n- and finally, P1 receives it (8)\n\n### Advantages:\n\n1. **Performance optimization:** Measuring the time spent in context switch can help identify performance bottlenecks in the operating system. By analyzing the data collected, developers can optimize the operating system to reduce the time spent in context switch, leading to better system performance.\n2. **Process scheduling:** Measuring the time spent in context switch can help the operating system determine the best way to schedule processes for execution. By understanding how long it takes to switch between processes, the operating system can make more informed decisions about which processes to execute next.\n3. **Debugging**: Measuring the time spent in context switch can be useful for debugging purposes. Developers can use the data collected to identify issues in the operating system\u2019s implementation of context switching, such as slow or inefficient code.\n4. **Benchmarking:** Measuring the time spent in context switch can be used to benchmark different operating systems or different versions of the same operating system. By comparing the data collected, developers can determine which operating system performs better in terms of context switching.\n\n### Disadvantages:\n\n1. **Overhead:** Measuring the time spent in context switch can introduce additional overhead into the system, potentially impacting system performance. The code used to measure the time spent in context switch must be carefully optimized to minimize this overhead.\n2. **Inaccurate data:** Measuring the time spent in context switch can be challenging, as it is subject to many variables that can affect the accuracy of the data collected. For example, the data collected may be influenced by other system processes running in the background or hardware interrupts occurring during the measurement.\n3. **Platform-specific:** The time spent in context switch can vary depending on the platform and hardware used, making it difficult to compare results across different systems.\n4. **Limited scope:** Measuring the time spent in context switch provides only a limited view of system performance. Other factors, such as memory usage, disk I/O, and network latency, also contribute to overall system performance and must be considered when evaluating system performance.\n\n**FAQ:**\n\n**What is a context switch in computer science?**\n\nThe fundamental operation of an operating system scheduler is to perform a context switch which entails saving the state of a process currently running and restoring the state of a previously blocked or waiting process, all with the purpose of enabling multiple processes to utilize one processor.\n\n**Why is context switching necessary?**\n\nSwitching context is a requirement for the operating system to run different processes concurrently despite having only one CPU. By promptly alternating between these processes, the operating system is capable of presenting the impression of parallel execution, a vital feature for contemporary multi-tasking systems.\n\n**How does context switching affect system performance?**\n\nThe performance of a system can be greatly affected by context switching. This is due to the resources and time required to save and restore process states which results in overheads. Nevertheless, the impact that context switching has on a system is variable and dependent on different aspects such as the algorithm of the scheduler, the number of running processes as well as the size of their context.\n\n**How can context switching be optimized for better performance?**\n\nDevelopers have several strategies at their disposal for improving context switching. These include minimizing the amount of data that must be saved and restored, cutting down on the frequency of context switches, and optimizing scheduler algorithms to prioritize processes based on their execution demands.\n\n**Can context switching lead to deadlocks or other synchronization issues?**\n\nPoor implementation of context switching can often result in deadlocks or synchronization problems. Consider a scenario where two processes are both dependent on each other\u2019s resources; if a context switch takes place between the two, it could lead to a deadlock. Therefore, developers must be meticulous in designing their synchronization mechanisms and must take great care to ensure they are properly implemented in order to prevent such issues.\n\nGATE CS Practice Questions\n\n- [GATE-CS-2006 \\| Question 85](https://www.geeksforgeeks.org/gate-gate-cs-2006-question-6/)\n- [GATE CS 1998 \\| Question 52](https://www.geeksforgeeks.org/aptitude-gate-cs-1998-question-52/)\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article)\n\n[Context Switching in Operating System](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article)\n\n[B](https://www.geeksforgeeks.org/user/brahmanisai/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[brahmanisai](https://www.geeksforgeeks.org/user/brahmanisai/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n34\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Measure the time spent in context switch?\\\\\n\\\\\n\\\\\nA Context switch is a time spent between two processes (i.e., bringing a waiting process into execution and sending an executing process into a waiting-for state). This happens in multitasking. The operating system must bring the state information if waiting for the process into memory and save the\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/measure-time-spent-context-switch/?ref=ml_lbp)\n[Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=ml_lbp)\n[Timing Constraints in Real-time System\\\\\n\\\\\n\\\\\nTiming constraints is a vital attribute in real-time systems. Timing constraints decides the total correctness of the result in real-time systems. The correctness of results in real-time system does not depends only on logical correctness but also the result should be obtained within the time constr\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/timing-constraints-in-real-time-system/?ref=ml_lbp)\n[Difference between Thread Context Switch and Process Context Switch\\\\\n\\\\\n\\\\\nA context switch is the process where the operating system switches the CPU's attention from one task to another, ensuring multitasking. This allows multiple processes or threads to share the CPU efficiently. In a thread context switch, the CPU switches between threads within the same process. Since\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/difference-between-thread-context-switch-and-process-context-switch/?ref=ml_lbp)\n[Difference between Swapping and Context Switching\\\\\n\\\\\n\\\\\nPrograms are sets of instructions designed to accomplish specific tasks. Similarly, a process refers to a runtime instance of a computer program. During the execution of a program, several threads may be running in parallel. Single-threaded processes refer to the thread itself as the process.1. Cont\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-swapping-and-context-switching/?ref=ml_lbp)\n[Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=ml_lbp)\n[Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=ml_lbp)\n[Least Slack Time (LST) scheduling Algorithm in real-time systems\\\\\n\\\\\n\\\\\nLeast Slack Time (LST) is a dynamic priority-driven scheduling algorithm used in real-time systems. In LST, all the tasks in the system are assigned some priority according to their slack time. The task which has the least slack time has the highest priority and vice versa. Priorities to the tasks a\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/least-slack-time-lst-scheduling-algorithm-in-real-time-systems/?ref=ml_lbp)\n[Classification of Events in Real-time System\\\\\n\\\\\n\\\\\nEvents in a real-time System are the actions or the result of the actions that are generated by the system or the environment. An event in a real-tie system is either a instantaneous or may have certain duration. The classification of events in a real-time system is based on different theories. Once\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/classification-of-events-in-real-time-system/?ref=ml_lbp)\n[Difference between \u00e2\u20ac\u0153Dispatch Latency\u00e2\u20ac\u009d and \u00e2\u20ac\u0153Context Switch\u00e2\u20ac\u009d in operating systems\\\\\n\\\\\n\\\\\nA process in a multitasking system is brought from the secondary memory to the main memory and sometimes switched back to the secondary memory. Thus, there are several states of a process throughout its lifecycle. Context Switching is an important part of that whole lifecycle. Dispatcher is a module\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/difference-between-dispatch-latency-and-context-switch-in-operating-systems/?ref=ml_lbp)\n\nLike34\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/measure-time-spent-context-switch/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1208323982.1740481480&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=259625363)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=668tbcflc1mk)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=uirq4n26ugh7)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Measure the time spent in context switch? - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "http://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200-1.png",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/measure-time-spent-context-switch/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "66e5c4da-7663-4989-9266-9d47981392a4",
        "sourceURL": "https://www.geeksforgeeks.org/measure-time-spent-context-switch/",
        "url": "https://www.geeksforgeeks.org/measure-time-spent-context-switch/",
        "topic": "operating systems"
      }
    },
    "id": 18
  },
  {
    "url": "https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/?type%3Darticle%26id%3D197553&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nDifference between Process and Thread\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/difference-between-process-and-thread/?ref=next_article_top)\n\n# Difference between dispatcher and scheduler\n\nLast Updated : 28 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n101 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**Scheduler and the Dispatcher** are the two most important terms in an operating system. which are critical in the management of processes as well as the execution of processes. While the scheduler chooses processes that must be run, the dispatcher is in charge of passing these processes to the CPU. Despite the interrelation that might be observed when comparing the roles of these elements, they serve different direct purposes, which are aimed at optimizing CPU usage. A scheduler and a dispatcher are two important concepts that are used in operating systems when it comes to multitasking and executing processes.\n\n## What is a Scheduler?\n\nSchedulers are a special type of operating system software that manages process scheduling in a variety of ways. Its main function is to select the jobs that are to be submitted to the system and decide which process will run.\n\n**There are three types of schedulers, which are as follows:**\n\n1. **Long-Term (job) Scheduler:** Due to the small size of the main memory, initially all the programs are stored in secondary memory. When they are loaded or stored in main memory, then they are known as processes. The long-term scheduler decides how many processes will remain in the ready queue. So, in simple words, the long-term scheduler decides the degree of multiprogramming of the system.\n2. **Medium-Term Scheduler:** Often a running process needs an I/0 operation that does not require CPU time. That is why when a process needs I/O operation during its execution, the operating system sends that process to a blocked queue. When that process completes its I/O operation, then it is again shifted to the ready [queue](https://www.geeksforgeeks.org/queue-data-structure/) . All these decisions are taken by the medium-term scheduler. Medium-term scheduling is part of swapping.\n3. **Short-Term (CPU) Scheduler:** When there are many processes initially in the main memory, all are present in the ready queue. Out of all these processes, only one is selected for execution. This decision is in the hands of the short-term scheduler or CPU scheduler.\n\n### Advantages of a Scheduler\n\n- **Optimized CPU Utilization:** It helps to check that the CPU is loaded to the maximum possible extent by frequently choosing tasks to execute.\n- **Fair Process Handling:** Demands a fixed amount of CPU time for each process like FCFS, SJF, and RR in order to offer equal opportunity for processes in the system.\n- **Process Management:** Oversees the processes in different states (for instance, ready, blocked, or running).\n\n### Disadvantages of a Scheduler\n\n- **Complexity:** They may also not be well suited for all system designs and can also be very hard to actually schedule.\n- **Overhead:** There are some drawbacks in maintaining the scheduler, as the latter could present some overhead to the system, and this could be especially so in a real-time environment where decisions require to be made rapidly.\n\n![Scheduler](https://media.geeksforgeeks.org/wp-content/uploads/22_.png)\n\n## **What is a Dispatcher?**\n\nDispatcher is a special type of program whose work starts after the scheduler. When the scheduler completes its task of selecting a process, it is the dispatcher that moves the process to the queue it needs to go to.\n\nThe dispatcher is the module that hands over control of the [CPU](https://www.geeksforgeeks.org/what-are-the-functions-of-a-cpu/) to the process that has been selected by the short-term scheduler.\n\n**The following things happen in this function:**\n\n1. **switching context:** Cores the current process and restores the state of the process to be run next.\n2. **Switching to User Mode:** Makes sure that it runs in the user mode and not kernel mode, which is for security and privilege break-\n3. **Jumps to the correct location in the user program** from where the program can be restarted.\n\n### Advantages of a Dispatcher\n\n- **Fast Process Switching:** Evaluates circumstances where a procedure shifts from the ready queue to the execution phase in a way that causes less delay.\n- **Efficient CPU Time Allocation:** Is important in making sure that processes receive CPU time, hence giving the necessary support for multitasking to occur.\n\n### Disadvantages of a Dispatcher\n\n- **Dispatch Latency:** Although the time taken is considerably small, this lateness in dispatching the requests can slow down the system.\n- **Dependent on Scheduler:** The dispatcher hence cannot work on her own since she is reliant on the decisions made by the scheduler.\n\n## **Difference Between Dispatcher and Scheduler**\n\nConsider a situation, where various processes are residing in the ready queue waiting to be executed. The CPU cannot execute all of these processes simultaneously, so the operating system has to choose a particular process on the basis of the scheduling algorithm used. So, this procedure of selecting a process among various processes is done by **the scheduler**. Once the scheduler has selected a process from the queue, the **dispatcher** comes into the picture, and it is the dispatcher who takes that process from the ready queue and moves it into the running state. Therefore, the scheduler gives the dispatcher an ordered list of processes which the dispatcher moves to the CPU over time.\n\n**Example \u2013** There are 4 processes in the ready queue, P1, P2, P3, P4; Their arrival times are t0, t1, t2, t3 respectively. A First in First out ( [FIFO](https://www.geeksforgeeks.org/fifo-principle-of-queue/)) scheduling algorithm is used. Because P1 arrived first, the scheduler will decide it is the first process that should be executed, and the dispatcher will remove P1 from the ready queue and give it to the CPU. The scheduler will then determine P2 to be the next process that should be executed, so when the dispatcher returns to the queue for a new process, it will take P2 and give it to the CPU. This continues in the same way for P3, and then P4. ![Dispatcher](https://media.geeksforgeeks.org/wp-content/uploads/333.png)\n\n| Properties | DISPATCHER | SCHEDULER |\n| --- | --- | --- |\n| **Definition** | Dispatcher is a module that gives control of CPU to the process selected by short term scheduler | Scheduler is something which selects a process among various processes |\n| **Types** | There are no different types in dispatcher.It is just a code segment. | There are 3 types of scheduler i.e. Long-term, Short-term, Medium-term |\n| **Dependency** | Working of dispatcher is dependent on scheduler.Means dispatcher have to wait until scheduler selects a process. | Scheduler works independently. It works immediately when needed |\n| **Algorithm** | Dispatcher has no specific algorithm for its implementation | Scheduler works on various algorithm such as FCFS, SJF, RR etc. |\n| **Time Taken** | The time taken by dispatcher is called dispatch latency. | Time taken by scheduler is usually negligible.Hence we neglect it. |\n| **Functions** | Dispatcher is also responsible for:Context Switching, Switch to user mode, Jumping to proper location when process again restarted | The only work of scheduler is selection of processes. |\n| **Tasks** | Dispatcher allocates \u00a0the CPU to the process selected by the short-time scheduler. | Scheduler performs three task. Job scheduling (Long-term scheduler), [CPU scheduling](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/) (Short-term scheduler) and swapping (Medium-term scheduler). |\n| **Purpose** | To move the process from the ready queue to the CPU | To select the process and decide which process to run |\n| **Execution time** | It takes a very short execution time | It takes longer execution time than dispatcher |\n| **Interaction** | The dispatcher works with the CPU and the selected process | The scheduler works with the ready queue and the dispatcher |\n\n## Conclusion\n\nThe scheduler and the dispatcher play very important roles in AOS in that they help the operating system to coordinate the processes well. The scheduler is the one that determines what processes are executed and when, while the dispatcher is the one that swaps out those processes into the CPU. It is important to understand process or task workload and how the two are different when getting to know how an operating system deals with such processes effectively. Together, they protect the system from getting slow and unproductive and make sure that it is able to handle multitasking.\n\n## Difference Between Dispatcher and Scheduler -FAQs\n\n### What is the primary difference between a scheduler and a dispatcher?\n\n> While the scheduler chooses which processes should be run at any instance of time, the dispatcher is in charge of moving the said processes to the CPU to be run.\n\n### What are the types of schedulers?\n\n> Schedulers are divided into three types: Memory management also has three-level schedulers that are the long-term scheduler, the medium-term scheduler, and the short-term scheduler.\n\n### What is dispatch latency?\n\n> Dispatch latency is the amount of time taken by the dispatcher to switch a process from the\u2019ready queue\u2019 to \u2018CPU\u2019.\n\n### Can the dispatcher work without the scheduler?\n\n> However, the dispatcher is dependent on the scheduler for choosing the processes. It only controls the transfer of these processes to the CPU.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/difference-between-process-and-thread/?ref=next_article)\n\n[Difference between Process and Thread](https://www.geeksforgeeks.org/difference-between-process-and-thread/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/ulmznubnobhiz0z1djao)](https://www.geeksforgeeks.org/user/himanshukumarpatel/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[himanshukumarpatel](https://www.geeksforgeeks.org/user/himanshukumarpatel/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n101\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Difference between dispatcher and scheduler\\\\\n\\\\\n\\\\\nScheduler and the Dispatcher are the two most important terms in an operating system. which are critical in the management of processes as well as the execution of processes. While the scheduler chooses processes that must be run, the dispatcher is in charge of passing these processes to the CPU. De\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/?ref=ml_lbp)\n[Difference between Process and Thread\\\\\n\\\\\n\\\\\nProcess and threads are the basic components in OS. Process is a program under execution whereas a thread is part of process. Threads allows a program to perform multiple tasks simultaneously, like downloading a file while you browse a website or running animations while processing user input. A pro\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/difference-between-process-and-thread/?ref=ml_lbp)\n[Difference between Short-Term and Medium-Term Scheduler\\\\\n\\\\\n\\\\\nPrerequisite \u00e2\u20ac\u201c Process Schedulers 1. Short-Term Scheduler : Short term scheduler is also known as CPU scheduler. Its main objective is to boost the system performance according to certain set criteria. Short term scheduler helps to select the group of processes that are ready to execute and allocate\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/difference-between-short-term-and-medium-term-scheduler/?ref=ml_lbp)\n[Difference between Table-driven and Cyclic Scheduling\\\\\n\\\\\n\\\\\nClock-driven scheduling is the scheduling algorithm in which the scheduling points are determined by the clock interrupts. Clock-driven scheduling is of two types: 1. Table-driven Scheduling : In table-driven scheduling, the start timing of all tasks are precomputed and it is stored in a table at th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/difference-between-table-driven-and-cyclic-scheduling/?ref=ml_lbp)\n[Difference between Process and User Level Thread\\\\\n\\\\\n\\\\\n1\\. Process : Process is an activity of executing a program. Process is of two types - User process and System process. Process control block controls the operation of the process. 2. User Level Thread : On the basis of level, threads are of two types: User level Kernel Level User level thread is a t\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/difference-between-process-and-user-level-thread/?ref=ml_lbp)\n[Difference between Long-Term and Medium-Term Scheduler\\\\\n\\\\\n\\\\\nPrerequisite - Process Schedulers Long-Term Scheduler: Long-term schedulers are called job schedulers. The long-term scheduler controls the programs that are selected within the system for processing. In this, programs are found during a queue and therefore the best job is chosen as per the need it\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/difference-between-long-term-and-medium-term-scheduler/?ref=ml_lbp)\n[Difference between FCFS and Priority CPU scheduling\\\\\n\\\\\n\\\\\n1\\. First Come First Served (FCFS) : First Come First Served (FCFS) is the simplest type of algorithm. It is a non-preemptive algorithm i.e. the process cannot be interrupted once it starts executing. The FCFS is implemented with the help of a FIFO queue. The processes are put into the ready queue in\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-fcfs-and-priority-cpu-scheduling/?ref=ml_lbp)\n[Difference Between Thread ID and Thread Handle\\\\\n\\\\\n\\\\\nPrerequisite: Thread in Operating System Thread Id is a long positive integer that is created when the thread was created. During the entire lifecycle of a thread, the thread ID is unique and remains unchanged. It can be reused when the thread is terminated. The Thread get\\_id() method can be studied\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-thread-id-and-thread-handle/?ref=ml_lbp)\n[Difference between Routine and Process\\\\\n\\\\\n\\\\\nIn this article, we are going to discuss the difference between routine and process. Before differentiating between both, first, let us understand what they are. Routine :In computer programming, a routine is nothing but a sequence of code, intended for the execution of user programs and input/outpu\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/difference-between-routine-and-process/?ref=ml_lbp)\n[Difference between Long-Term and Short-Term Scheduler\\\\\n\\\\\n\\\\\nLong-Term Scheduler is also known as Job Scheduler. Long-term scheduler regulates the programs which are selected to system for processing. In this the programs are setup in the queue and as per the requirement the best one job is selected and it takes the processes from job pool. It regulates the D\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/difference-between-long-term-and-short-term-scheduler/?ref=ml_lbp)\n\nLike101\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=5o5b8nikhyaw)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=19d6gsf81pq)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Difference between dispatcher and scheduler - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/22_.png",
        "keywords": "Scheduler, Dispatcher, Process Management, Long-Term Scheduler, Medium-Term Scheduler, Short-Term Scheduler, CPU Utilization, Process Scheduling, Context Switching, Dispatch Latency, Multitasking, Operating System Coordination, Fair Process Handling, I/O Operation Management",
        "ogUrl": "https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/",
        "ogDescription": "Schedulers select processes for execution in an operating system, while dispatchers transfer those selected processes to the CPU for running.",
        "description": "Schedulers select processes for execution in an operating system, while dispatchers transfer those selected processes to the CPU for running.",
        "scrapeId": "bb3876cd-92c3-49e6-a4e4-7df6064a55b5",
        "sourceURL": "https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/",
        "url": "https://www.geeksforgeeks.org/difference-between-dispatcher-and-scheduler/",
        "topic": "operating systems"
      }
    },
    "id": 19
  },
  {
    "url": "https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/?type%3Darticle%26id%3D153943&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nIntroduction of System Call\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=next_article_top)\n\n# Starvation and Aging in Operating Systems\n\nLast Updated : 28 Dec, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n112 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nStarvation occurs when a process in the OS runs out of resources because other processes are using it. This is a problem with resource management while Operating systems employ aging as a scheduling approach to keep them from starving. It is one of the most common scheduling algorithms in batch systems. Each process is assigned a priority. The process with the highest priority is to be executed first and so on. Here we will be discussing a major problem related to priority scheduling and its solution.\n\n## What is Starvation?\n\n**Starvation** or indefinite blocking is a phenomenon associated with the Priority scheduling algorithms, in which a process ready for the CPU (resources) can wait to run indefinitely because of low priority. In a heavily loaded computer system, a steady stream of higher-priority processes can prevent a low-priority process from ever getting the CPU. There have been rumors that in 1967 Priority Scheduling was used in IBM 7094 at MIT, and they found a low-priority process that had not been submitted till 1973.\n\n| Process | Burst Time | Priority |\n| --- | --- | --- |\n| P1 | 4 | 10 |\n| P2 | 7 | 1 |\n| P3 | 10 | 2 |\n\n**Gantt Chart**\n\n| P1 | P3 | P2 |\n| --- | --- | --- |\n| 0 | 4 | 14 | 21 |\n\nAs we see in the above example process has higher priority than other processes getting CPU earlier. We can think of a scenario in which only one process has very low priority (for example 127) and we are giving another process with high priority, this can lead to indefinitely waiting for the process for CPU which has priority, which leads to [**Starvation**](https://www.geeksforgeeks.org/difference-between-deadlock-and-starvation-in-os/). Further, we have also discussed the solution to starvation.\n\n## Reasons of Starvation\n\n- There are not enough resources available to everyone during starvation, and processes begin to lose priority.\n- If higher-priority processes continuously monopolize the processor, a lower-priority operation might have to wait indefinitely. As a result of the low-priority programs not communicating with anything, Starvation cannot result in a standstill.\n- A process may have to wait a lengthy period if a random selection of processes is employed due to non-selection.\n- Since starvation is a failsafe way to break a deadlock, the way it impacts the system as a whole is far more crucial.\n- Starvation may result if a process is never given the resources it needs to be executed due to poor resource allocation decisions.\n\n## How to Control Starvation?\n\n- Resource distribution can be handled by an impartial manager. In an effort to prevent starvation, this resource manager allocates resources equitably.\n- It is best to avoid choosing processes at random when allocating processors or resources because this promotes starvation.\n- The principles of Ageing, where a process\u2019s priority increases the longer it waits to prevent starvation, should be included in the resource allocation priority system.\n\n### Differences Between Deadlock and Starvation in OS\n\n- [Deadlock](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/) occurs when none of the processes in the set is able to move ahead due to occupancy of the required resources by some other process as shown in the figure below, on the other hand, Starvation occurs when a process waits for an indefinite period of time to get the resource it requires.\n- Another name for deadlock is **Circular Waiting** . Another name for starvation is **Lived lock** .\n- When deadlock occurs no process can make progress, while in starvation apart from the victim process other processes can progress or proceed.\n\n> **Solution to Starvation:** Aging\n\n## What is Aging?\n\nAging is a technique of gradually increasing the priority of processes that wait in the system for a long time. Operating systems employ ageing as a scheduling approach to keep them from starving. It is essentially giving long-waiting processes more importance one step at a time. It makes it more likely that they will obtain the tools they need to carry out. As a result, there is less chance of famine. In the event that the waiting process is not selected for execution, a higher priority is assigned to it. It guarantees that lengthy-waiting procedures are given an equal opportunity to complete. Ageing is combined with other scheduling techniques to avoid famine. Take [round-robin](https://www.geeksforgeeks.org/difference-between-priority-scheduling-and-round-robin-rr-cpu-scheduling/) or priority scheduling, for instance. It supports process scheduling by preserving a balance between immediate and long-term fairness. For example, if priority range from 127(low) to 0(high), we could increase the priority of a waiting process by 1 Every 15 minutes. Eventually, even a process with an initial priority of 127 would take no more than 32 hours for the priority 127 process to age to a priority-0 process.\n\n![Aging](https://media.geeksforgeeks.org/wp-content/uploads/startvationAndAging.jpg)\n\n## Uses of Aging\n\n- In priority-based scheduling algorithms, the main purpose of ageing is to avoid resource hunger. Ageing guarantees that even lower-priority tasks eventually get an opportunity to execute by progressively raising the priority of waiting processes. This keeps resource distribution equitable and keeps no process from experiencing an endless resource shortage.\n- Ageing contributes to the equitable allocation of resources among processes. The operating system makes sure that every process, regardless of priority at first, receives its fair amount of resources and CPU time by gradually increasing the priority of waiting processes. Ageing Improves System Responsiveness. Ageing reduces the likelihood of some low-priority processes being held up in the wait line for an extended amount of time. They are provided opportunities to execute as their priority progressively rise, which improves system performance.\n- As people age, they become more balanced in terms of their processes\u2019 levels of importance. It keeps lower-priority tasks from being entirely overlooked by preventing scenarios in which processes with drastically varying priorities coexist in the system.\n- Ageing is very helpful in optimising long-term performance. It avoids hunger and [priority inversion](https://www.geeksforgeeks.org/difference-between-priority-inversion-and-priority-inheritance/) , which can have a detrimental effect on the efficiency and throughput of the system as a whole.\n- Ageing Facilitates the System\u2019s Ability to Adjust to Changing Workloads and Varying Process Requirements.\n\n## **Limitation of Aging**\n\n- **Increased complexity:** Aging requires additional overhead to periodically adjust the priorities of waiting processes, which can increase the overall complexity of the scheduling algorithm.\n- **Overhead:** Frequent priority adjustments may introduce additional overhead, which can reduce the overall efficiency of the [scheduling algorithm.](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/)\n- **Unpredictable behavior:** Aging can lead to unpredictable behavior if the aging rate is not set appropriately. If the aging rate is too slow, it may take a long time for low-priority processes to receive the required resources. On the other hand, if the aging rate is too fast, it can cause high-priority processes to starve.\n- **Unfairness:** Aging can also be unfair to newly arrived processes as it prioritizes long waiting processes over new ones. This can lead to a situation where new processes are starved of resources while long waiting processes continue to receive them.\n\n## Frequently Asked Question on Starvation and Aging \u2013 FAQs\n\n### How is starvation avoided in OS?\n\n> Ageing is a method that raises the priority level of low-priority\u00a0processes over a certain amount of time in order to prevent starvation in the operating system. As a result, both the high priority processes and the lowest priority processes will be able to continue existing and operating.\n\n### **Can aging lead to priority inversion issues?**\n\n> Yes aging leads to [priority inversion problem](https://www.geeksforgeeks.org/priority-inversion-what-the-heck/)\n\n### **Can aging be used with real-time systems?**\n\n> [Real-time systems](https://www.geeksforgeeks.org/real-time-systems/) can benefit from the use of ageing, but its implementation must be carefully planned to save processing cost and guarantee that problems with priority inversion do not interfere with real-time requirements.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=next_article)\n\n[Introduction of System Call](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=next_article)\n\n![https://media.geeksforgeeks.org/auth/avatar.png](https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png)\n\nGeeksforGeeks\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n112\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Introduction to Operating System\\\\\n\\\\\n\\\\\nAn operating system acts as an intermediary between the user of a computer and computer hardware. In short its an interface between computer hardware and user. The purpose of an operating system is to provide an environment in which a user can execute programs conveniently and efficiently. An operat\\\\\n\\\\\n15 min read](https://www.geeksforgeeks.org/introduction-of-operating-system-set-1/?ref=lbp)\n[Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n[Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n[Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n[Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=lbp)\n[CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n[Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n[Starvation and Aging in Operating Systems\\\\\n\\\\\n\\\\\nStarvation occurs when a process in the OS runs out of resources because other processes are using it. This is a problem with resource management while Operating systems employ aging as a scheduling approach to keep them from starving. It is one of the most common scheduling algorithms in batch syst\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/?ref=lbp)\n[Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\nLike112\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=gt0eoqprxd8l)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=7tf22gix7s32)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Starvation and Aging in Operating Systems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/startvationAndAging.jpg",
        "keywords": "Starvation, Priority Scheduling, Resource Management, Indefinite Blocking, Aging Technique, Process Scheduling, Resource Allocation, Deadlock vs Starvation, Equitable Resource Distribution, System Responsiveness, Priority Inversion, Scheduling Algorithms, Long-term Performance, Operating System Optimization",
        "ogUrl": "https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/",
        "ogDescription": "Starvation in operating systems occurs when low-priority processes wait indefinitely for CPU resources due to higher-priority processes monopolizing them, and aging is a technique used to gradually increase the priority of these waiting processes to prevent starvation.",
        "description": "Starvation in operating systems occurs when low-priority processes wait indefinitely for CPU resources due to higher-priority processes monopolizing them, and aging is a technique used to gradually increase the priority of these waiting processes to prevent starvation.",
        "scrapeId": "b2d2e045-0cec-4b7b-b2e9-4037ffa0f11f",
        "sourceURL": "https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/",
        "url": "https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/",
        "topic": "operating systems"
      }
    },
    "id": 20
  },
  {
    "url": "https://www.geeksforgeeks.org/inter-process-communication-ipc/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/inter-process-communication-ipc/?type%3Darticle%26id%3D142479&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nContext Switching in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article_top)\n\n# Inter Process Communication (IPC)\n\nLast Updated : 08 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n195 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. **Inter-Process Communication or IPC** is a mechanism that allows processes to communicate. It helps processes synchronize their activities, share information, and avoid conflicts while accessing shared resources.\n\n## Types of Process\n\nLet us first talk about types of types of processes.\n\n- **Independent process:** An independent process is not affected by the execution of other processes. Independent processes are processes that do not share any data or resources with other processes. No inte-process communication required here.\n- **Co-operating process:** Interact with each other and share data or resources. A co-operating process can be affected by other executing processes.Inter-process communication (IPC) is a mechanism that allows processes to communicate with each other and synchronize their actions. The communication between these processes can be seen as a method of cooperation between them.\n\n## Inter Process Communication\n\nInter process communication (IPC) allows different programs or processes running on a computer to share information with each other. IPC allows processes to communicate by using different techniques like sharing memory, sending messages, or using files. It ensures that processes can work together without interfering with each other. [Cooperating processes](https://www.geeksforgeeks.org/cooperating-process-in-operating-system/) require an Inter Process Communication (IPC) mechanism that will allow them to exchange data and information.\n\nThe two fundamental models of Inter Process Communication are:\n\n- Shared Memory\n- Message Passing\n\nFigure 1 below shows a basic structure of communication between processes via the shared memory method and via the message passing method.\n\nAn operating system can implement both methods of communication. First, we will discuss the shared memory methods of communication and then message passing. Communication between processes using shared memory requires processes to share some variable, and it completely depends on how the programmer will implement it. One way of communication using shared memory can be imagined like this: Suppose process1 and process2 are executing simultaneously, and they share some resources or use some information from another process. Process1 generates information about certain computations or resources being used and keeps it as a record in shared memory. When process2 needs to use the shared information, it will check in the record stored in shared memory and take note of the information generated by process1 and act accordingly. Processes can use shared memory for extracting information as a record from another process as well as for delivering any specific information to other processes.\n\nFigure 1 below shows a basic structure of communication between processes via the shared memory method and via the message passing method.\n\n![Process in memory](https://media.geeksforgeeks.org/wp-content/uploads/1-76.png)\n\nLet\u2019s discuss an example of communication between processes using the shared memory method.\n\n## Methods in Inter process Communication\n\nInter-Process Communication refers to the techniques and methods that allow processes to exchange data and coordinate their activities. Since processes typically operate independently in a multitasking environment, IPC is essential for them to communicate effectively without interfering with one another. There are several methods of IPC, each designed to suit different scenarios and requirements. These methods include shared memory, message passing, semaphores, and signals, etc.\n\nTo read more refer \u2013 [methods of Inter Process Communication](https://www.geeksforgeeks.org/methods-in-interprocess-communication/)\n\n## **Role of Synchronization in IPC**\n\nIn IPC, synchronization is essential for controlling access to shared resources and guaranteeing that processes do not conflict with one another. Data consistency is ensured and problems like race situations are avoided with proper synchronization.\n\n## Advantages of IPC\n\n- Enables processes to communicate with each other and share resources, leading to increased efficiency and flexibility.\n- Facilitates coordination between multiple processes, leading to better overall system performance.\n- Allows for the creation of distributed systems that can span multiple computers or networks.\n- Can be used to implement various [synchronization](https://www.geeksforgeeks.org/introduction-of-process-synchronization/) and communication protocols, such as semaphores, pipes, and sockets.\n\n## Disadvantages of IPC\n\n- Increases system complexity, making it harder to design, implement, and debug.\n- Can introduce security vulnerabilities, as processes may be able to access or modify data belonging to other processes.\n- Requires careful management of system resources, such as memory and [CPU](https://www.geeksforgeeks.org/difference-between-cpu-and-gpu/) time, to ensure that IPC operations do not degrade overall system performance.\n\nCan lead to data inconsistencies if multiple processes try to access or modify the same data at the same time.\n- Overall, the advantages of IPC outweigh the disadvantages, as it is a necessary mechanism for modern operating systems and enables processes to work together and share resources in a flexible and efficient manner. However, care must be taken to design and implement IPC systems carefully, in order to avoid potential security vulnerabilities and performance issues.\n\n## Conclusion\n\nA fundamental component of contemporary operating systems, IPC allows processes to efficiently coordinate operations, share resources, and communicate. IPC is beneficial for developing adaptable and effective systems, despite its complexity and possible security threats.\n\n## Frequently Asked Questions on IPC \u2013 FAQs\n\n### What is IPC?\n\n> Process communication and synchronization are made possible via IPC, which promotes resource sharing and teamwork.\n\n### Why is synchronization important in IPC?\n\n> Data consistency and conflict avoidance are ensured via synchronization when different processes access common resources.\n\n### What are the main methods of IPC?\n\n> Message passing and shared memory are the two main techniques. While message passing permits communication without the need for shared data, shared memory permits processes to share data directly.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article)\n\n[Context Switching in Operating System](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=next_article)\n\nD\n\nDurgesh Pandey\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n195\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike195\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/inter-process-communication-ipc/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=lr9ny4goyrw0)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=q3y0hkvugpub)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Inter Process Communication (IPC) - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/1-76.png",
        "keywords": "Inter-Process Communication, IPC mechanisms, co-operating processes, independent processes, shared memory, message passing, process synchronization, data consistency, resource sharing, system performance, communication protocols, semaphores, security vulnerabilities, multitasking environment, process coordination",
        "ogUrl": "https://www.geeksforgeeks.org/inter-process-communication-ipc/",
        "ogDescription": "Inter-Process Communication (IPC) is a crucial mechanism that enables processes to communicate, synchronize, and share resources effectively in modern operating systems, utilizing methods such as shared memory and message passing.",
        "description": "Inter-Process Communication (IPC) is a crucial mechanism that enables processes to communicate, synchronize, and share resources effectively in modern operating systems, utilizing methods such as shared memory and message passing.",
        "scrapeId": "e84e1ff6-466f-47a9-a383-2fca5e6cc9db",
        "sourceURL": "https://www.geeksforgeeks.org/inter-process-communication-ipc/",
        "url": "https://www.geeksforgeeks.org/inter-process-communication-ipc/",
        "topic": "operating systems"
      }
    },
    "id": 21
  },
  {
    "url": "https://www.geeksforgeeks.org/introduction-of-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/introduction-of-process-synchronization/?type%3Darticle%26id%3D142465&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nRace Condition Vulnerability\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=next_article_top)\n\n# Introduction of Process Synchronization\n\nLast Updated : 10 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n295 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**Process Synchronization** is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other.\n\nThe main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other and to prevent the possibility of inconsistent data due to concurrent access. To achieve this, various synchronization techniques such as semaphores, monitors, and critical sections are used.\n\nIn a multi-process system, synchronization is necessary to ensure data consistency and integrity, and to avoid the risk of deadlocks and other synchronization problems. Process synchronization is an important aspect of modern operating systems, and it plays a crucial role in ensuring the correct and efficient functioning of multi-process systems.\n\nOn the basis of synchronization, [processes](https://www.geeksforgeeks.org/process-in-operating-system/) are categorized as one of the following two types:\n\n- **Independent Process**: The execution of one process does not affect the execution of other processes.\n- **Cooperative Process**: A process that can affect or be affected by other processes executing in the system.\n\nProcess synchronization problem arises in the case of Cooperative processes also because resources are shared in Cooperative processes.\n\n## Process Synchronization\n\nProcess Synchronization is the coordination of execution of multiple processes in a multi-process system to ensure that they access shared resources in a controlled and predictable manner. It aims to resolve the problem of race conditions and other synchronization issues in a concurrent system.\n\n![imgk](https://media.geeksforgeeks.org/wp-content/uploads/20250106145117057425/imgk.png)\n\nLack of Synchronization in [Inter Process Communication](https://www.geeksforgeeks.org/inter-process-communication-ipc/) Environment leads to following problems:\n\n1. **Inconsistency:** When two or more processes access shared data at the same time without proper synchronization. This can lead to conflicting changes, where one process\u2019s update is overwritten by another, causing the data to become unreliable and incorrect.\n2. **Loss of Data:** Loss of data occurs when multiple processes try to write or modify the same shared resource without coordination. If one process overwrites the data before another process finishes, important information can be lost, leading to incomplete or corrupted data.\n3. **Deadlock:** Lack of Synchronization leads to [Deadlock](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/) which means that two or more processes get stuck, each waiting for the other to release a resource. Because none of the processes can continue, the system becomes unresponsive and none of the processes can complete their tasks.\n\n## Types of Process Synchronization\n\nThe two primary type of process Synchronization in an Operating System are:\n\n1. **Competitive:** Two or more processes are said to be in Competitive Synchronization if and only if they compete for the accessibility of a shared resource.\n\n**Lack of Synchronization among Competing process** may lead to either Inconsistency or Data loss.\n2. **Cooperative:** Two or more processes are said to be in Cooperative Synchronization if and only if they get affected by each other i.e. execution of one process affects the other process.\n\n**Lack of Synchronization among Cooperating process** may lead to Deadlock.\n\n**Example:**\n\nLet consider a Linux code:\n\n```\n>>ps/grep \"chrome\"/wc\n```\n\n- ps command produces list of processes running in linux.\n- grep command find/count the lines form the output of the ps command.\n- wc command counts how many words are in the output.\n\nTherefore, three processes are created which are ps, grep and wc. grep takes input from ps and wc takes input from grep.\n\nFrom this example, we can understand the concept of cooperative processes, where some processes produce and others consume, and thus work together. This type of problem must be handled by the operating system, as it is the manager.\n\n## Conditions That Require Process Synchronization\n\n1. **Critical Section:** It is that part of the program where shared resources are accessed. Only one process can execute the critical section at a given point of time. If there are no shared resources, then no need of synchronization mechanisms.\n2. **Race Condition:** It is a situation wherein processes are trying to access the critical section and the final result depends on the order in which they finish their update. Process Synchronization mechanism need to ensure that instructions are being executed in a required order only.\n3. **Pre Emption:** Preemption is when the operating system stops a running process to give the CPU to another process. This allows the system to make sure that important tasks get enough CPU time. This is important as mainly issues arise when a process has not finished its job on shared resource and got preempted. The other process might end up reading an inconsistent value if process synchronization is not done.\n\n## What is Race Condition?\n\nA [race condition](https://www.geeksforgeeks.org/race-condition-vulnerability/) is a situation that may occur inside a critical section. This happens when the result of multiple process/thread execution in the critical section differs according to the order in which the threads execute. Race conditions in critical sections can be avoided if the critical section is treated as an atomic instruction. Also, proper thread synchronization using locks or atomic variables can prevent race conditions.\n\nLet us consider the following example.\n\n- There is a shared variable balance with value 100.\n- There are two processes deposit(10) and withdraw(10). The deposit process does balance = balance + 10 and withdraw process does balance = balance \u2013 10.\n- Suppose these processes run in an interleaved manner. The deposit() fetches the balance as 100, then gets preempted.\n- Now withdraw() get scheduled and makes balance 90.\n- Finally deposit is rescheduled and makes the value as 110. This value is not correct as the balance after both operations should be 100 only\n\nWe can not notice that the different segments of two processes running in different order would give different values of balance.\n\n## Critical Section Problem\n\nA [critical section](https://www.geeksforgeeks.org/g-fact-70/) is a code segment that can be accessed by only one process at a time. The critical section contains shared variables that need to be synchronized to maintain the consistency of data variables. Sothe critical section problem means designing a way for cooperative processes to access shared resources without creating data inconsistencies.\n\nIn the above example, the operations that involve balance variable should be put in critical sections of both deposit and withdraw.\n\n![critical section problem](https://www.geeksforgeeks.org/wp-content/uploads/gq/2015/06/critical-section-problem.png)\n\nIn the entry section, the process requests for entry in the **Critical Section.**\n\nAny solution to the critical section problem must satisfy three requirements:\n\n- **Mutual Exclusion**: If a process is executing in its critical section, then no other process is allowed to execute in the critical section.\n- **Progress**: If no process is executing in the critical section and other processes are waiting outside the critical section, then only those processes that are not executing in their remainder section can participate in deciding which will enter the critical section next, and the selection cannot be postponed indefinitely.\n- **Bounded Waiting**: A bound must exist on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\n\nCritical section Problem \u2013 [Solutions](https://www.geeksforgeeks.org/solution-to-critical-section-problem/)\n\n## Classical IPC Problems\n\nVarious classical Inter-Process Communication (IPC) problems include:\n\n- Producer Consumer Problem\n- Readers-Writers Problem\n- Dining Philosophers Problem\n\n## Producer Consumer Problem\n\nThe Producer-Consumer Problem is a classic example of process synchronization. It describes a situation where two types of processes producers and consumersshare a common, limited-size buffer or storage.\n\n- **Producer**: A producer creates or generates data and puts it into the shared buffer. It continues to produce data as long as there is space in the buffer.\n- **Consumer**: A consumer takes data from the buffer and uses it. It continues to consume data as long as there is data available in the buffer.\n\nThe challenge arises because both the producer and the consumer need to access the same buffer at the same time, and if they do not properly synchronize their actions, issues can occur.\n\n### Key Problems in the Producer-Consumer Problem:\n\n1. **Buffer Overflow**: If the producer tries to add data when the buffer is full, there will be no space for new data, causing the producer to be blocked.\n2. **Buffer Underflow**: If the consumer tries to consume data when the buffer is empty, it has nothing to consume, causing the consumer to be blocked.\n\n[Producer-Consumer Problem \u2013 Solution](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/) (using Semaphores)\n\n## Readers-Writers Problem\n\nThe Readers-Writers Problemis a classic synchronization problem where multiple processes are involved in reading and writing data from a shared resource. This problem typically involves two types of processes:\n\n- **Readers**: These processes only read data from the shared resource and do not modify it.\n- **Writers**: These processes modify or write data to the shared resource.\n\nThe challenge in the Reader-Writer problem is to allow multiple readers to access the shared data simultaneously without causing issues. However, only **one writer** should be allowed to write at a time, and no reader should be allowed to read while a writer is writing. This ensures the integrity and consistency of the data.\n\n[Readers-Writers Problem \u2013 Solution](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/) (Readers Preference Solution)\n\n[Readers-Writers Problem \u2013 Solution](https://www.geeksforgeeks.org/readers-writers-problem-writers-preference-solution/) (Writers Preference Solution)\n\n## Dining Philosophers Problem\n\nThe [**Dining Philosophers Problem**](https://www.geeksforgeeks.org/dining-philosophers-problem/) is a well-known example that shows the difficulties of sharing resources and preventing deadlock when multiple processes are involved. The problem involves a set of philosophers sitting around a dining table. Each philosopher thinks deeply, but when they are hungry, they need to eat. However, to eat, they must pick up two forks from the table, one from the left and one from the right.\n\n### Problem Setup:\n\n- There are **five philosophers** sitting around a circular table.\n- Each philosopher has a plate of food in front of them and a fork to their left and right.\n- A philosopher needs both forks to eat. If they pick up a fork, they hold it until they finish eating.\n- After eating, they put down both forks and start thinking again.\n\nThe problem arises when multiple philosophers try to pick up forks at the same time, which can lead to a situation where each philosopher holds one fork but cannot get the second fork, leading to a **deadlock**. Additionally, there\u2019s a risk of **starvation** if some philosophers are continually denied the opportunity to eat.\n\n[Dining Philosophers Problem \u2013 Solution](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/) (using Semaphores)\n\n## Advantages of Process Synchronization\n\n- Ensures data consistency and integrity\n- Avoids race conditions\n- Prevents inconsistent data due to concurrent access\n- Supports efficient and effective use of shared resources\n\n## Disadvantages of Process Synchronization\n\n- Adds overhead to the system\n- This can lead to performance degradation\n- Increases the complexity of the system\n- Can causedeadlock if not implemented properly.\n\n## Conclusion\n\nConcurrent computing requires process synchronization to coordinate numerous processes in a multi-process system to regulate and forecast resource access. It addresses race situations and data inconsistency, essential for data integrity. Semaphores and [Peterson\u2019s](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/) solution are used for synchronization. Synchronization is necessary for data consistency but adds complexity and performance overheads, making correct implementation and management vital for multi-process systems.\n\n## Frequently Asked Questions on Process Synchronization \u2013 FAQs\n\n### **Why is process synchronization important?**\n\n> Process synchronization is important It\u2019s crucial to prevent issues like race conditions and deadlocks, which can lead to unpredictable behavior or system crashes in multitasking environments.\n\n### **What is the main objective of process synchronization in a multi-process system?**\n\n> A multi-process system\u2019s process synchronization goal is to govern and predict shared resource access. It prevents race situations and other synchronization concerns to maintain data integrity and avoid deadlocks.\n\n### **What are the key requirements that any solution to the critical section problem must satisfy?**\n\n> The crucial section problem solution must meet three criteria:\n>\n> - **Mutual Exclusion:** Only one process can run in its critical section.\n> - **Progress:** Only processes not in their remainder sections can select the next process to enter the critical section if no process is in it and others are waiting.\n> - **Bounded Waiting:** The number of times a process can enter its crucial phase after making a request must be limited before it is granted.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=next_article)\n\n[Race Condition Vulnerability](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n295\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike295\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/introduction-of-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1553500090.1740481521&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1057272143)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=sr4pellpz4qn)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=2ndtpbwtsad0)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Introduction of Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20250106145117057425/imgk.png",
        "keywords": "Process Synchronization, Concurrent Access, Data Consistency, Critical Section, Race Condition, Deadlock Prevention, Inter-Process Communication, Producer-Consumer Problem, Readers-Writers Problem, Cooperative Processes, Mutual Exclusion, Synchronization Techniques, Semaphore Usage, Operating System Management, Resource Sharing",
        "ogUrl": "https://www.geeksforgeeks.org/introduction-of-process-synchronization/",
        "ogDescription": "Process synchronization is essential in multi-process systems to ensure safe and consistent access to shared resources, preventing issues like race conditions, deadlocks, and data inconsistency.",
        "description": "Process synchronization is essential in multi-process systems to ensure safe and consistent access to shared resources, preventing issues like race conditions, deadlocks, and data inconsistency.",
        "scrapeId": "b1d62ffb-93d5-49e5-bb3b-967724687d34",
        "sourceURL": "https://www.geeksforgeeks.org/introduction-of-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/introduction-of-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 22
  },
  {
    "url": "https://www.geeksforgeeks.org/g-fact-70/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/g-fact-70/?type%3Darticle%26id%3D9180&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nMutual Exclusion in Synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=next_article_top)\n\n# Critical Section in Synchronization\n\nLast Updated : 14 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n221 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA **critical section** is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time.\n\n- The critical section contains shared variables or resources that need to be synchronized to maintain the consistency of data variables.\n- In simple terms, a critical section is a group of instructions/statements or regions of code that need to be executed [atomically](https://www.geeksforgeeks.org/g-fact-57/), such as accessing a resource (file, input or output port, global data, etc.) In\u00a0concurrent\u00a0programming, if one process tries to change the value of shared data at the same time as another thread tries to read the value (i.e., data race across threads), the result is unpredictable. The access to such shared variables (shared memory, shared files, shared port, etc.) is to be synchronized.\n\nFew programming languages have built-in support for synchronization. It is critical to understand the importance of race conditions while writing kernel-mode programming (a device driver, kernel thread, etc.) since the programmer can directly access and modify kernel data structures\n\nAlthough there are some **properties that should be followed if any code in the critical section**\n\n1. **Mutual Exclusion:** If process Pi is executing in its critical section, then no other processes can be executing in their critical sections.\n2. **Progress:** If no process is executing in its critical section and some processes wish to enter their critical sections, then only those processes that are not executing in their remainder sections can participate in deciding which will enter its critical section next, and this selection cannot be postponed indefinitely.\n3. **Bounded Waiting:** There exists a bound, or limit, on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted.\n\nTwo general approaches are used to handle critical sections:\n\n1. **Preemptive kernels**: A preemptive kernel allows a process to be preempted while it is running in kernel mode.\n2. **Non preemptive kernels**: A non-preemptive kernel does not allow a process running in kernel mode to be preempted. A kernel-mode process will run until it exists in kernel mode, blocks, or voluntarily yields control of the CPU. A non-preemptive kernel is essentially free from race conditions on kernel data structures, as only one process is active in the kernel at a time.\n\n## Critical Section Problem\n\nThe use of critical sections in a program can cause a number of issues, including:\n\n- **Deadlock:** When two or more threads or processes wait for each other to release a critical section, it can result in a deadlock situation in which none of the threads or processes can move. Deadlocks can be difficult to detect and resolve, and they can have a significant impact on a program\u2019s performance and reliability.\n\n- **Starvation:** When a thread or process is repeatedly prevented from entering a critical section, it can result in starvation, in which the thread or process is unable to progress. This can happen if the critical section is held for an unusually long period of time, or if a high-priority thread or process is always given priority when entering the critical section.\n\n- **Overhead:** When using critical sections, threads or processes must acquire and release locks or semaphores, which can take time and resources. This may reduce the program\u2019s overall performance.\n\n![critical section ](https://media.geeksforgeeks.org/wp-content/uploads/20231003155359/os2.png)\n\nCritical section\n\nIt could be visualized using the pseudo-code below \u2013\n\n```\ndo{\n    flag=1;\n    while(flag); // (entry section)\n        // critical section\n    if (!flag)\n        // remainder section\n} while(true);\n```\n\n## Solution to Critical Section Problem\n\nA simple solution to the critical section can be thought of as shown below,\n\n```\nacquireLock();\nProcess Critical Section\nreleaseLock();\n```\n\nA thread must acquire a lock prior to executing a critical section. The lock can be acquired by only one thread. There are various ways to implement locks in the above\u00a0pseudo-code. Let us discuss them in future articles.\n\nTo read about detailed solution to Critical Section Problem read \u2013 [Solution to Critical Section Problem](https://www.geeksforgeeks.org/solution-to-critical-section-problem/)\n\n**Strategies for avoiding problems:** While deadlocks, starvation, and overhead are mentioned as potential issues, there are more specific strategies for avoiding or mitigating these problems. For example, using timeouts to prevent deadlocks, implementing priority inheritance to prevent priority inversion and starvation, or optimizing lock implementation to reduce overhead.\n\n**Examples of critical sections in real-world applications:** While the article describes critical sections in a general sense, it could be useful to provide examples of how critical sections are used in specific real-world applications, such as database management systems or web servers.\n\n**Impact on scalability:** The use of critical sections can impact the scalability of a program, particularly in distributed systems where multiple nodes are accessing shared resources.\n\nIn process synchronization, a critical section is a section of code that accesses shared resources such as variables or data structures, and which must be executed by only one process at a time to avoid race conditions and other synchronization-related issues.\n\nA critical section can be any section of code where shared resources are accessed, and it typically consists of two parts: the entry section and the exit section. The entry section is where a process requests access to the critical section, and the exit section is where it releases the resources and exits the critical section.\n\nTo ensure that only one process can execute the critical section at a time, process synchronization mechanisms such as semaphores and mutexes are used. A semaphore is a variable that is used to indicate whether a resource is available or not, while a mutex is a semaphore that provides mutual exclusion to shared resources.\n\nWhen a process enters a critical section, it must first request access to the semaphore or mutex associated with the critical section. If the resource is available, the process can proceed to execute the critical section. If the resource is not available, the process must wait until it is released by the process currently executing the critical section.\n\nOnce the process has finished executing the critical section, it releases the semaphore or mutex, allowing another process to enter the critical section if necessary.\n\nProper use of critical sections and process synchronization mechanisms is essential in concurrent programming to ensure proper synchronization of shared resources and avoid race conditions, deadlocks, and other synchronization-related issues.\n\n## Advantages of Critical Section in Process Synchronization\n\n1. **Prevents race conditions:** By ensuring that only one process can execute the critical section at a time, race conditions are prevented, ensuring consistency of shared data.\n2. **Provides mutual exclusion:** Critical sections provide [mutual exclusion](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/) to shared resources, preventing multiple processes from accessing the same resource simultaneously and causing synchronization-related issues.\n3. **Reduces CPU utilization:** By allowing processes to wait without wasting CPU cycles, critical sections can reduce CPU utilization, improving overall system efficiency.\n4. **Simplifies synchronization:** Critical sections simplify the synchronization of shared resources, as only one process can access the resource at a time, eliminating the need for more complex synchronization mechanisms.\n\n## Disadvantages of Critical Section in Process Synchronization\n\n1. **Overhead:** Implementing critical sections using synchronization mechanisms like semaphores and mutexes can introduce additional overhead, slowing down program execution.\n2. **Deadlocks:** Poorly implemented critical sections can lead to deadlocks, where multiple processes are waiting indefinitely for each other to release resources.\n3. **Can limit parallelism:** If critical sections are too large or are executed frequently, they can limit the degree of parallelism in a program, reducing its overall performance.\n4. **Can cause contention:** If multiple processes frequently access the same critical section, contention for the critical section can occur, reducing performance.\n\n## Important Points Related to Critical Section in Process Synchronization\n\n1. Understanding the concept of critical section and why it\u2019s important for synchronization.\n2. Familiarity with the different synchronization mechanisms used to implement critical sections, such as semaphores, mutexes, and monitors.\n3. Knowledge of common synchronization problems that can arise in critical sections, such as race conditions, deadlocks, and live locks.\n4. Understanding how to design and implement critical sections to ensure proper synchronization of shared resources and prevent synchronization-related issues.\n5. Familiarity with best practices for using critical sections in concurrent programming.\n\n## Conclusion\n\nCritical sections are essential for managing shared resources in concurrent systems. Proper synchronization ensures data consistency and prevents issues like race conditions and deadlocks, enabling processes and threads to work together efficiently and reliably.\n\n## Frequently Asked Questions on Critical Section in Synchronization\n\n### What is meant by race condition?\n\n> A **race condition** occurs when multiple threads or processes access and manipulate shared resources concurrently, and the program\u2019s behavior depends on the timing or order of their execution. This can lead to unpredictable results, data inconsistency, or unexpected errors. Proper synchronization, like using mutexes or semaphores, is required to prevent race conditions.\n\n### What are the 3 Conditions to Critical Section Problem?\n\n> Three important conditions need to be satisfied to ensure that processes do not interfere with each other while trying to access shared resources are Mutual exclusion, Progress, Bounded Waiting.\n\n### What is critical section problem in IPC?\n\n> The Critical Section Problem in Inter-Process Communication (IPC) occurs when multiple processes need to access and modify shared resources (such as memory, files, or hardware devices). The problem arises because if more than one process accesses the shared resource at the same time, it could lead to data inconsistency, corruption, or race conditions.\n\n### What is an example of a critical section?\n\n> A simple example to Critical Section Problem would be when two threads share a global variable globalvar and both try to change its value with globalvar++.\n>\n> A real-life example can be the scenario ofupdating a bank account balance. Suppose two processes, ProcessA and ProcessB, are trying to access and update the balance of a shared bank account at the same time.\n\n[iframe](https://cdnads.geeksforgeeks.org/instream/video.html)\n\nCritical Section in Operating System\n\n[Visit Course![explore course icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/Vector11.svg)](https://gfgcdn.com/tu/U4D/)\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=next_article)\n\n[Mutual Exclusion in Synchronization](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n221\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike221\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/g-fact-70/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=338806271.1740481531&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=771847307)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481531595&cv=11&fst=1740481531595&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb858768136&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732282~101732284~102067808~102482433~102525910~102539968~102558064~102587591~102605417~102640600~102658453~102717422&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fg-fact-70%2F&hn=www.googleadservices.com&frm=0&tiba=Critical%20Section%20in%20Synchronization%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=747392468.1740481532&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=oqo4jlgu72bw)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=r1xtpt8493tj)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Critical Section in Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20231003155359/os2.png",
        "keywords": "critical section, process synchronization, race conditions, mutual exclusion, deadlock, starvation, semaphores, mutexes, kernel-mode programming, synchronization techniques, overhead in synchronization, bounded waiting, entry section, exit section, impact on scalability",
        "ogUrl": "https://www.geeksforgeeks.org/g-fact-70/",
        "ogDescription": "Critical sections are essential in concurrent programming to manage access to shared resources, ensuring data consistency and preventing issues like race conditions, deadlocks, and starvation through synchronization mechanisms such as semaphores and mutexes.",
        "description": "Critical sections are essential in concurrent programming to manage access to shared resources, ensuring data consistency and preventing issues like race conditions, deadlocks, and starvation through synchronization mechanisms such as semaphores and mutexes.",
        "scrapeId": "6de02c88-dfb9-4d5a-bad1-b92f2692eca1",
        "sourceURL": "https://www.geeksforgeeks.org/g-fact-70/",
        "url": "https://www.geeksforgeeks.org/g-fact-70/",
        "topic": "operating systems"
      }
    },
    "id": 23
  },
  {
    "url": "https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [DSA](https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Analysis of Algorithms](https://www.geeksforgeeks.org/design-and-analysis-of-algorithms/?ref=shm)\n- [Sorting](https://www.geeksforgeeks.org/sorting-algorithms/?ref=shm)\n- [Searching](https://www.geeksforgeeks.org/searching-algorithms/?ref=shm)\n- [Greedy](https://www.geeksforgeeks.org/greedy-algorithms/?ref=shm)\n- [Recursion](https://www.geeksforgeeks.org/recursion-algorithms/?ref=shm)\n- [Backtracking](https://www.geeksforgeeks.org/backtracking-algorithms/?ref=shm)\n- [Dynamic Programming](https://www.geeksforgeeks.org/dynamic-programming/?ref=shm)\n- [Divide and Conquer](https://www.geeksforgeeks.org/divide-and-conquer/?ref=shm)\n- [Geometric Algorithms](https://www.geeksforgeeks.org/geometric-algorithms/?ref=shm)\n- [Mathematical Algorithms](https://www.geeksforgeeks.org/mathematical-algorithms/?ref=shm)\n- [Pattern Searching](https://www.geeksforgeeks.org/pattern-searching/?ref=shm)\n- [Bitwise Algorithms](https://www.geeksforgeeks.org/bitwise-algorithms/?ref=shm)\n- [Branch & Bound](https://www.geeksforgeeks.org/branch-and-bound-algorithm/?ref=shm)\n- [Randomized Algorithms](https://www.geeksforgeeks.org/randomized-algorithms/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?type%3Darticle%26id%3D157257&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nSemaphores in Process Synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=next_article_top)\n\n# Peterson\u2019s Algorithm in Process Synchronization\n\nLast Updated : 10 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n50 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nPeterson\u2019s Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanism between two processes ensuring that both processes follow a fair order of execution. It\u2019s simple and effective for solving synchronization issues in two-process scenarios. In this article we will learn about Peterson\u2019s Algorithm, its working, and practical examples to help understand its use in process synchronization.\n\n## What is Peterson\u2019s Algorithm?\n\nPeterson\u2019s Algorithm is a well-known solution for ensuring mutual exclusion in process synchronization. It is designed to manage access to shared resources between two processes in a way that prevents conflicts or data corruption. The algorithm ensures that only one process can enter the critical section at any given time while the other process waits its turn. Peterson\u2019s Algorithm uses two simple variables one to indicate whose turn it is to access the critical section and another to show if a process is ready to enter. This method is often used in scenarios where two processes need to share resources or data without interfering with each other. It is simple, easy to understand, and serves as a foundational concept in [process synchronization.](https://www.geeksforgeeks.org/introduction-of-process-synchronization/)\n\n| Algorithm for\u00a0Piprocess | Algorithm for\u00a0Piprocess |\n| --- | --- |\n| ```<br>do{<br>  flag[i] = true;<br>  turn = j;<br>  while (flag[j] && turn == j);<br>  //critical section<br>  flag[i] = false;<br>  //remainder section<br>}while(true);<br>``` | ```<br>do{<br>  flag[j] = true;<br>  turn = i;<br>  while (flag[i] && turn == i);<br>  //critical section<br>  flag[j] = false;<br>  //remainder section<br>}while(true);<br>``` |\n\n### **Peterson\u2019s Algorithm Explanation**\n\nPeterson\u2019s Algorithm is a mutual exclusion solution used to ensure that two processes do not enter into the critical sections at the same time. The algorithm uses two main components: a turn variable and a flag array.\n\n- The turn variable is an integer that indicates whose turn it is to enter the critical section.\n- The flag array contains Boolean values for each process, indicating whether a process wants to enter the critical section.\n\nHere\u2019s how Peterson\u2019s Algorithm works step-by-step:\n\n- **Initial Setup**: Initially, both processes set their respective flag values to `false`, meaning neither wants to enter the critical section. The turn variable is set to the ID of one of the processes (either `0` or `1`), indicating that it\u2019s that process\u2019s turn to enter.\n\n- **Intention to Enter**: When a process wants to enter the critical section, it sets its flag value to `true` signaling its intent to enter.\n\n- **Set the Turn**: Then the process, which is having the next turn, sets the turn variable to its own ID. This will indicate that it is its turn to enter the critical section.\n\n- **Waiting Loop**: Both processes enter a loop where they check the flag of the other process and the turn variable:\n\n  - If the other process wants to enter (i.e., `flag[1 - processID] == true`), and\n  - It\u2019s the other process\u2019s turn (i.e., `turn == 1 - processID`), then the process waits, allowing the other process to enter the critical section.\n\nThis loop ensures that only one process can enter the critical section at a time, preventing a race condition.\n\n- **Critical Section**: Once a process successfully exits the loop, it enters the critical section, where it can safely access or modify the shared resource without interference from the other process.\n\n- **Exiting the Critical Section**: After finishing its work in the critical section, the process resets its flag to `false`. This signals that it no longer wants to enter the critical section, and the other process can now have its turn.\n\nBy alternating turns and using these checks, Peterson\u2019s algorithm ensures [mutual exclusion](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/), meaning only one process can access the critical section at a time, and both processes get an equal opportunity to do so.\n\n## Example of Peterson\u2019s Algorithm\n\nPeterson\u2019s solution is often used as a simple example of mutual exclusion in concurrent programming. Here are a few scenarios where it can be applied:\n\n- **Accessing a shared printer**: Peterson\u2019s solution ensures that only one process can access the printer at a time when two processes are trying to print documents.\n- **Reading and writing to a shared file**: It can be used when two processes need to read from and write to the same file, preventing concurrent access issues.\n- **Competing for a shared resource**: When two processes are competing for a limited resource, such as a network connection or critical hardware, Peterson\u2019s solution ensures mutual exclusion to avoid conflicts.\n\n**Peterson\u2019s algorithm \u2013**\n\nC++`\n#include <iostream>\n#include <thread>\n#include <vector>\nconst int N = 2; // Number of threads (producer and consumer)\nstd::vector<bool> flag(N, false); // Flags to indicate readiness\nint turn = 0; // Variable to indicate turn\nvoid producer(int j) {\n    do {\n        flag[j] = true; // Producer j is ready to produce\n        turn = 1 - j;   // Allow consumer to consume\n        while (flag[1 - j] && turn == 1 - j) {\n            // Wait for consumer to finish\n            // Producer waits if consumer is ready and it's consumer's turn\n        }\n        // Critical Section: Producer produces an item and puts it into the buffer\n        flag[j] = false; // Producer is out of the critical section\n        // Remainder Section: Additional actions after critical section\n    } while (true); // Continue indefinitely\n}\nvoid consumer(int i) {\n    do {\n        flag[i] = true; // Consumer i is ready to consume\n        turn = i;       // Allow producer to produce\n        while (flag[1 - i] && turn == i) {\n            // Wait for producer to finish\n            // Consumer waits if producer is ready and it's producer's turn\n        }\n        // Critical Section: Consumer consumes an item from the buffer\n        flag[i] = false; // Consumer is out of the critical section\n        // Remainder Section: Additional actions after critical section\n    } while (true); // Continue indefinitely\n}\nint main() {\n    std::thread producerThread(producer, 0); // Create producer thread\n    std::thread consumerThread(consumer, 1); // Create consumer thread\n    producerThread.join(); // Wait for producer thread to finish\n    consumerThread.join(); // Wait for consumer thread to finish\n    return 0;\n}\n`C`\n// code for producer (j)\n// producer j is ready\n// to produce an item\nflag[j] = true;\n// but consumer (i) can consume an item\nturn = i;\n// if consumer is ready to consume an item\n// and if its consumer's turn\nwhile (flag[i] == true && turn == i)\n    { /* then producer will wait*/ }\n    // otherwise producer will produce\n    // an item and put it into buffer (critical Section)\n    // Now, producer is out of critical section\n    flag[j] = false;\n    // end of code for producer\n    //--------------------------------------------------------\n    // code for consumer i\n    // consumer i is ready\n    // to consume an item\n    flag[i] = true;\n    // but producer (j) can produce an item\n    turn = j;\n    // if producer is ready to produce an item\n    // and if its producer's turn\n    while (flag[j] == true && turn == j)\n        { /* then consumer will wait */ }\n        // otherwise consumer will consume\n        // an item from buffer (critical Section)\n        // Now, consumer is out of critical section\n        flag[i] = false;\n// end of code for consumer\n`Java`\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class Main {\n    static final int N = 2; // Number of threads (producer and consumer)\n    static final Lock lock = new ReentrantLock();\n    static final Condition[] readyToProduce = {lock.newCondition(), lock.newCondition()};\n    static volatile int turn = 0; // Variable to indicate turn\n    static void producer(int j) {\n        do {\n            lock.lock();\n            try {\n                while (turn != j) {\n                    readyToProduce[j].await();\n                }\n                // Critical Section: Producer produces an item and puts it into the buffer\n                System.out.println(\"Producer \" + j + \" produces an item.\");\n                turn = 1 - j; // Allow consumer to consume\n                readyToProduce[1 - j].signal();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n            // Remainder Section: Additional actions after critical section\n        } while (true); // Continue indefinitely\n    }\n    static void consumer(int i) {\n        do {\n            lock.lock();\n            try {\n                while (turn != i) {\n                    readyToProduce[i].await();\n                }\n                // Critical Section: Consumer consumes an item from the buffer\n                System.out.println(\"Consumer \" + i + \" consumes an item.\");\n                turn = 1 - i; // Allow producer to produce\n                readyToProduce[1 - i].signal();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                lock.unlock();\n            }\n            // Remainder Section: Additional actions after critical section\n        } while (true); // Continue indefinitely\n    }\n    public static void main(String[] args) {\n        Thread producerThread = new Thread(() -> producer(0)); // Create producer thread\n        Thread consumerThread = new Thread(() -> consumer(1)); // Create consumer thread\n        producerThread.start(); // Start producer thread\n        consumerThread.start(); // Start consumer thread\n        try {\n            Thread.sleep(1000); // Run for 1 second\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            producerThread.interrupt(); // Interrupt producer thread\n            consumerThread.interrupt(); // Interrupt consumer thread\n        }\n    }\n}\n`Python`\nimport threading\nN = 2  # Number of threads (producer and consumer)\nflag = [False] * N  # Flags to indicate readiness\nturn = 0  # Variable to indicate turn\n# Function for producer thread\ndef producer(j):\n    while True:\n        flag[j] = True  # Producer j is ready to produce\n        turn = 1 - j  # Allow consumer to consume\n        while flag[1 - j] and turn == 1 - j:\n            # Wait for consumer to finish\n            # Producer waits if consumer is ready and it's consumer's turn\n            pass\n        # Critical Section: Producer produces an item and puts it into the buffer\n        flag[j] = False  # Producer is out of the critical section\n        # Remainder Section: Additional actions after critical section\n# Function for consumer thread\ndef consumer(i):\n    while True:\n        flag[i] = True  # Consumer i is ready to consume\n        turn = i  # Allow producer to produce\n        while flag[1 - i] and turn == i:\n            # Wait for producer to finish\n            # Consumer waits if producer is ready and it's producer's turn\n            pass\n        # Critical Section: Consumer consumes an item from the buffer\n        flag[i] = False  # Consumer is out of the critical section\n        # Remainder Section: Additional actions after critical section\n# Create producer and consumer threads\nproducer_thread = threading.Thread(target=producer, args=(0,))\nconsumer_thread = threading.Thread(target=consumer, args=(1,))\n# Start the threads\nproducer_thread.start()\nconsumer_thread.start()\n# Wait for the threads to finish\nproducer_thread.join()\nconsumer_thread.join()\n`C#`\nusing System;\nusing System.Threading;\nusing System.Collections.Generic;\nclass GFG\n{\n    const int N = 2; // Number of threads\n    static List<bool> flag = new List<bool>(new bool[N]);\n    static int turn = 0; // Variable to indicate turn\n    // Producer method\n    static void Producer(object obj)\n    {\n        int j = (int)obj;\n        do\n        {\n            flag[j] = true;\n            turn = 1 - j;\n            // Wait for consumer to finish\n            // Producer waits if consumer is ready and it's consumer's turn\n            while (flag[1 - j] && turn == 1 - j)\n            {\n                // Wait\n            }\n            // Critical Section: Producer produces an item and\n            // puts it into the buffer\n            Console.WriteLine($\"Producer {j} produced an item\");\n            flag[j] = false;\n            // Remainder Section: Additional actions after critical section\n            Thread.Sleep(1000);\n        } while (true);\n    }\n    // Consumer method\n    static void Consumer(object obj)\n    {\n        int i = (int)obj;\n        do\n        {\n            flag[i] = true;\n            turn = i;\n            // Wait for producer to finish\n            // Consumer waits if producer is ready and it's producer's turn\n            while (flag[1 - i] && turn == i)\n            {\n                // Wait\n            }\n            // Critical Section: Consumer consumes an item from buffer\n            Console.WriteLine($\"Consumer {i} consumed an item\");\n            flag[i] = false;\n            // Remainder Section: Additional actions after critical section\n            Thread.Sleep(1000);\n        } while (true);\n    }\n    static void Main(string[] args)\n    {\n        Thread producerThread = new Thread(Producer); // Create producer thread\n        Thread consumerThread = new Thread(Consumer); // Create consumer thread\n        producerThread.Start(0); // Start producer thread with index 0\n        consumerThread.Start(1); // Start consumer thread with index 1\n        producerThread.Join(); // Wait for producer thread to finish\n        consumerThread.Join(); // Wait for consumer thread to finish\n    }\n}\n`JavaScript``\nconst N = 2; // Number of threads (producer and consumer)\nconst lockObject = {}; // Lock object for synchronization\nasync function producer(j) {\n    while (true) {\n        await new Promise((resolve) => {\n            lock(lockObject, () => {\n                // Critical Section: Producer produces an item and puts it into the buffer\n                console.log(`Producer ${j} produces an item`);\n                // Remainder Section: Additional actions after the critical section\n            });\n            resolve();\n        });\n        await sleep(100); // Simulate some work before the next iteration\n    }\n}\nasync function consumer(i) {\n    while (true) {\n        await new Promise((resolve) => {\n            lock(lockObject, () => {\n                // Critical Section: Consumer consumes an item from the buffer\n                console.log(`Consumer ${i} consumes an item`);\n                // Remainder Section: Additional actions after the critical section\n            });\n            resolve();\n        });\n        await sleep(100); // Simulate some work before the next iteration\n    }\n}\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\nfunction lock(obj, callback) {\n    if (!obj.__lock__) {\n        obj.__lock__ = true;\n        try {\n            callback();\n        } finally {\n            delete obj.__lock__;\n        }\n    }\n}\n// Start producer and consumer threads\nproducer(0); // Start producer 0\nproducer(1); // Start producer 1\nconsumer(0); // Start consumer 0\nconsumer(1); // Start consumer 1\n// Run for 1 second\nsetTimeout(() => {\n    process.exit(); // Terminate the program after 1 second\n}, 1000);\n``\n\n### **Explanation of the above code:**\n\nThis code shows a simple version of Peterson\u2019s Algorithm for synchronizing two processes: a producer and a consumer. The goal is to make sure that both processes don\u2019t interfere with each other while accessing a shared resource, which is a buffer in this case. The producer creates items, and the consumer takes them.\n\nHere\u2019s a detailed explanation of the code:\n\n### **Producer (j)**\n\n- **Producer is ready to produce**:\n  - `flag[j] = true;`: This indicates that the producer (process `j`) is ready to produce an item. The `flag` array holds the intentions of both processes (producer and consumer). When the producer sets its flag to `true`, it means it\u2019s willing to access the shared resource (the buffer).\n\n- **Set the turn for consumer**:\n  - `turn = i;`: The `turn` variable is used to decide whose turn it is to enter the critical section (where the shared resource is accessed). Here, the producer is setting the turn to the consumer (process `i`), meaning the producer is willing to wait if the consumer wants to consume an item.\n\n- **Wait until the consumer is done**:\n  - `while (flag[i] == true && turn == i) `: This is the crucial part of the algorithm. The producer checks if the consumer has indicated that it is ready ( `flag[i] == true`) and whether it\u2019s the consumer\u2019s turn ( `turn == i`). If both conditions are true the producer must wait (it cannot enter the critical section). This ensures that the consumer gets a chance to consume before the producer produces a new item.\n\n- **Producer produces an item**:\n  - Once the condition in the `while` loop is no longer true (meaning either the consumer is not ready or it is the producer\u2019s turn), the producer can safely enter the critical section, produce an item, and place it into the buffer.\n\n- **Exit the critical section**:\n  - `flag[j] = false;`: After the producer finishes its work in the critical section, it sets its flag to `false`, indicating that it is done and no longer wants to produce. This allows the consumer to have the opportunity to consume the item next.\n\n### **Consumer (i)**\n\n- **Consumer is ready to consume**:\n  - `flag[i] = true;`: The consumer sets its flag to `true`, indicating that it is ready to consume an item from the buffer.\n\n- **Set the turn for producer**:\n  - `turn = j;`: The consumer sets the `turn` variable to the producer\u2019s process ID ( `j`). This indicates that it is the producer\u2019s turn to produce if the consumer is done consuming.\n\n- **Wait until the producer is done**:\n  - `while (flag[j] == true && turn == j) `: This is similar to the producer\u2019s waiting condition. The consumer checks if the producer is ready to produce ( `flag[j] == true`) and whether it\u2019s the producer\u2019s turn ( `turn == j`). If both conditions are true, the consumer must wait, allowing the producer to produce an item.\n\n- **Consumer consumes an item**:\n  - Once the `while` loop exits (meaning the consumer is allowed to consume), the consumer enters the critical section and consumes an item from the buffer.\n\n- **Exit the critical section**:\n  - `flag[i] = false;`: After consuming the item, the consumer sets its flag to `false`, indicating it no longer wants to consume. This allows the producer to have the opportunity to produce the next item.\n\n[Read more about Peterson\u2019s Solution for mutual exclusion \\| Set 1](https://www.geeksforgeeks.org/petersons-algorithm-for-mutual-exclusion-set-1/)\n\n[Read more about Peterson\u2019s Solution for mutual exclusion \\| Set 2](https://www.geeksforgeeks.org/petersons-algorithm-for-mutual-exclusion-set-2-cpu-cycles-and-memory-fence/)\n\n### **Advantages of the Peterson\u2019s Solution**\n\n1. With Peterson\u2019s solution, multiple processes can access and share a resource without causing any resource conflicts.\n2. Every process has a chance to be carried out.\n3. It uses straightforward logic and is easy to put into practice.\n4. Since it is entirely software dependent and operates in user mode, it can be used with any hardware.\n\neliminates the chance of a deadlock.\n\n### Disadvantages of the Peterson\u2019s Solution\n\n1. Waiting for the other processes to exit the critical region may take a long time. We call it busy waiting.\n2. On systems that have multiple CPUs, this algorithm might not function.\n\n## Conclusion\n\nPeterson\u2019s Algorithm is a simple and effective way to achieve mutual exclusion between two processes. It ensures that only one process accesses the critical section at a time, preventing conflicts and data inconsistency. While it works well for two processes, its limitations make it less practical for larger systems. Understanding and implementing Peterson\u2019s Algorithm helps in learning the basics of process synchronization, which is crucial for managing shared resources in concurrent programming.\n\n## **Frequently Asked Questions on Peterson\u2019s Algorithm in Process Synchronization**\n\n**What is synchronization in concurrent programming?**\n\n> Synchronization refers to the coordination of multiple processes or threads to achieve a desired outcome. It involves using synchronization mechanisms like locks, semaphores, or mutexes to control access to shared resources and prevent race conditions or conflicts.\n\n**What is Peterson\u2019s solution in OS?**\n\n> Peterson\u2019s Solution is a mutual exclusion algorithm used in operating systems to ensure that two processes do not enter their critical sections simultaneously. It provides a simple and effective way to manage access to shared resources by two processes, preventing race conditions. The solution uses two shared variables to coordinate the two processes: a flag array and a turn variable.\n\n**What are the common synchronization mechanisms used in concurrent programming?**\n\n> Common synchronization mechanisms include locks, semaphores, condition variables, monitors, and atomic operations. These mechanisms provide ways to control access to shared resources and coordinate the execution of concurrent processes or threads.\n\n**What is the difference between Peterson and Dekker algorithm?**\n\n> Peterson\u2019s Algorithm and Dekker\u2019s Algorithm both solve the mutual exclusion problem, but Peterson\u2019s is simpler and designed specifically for two processes, using shared variables to control the turn-taking mechanism. Dekker\u2019s Algorithm, while also designed for two processes, is more complex due to its alternating turn logic and additional checks to prevent race conditions. Peterson\u2019s Algorithm tends to be more efficient, while Dekker\u2019s can be extended to more processes but involves more steps in synchronization.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=next_article)\n\n[Semaphores in Process Synchronization](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=next_article)\n\n![https://media.geeksforgeeks.org/auth/avatar.png](https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png)\n\nGeeksforGeeks\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n50\n\nImprove\n\nArticle Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/category/dsa/algorithm/?ref=article_category)\n- [DSA](https://www.geeksforgeeks.org/category/dsa/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\nPractice Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/explore?category=Algorithms&ref=article_practice_tag)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike50\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1366546296.1740481542&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=58748779)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481542644&cv=11&fst=1740481542644&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb884918195&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102693808~102717421&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fpetersons-algorithm-in-process-synchronization%2F&hn=www.googleadservices.com&frm=0&tiba=Peterson's%20Algorithm%20in%20Process%20Synchronization%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=1569569838.1740481543&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=rbisnegjpbt)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=8m1jlpgdv3y3)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Peterson's Algorithm in Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "keywords": "Peterson's Algorithm, critical section problem, process synchronization, mutual exclusion, race conditions, turn-taking mechanism, shared resources, flag array, turn variable, synchronization issues, concurrent programming, resource conflicts, busy waiting, operating systems, synchronization mechanisms",
        "ogUrl": "https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/",
        "ogDescription": "Peterson's Algorithm is a mutual exclusion solution for process synchronization that ensures only one of two processes can access the critical section at a time, preventing race conditions through a turn variable and flag array.",
        "description": "Peterson's Algorithm is a mutual exclusion solution for process synchronization that ensures only one of two processes can access the critical section at a time, preventing race conditions through a turn variable and flag array.",
        "scrapeId": "7e67ee72-32f9-4465-8353-d80d83616f03",
        "sourceURL": "https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 24
  },
  {
    "url": "https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/?type%3Darticle%26id%3D162478&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nSynchronization Examples\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/synchronization-examples/?ref=next_article_top)\n\n# Lock Variable Synchronization Mechanism\n\nLast Updated : 09 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n18 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nA lock variable provides the simplest synchronization mechanism for processes. Some noteworthy points regarding Lock Variables are-\n\n1. It\u2019s a **software mechanism** implemented in user mode, i.e. no support required from the Operating System.\n2. It\u2019s a busy waiting solution (process continuously checks for a condition and hence wastes CPU cycles).\n3. It can be used for more than two processes.\n\nWhen Lock = 0 implies critical section is vacant (initial value ) and Lock = 1 implies critical section occupied.\n\nThe pseudocode looks something like this \u2013\n\n```\n// Entry section\nwhile(lock != 0);  // Note the semicolon\nLock = 1;\n\n// critical section\n...............................\n\n// Exit section\nLock = 0;\n```\n\nA more formal approach to the Lock Variable method for process synchronization can be seen in the following code snippet :\n\nC++`\n#include <mutex>\n#include <condition_variable>\nchar buffer[SIZE];\nint count = 0,\n    start = 0,\n    end = 0;\nstd::mutex mtx;\nstd::condition_variable cv;\nvoid put(char c)\n{\n    std::unique_lock<std::mutex> lock(mtx);\n    while (count == SIZE) {\n        cv.wait(lock);\n    }\n    count++;\n    buffer[start] = c;\n    start++;\n    if (start == SIZE) {\n        start = 0;\n    }\n    cv.notify_all();\n}\nchar get()\n{\n    std::unique_lock<std::mutex> lock(mtx);\n    while (count == 0) {\n        cv.wait(lock);\n    }\n    count--;\n    char c = buffer[end];\n    end++;\n    if (end == SIZE) {\n        end = 0;\n    }\n    cv.notify_all();\n    return c;\n}\n`C`\nchar buffer[SIZE];\nint count = 0,\n    start = 0,\n    end = 0;\nstruct lock l;\n// initialize lock variable\nlock_init(&amp;l);\nvoid put(char c)\n{\n    // entry section\n    lock_acquire(&amp;l);\n    // critical section begins\n    while (count == SIZE) {\n        lock_release(&amp;l);\n        lock_acquire(&amp;l);\n    }\n    count++;\n    buffer[start] = c;\n    start++;\n    if (start == SIZE) {\n        start = 0;\n    }\n    // critical section ends\n    // exit section\n    lock_release(&amp;l);\n}\nchar get()\n{\n    char c;\n    // entry section\n    lock_acquire(&amp;l);\n    // critical section begins\n    while (count == 0) {\n        lock_release(&amp;l);\n        lock_acquire(&amp;l);\n    }\n    count--;\n    c = buffer[end];\n    end++;\n    if (end == SIZE) {\n        end = 0;\n    }\n    // critical section ends\n    // exit section\n    lock_release(&amp;l);\n    return c;\n}\n`\n\nHere we can see a classic implementation of the reader-writer\u2019s problem. The buffer here is the shared memory and many processes are either trying to read or write a character to it. To prevent any ambiguity of data we restrict concurrent access by using a lock variable. We have also applied a constraint on the number of readers/writers that can have access.\n\nNow every Synchronization mechanism is judged on the basis of three primary parameters :\n\n1. Mutual Exclusion.\n2. Progress.\n3. Bounded Waiting.\n\nOf which [mutual exclusion](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/) is the most important of all parameters. The Lock Variable doesn\u2019t provide mutual exclusion in some cases. This fact can be best verified by writing its pseudo-code in the form of an assembly language code as given below.\n\n```\n1. Load Lock, R0 ; (Store the value of Lock in Register R0.)\n2. CMP R0, #0 ; (Compare the value of register R0 with 0.)\n3. JNZ Step 1 ; (Jump to step 1 if value of R0 is not 0.)\n4. Store #1, Lock ; (Set new value of Lock as 1.)\nEnter critical section\n5. Store #0, Lock ; (Set the value of lock as 0 again.)\n```\n\nNow let\u2019s suppose that processes P1 and P2 are competing for Critical Section and their sequence of execution be as follows (initial value of Lock = 0) \u2013\n\n1. P1 executes statement 1 and gets pre-empted.\n2. P2 executes statement 1, 2, 3, 4 and enters Critical Section and gets pre-empted.\n3. P1 executes statement 2, 3, 4 and also enters Critical Section.\n\nHere initially the R0 of process P1 stores lock value as 0 but fails to update the lock value as 1. So when P2 executes it also finds the LOCK value as 0 and enters Critical Section by setting LOCK value as 1. But the real problem arises when P1 executes again it doesn\u2019t check the updated value of Lock. It only checks the previous value stored in R0 which was 0 and it enters critical section.\n\nThis is only one possible sequence of execution among many others. Some may even provide mutual exclusion but we cannot dwell on that. According to murphy\u2019s law \u201c **Anything that can go wrong will go wrong**\u201c. So like all easy things the Lock Variable Synchronization method comes with its fair share of Demerits but its a good starting point for us to develop better Synchronization Algorithms to take care of the problems that we face here.\n\n## Frequently Asked Questions on Process Synchronization \u2013 FAQs\n\n### **Are lock variables the best synchronization mechanism in all scenarios?**\n\n> No, while lock variables are a simple mechanism for synchronization, they may not be efficient in scenarios where processes are frequently contending for access to a critical section. In such cases, other synchronization mechanisms like semaphores, monitors, or message passing may be more appropriate.\n\n### **Can lock variables cause starvation?**\n\n> Yes, lock variables can cause starvation if a process is blocked indefinitely while waiting for access to the critical section. To prevent starvation, techniques like aging or priority inversion can be employed.\n\n### **Can lock variables be used in conjunction with other synchronization mechanisms?**\n\n> Yes, lock variables can be used in conjunction with other synchronization mechanisms to provide more robust synchronization solutions. For example, a lock variable can be used to implement mutual exclusion while a semaphore can be used to implement a bounded buffer.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/synchronization-examples/?ref=next_article)\n\n[Synchronization Examples](https://www.geeksforgeeks.org/synchronization-examples/?ref=next_article)\n\n![https://media.geeksforgeeks.org/auth/avatar.png](https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png)\n\nGeeksforGeeks\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n18\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Lock Variable Synchronization Mechanism\\\\\n\\\\\n\\\\\nA lock variable provides the simplest synchronization mechanism for processes. Some noteworthy points regarding Lock Variables are- It's a software mechanism implemented in user mode, i.e. no support required from the Operating System.It's a busy waiting solution (process continuously checks for a c\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/?ref=ml_lbp)\n[Synchronization Examples\\\\\n\\\\\n\\\\\nThe Synchronization is an important concept in operating systems that ensures the smooth and coordinated execution of processes and threads. It is the task of coordinating the execution of processes in such a way that no two processes can access the same shared data and resource. It is a critical pa\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/synchronization-examples/?ref=ml_lbp)\n[Process Synchronization \\| Set 2\\\\\n\\\\\n\\\\\nProcess Synchronization is a technique which is used to coordinate the process that use shared Data. There are two types of Processes in an Operating Systems:- Independent Process - The process that does not affect or is affected by the other process while its execution then the process is called In\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/process-synchronization-set-2/?ref=ml_lbp)\n[Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=ml_lbp)\n[Monitors in Process Synchronization\\\\\n\\\\\n\\\\\nMonitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion,\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/monitors-in-process-synchronization/?ref=ml_lbp)\n[Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=ml_lbp)\n[Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=ml_lbp)\n[Centralized Clock Synchronization\\\\\n\\\\\n\\\\\nCentralized Clock Synchronization is an internal clock synchronization approach where clocks of system are synchronized with one of clock of system. Clock synchronization is carried out to make all clocks in network agree on the same value. In centralized clock synchronization, one of clocks is appo\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/centralized-clock-synchronization/?ref=ml_lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=ml_lbp)\n[Dekker's algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Process Synchronization, Inter Process Communication To obtain such a mutual exclusion, bounded waiting, and progress there have been several algorithms implemented, one of which is Dekker's Algorithm. To understand the algorithm let's understand the solution to the critical section p\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=ml_lbp)\n\nLike18\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1916578285.1740481553&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717421&z=64370221)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=xz65n3bt4sl1)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=gh1u3ew8q90l)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Lock Variable Synchronization Mechanism - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "keywords": "lock variable, synchronization mechanism, critical section, busy waiting solution, mutual exclusion, bounded waiting, reader-writer problem, process synchronization, semaphores, monitor synchronization, starvation prevention techniques, concurrent access restriction, synchronization algorithms, shared memory access",
        "ogUrl": "https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/",
        "ogDescription": "Lock variables are a simple software-based synchronization mechanism for processes that can lead to issues like busy waiting and lack of mutual exclusion, making them less efficient in high-contention scenarios.",
        "description": "Lock variables are a simple software-based synchronization mechanism for processes that can lead to issues like busy waiting and lack of mutual exclusion, making them less efficient in high-contention scenarios.",
        "scrapeId": "5335df75-14c5-426d-9844-15cb9ae449d6",
        "sourceURL": "https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/",
        "url": "https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/",
        "topic": "operating systems"
      }
    },
    "id": 25
  },
  {
    "url": "https://www.geeksforgeeks.org/semaphores-in-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?type%3Darticle%26id%3D157124&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nSemaphores and its types\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=next_article_top)\n\n# Semaphores in Process Synchronization\n\nLast Updated : 07 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n265 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores are used to implement critical sections, which are regions of code that must be executed by only one process at a time. By using semaphores, processes can coordinate access to shared resources, such as shared memory or I/O devices.\n\n## What is Semaphores?\n\nA semaphore is a synchronization tool used in concurrent programming to manage access to shared resources. It is a [lock-based mechanism](https://www.geeksforgeeks.org/lock-variable-synchronization-mechanism/) designed to achieve process synchronization, built on top of basic locking techniques.\n\nSemaphores use a counter to control access, allowing synchronization for multiple instances of a resource. Processes can attempt to access one instance, and if it is not available, they can try other instances. Unlike basic locks, which allow only one process to access one instance of a resource. Semaphores can handle more complex synchronization scenarios, involving multiple processes or threads. It help prevent problems like [**race conditions**](https://www.geeksforgeeks.org/race-condition-vulnerability/) by controlling when and how processes access shared data.\n\nThe process of using Semaphores provides two operations:\n\n- **wait (P):** The wait operation decrements the value of the semaphore\n- **signal (V):** The signal operation increments the value of the semaphore.\n\nWhen the value of the semaphore is zero, any process that performs a wait operation will be blocked until another process performs a signal operation.\n\nWhen a process performs a wait operation on a semaphore, the operation checks whether the value of the semaphore is >0. If so, it decrements the value of the semaphore and lets the process continue its execution; otherwise, it blocks the process on the semaphore. A signal operation on a semaphore activates a process blocked on the semaphore if any, or increments the value of the semaphore by 1. Due to these semantics, semaphores are also called counting semaphores. The initial value of a semaphore determines how many processes can get past the wait operation.\n\nSemaphores are required for [processsynchronization](https://www.geeksforgeeks.org/introduction-of-process-synchronization/) to make sure that multiple processes can safely share resources without interfering with each other. They help control when a process can access a shared resource, preventing issues like **race** conditions.\n\n## **Types of Semaphores**\n\nSemaphores are of two Types:\n\n- **Binary Semaphore:** This is also known as a mutex lock, as they are locks that provide mutual exclusion. It can have only two values \u2013 0 and 1. Its value is initialized to 1. It is used to implement the solution of critical section problems with multiple processes and a single resource.\n- **Counting Semaphore:** Counting semaphores can be used to control access to a given resource consisting of a finite number of instances. The semaphore is initialized to the number of resources available. Its value can range over an unrestricted domain.\n\nTo learn more refer: [Types of Semaphores](https://www.geeksforgeeks.org/semaphores-and-its-types/)\n\n## Working of Semaphore\n\nA semaphore is a simple yet powerful synchronization tool used to manage access to shared resources in a system with multiple processes. It works by maintaining a counter that controls access to a specific resource, ensuring that no more than the allowed number of processes access the resource at the same time.\n\nThere are two primary operations that a semaphore can perform:\n\n1. **Wait (P operation)**: This operation checks the semaphore\u2019s value. If the value is greater than 0, the process is allowed to continue, and the semaphore\u2019s value is decremented by 1. If the value is 0, the process is blocked (waits) until the semaphore value becomes greater than 0.\n2. **Signal (V operation)**: After a process is done using the shared resource, it performs the signal operation. This increments the semaphore\u2019s value by 1, potentially unblocking other waiting processes and allowing them to access the resource.\n\nNow let us see how it does so. First, look at two operations that can be used to access and change the value of the semaphore variable.\n\n![semaphores](https://media.geeksforgeeks.org/wp-content/uploads/20250106165446247852/semaphores.webp)\n\nA [critical section](https://www.geeksforgeeks.org/g-fact-70/) is surrounded by both operations to implement process synchronization. The below image demonstrates the basic mechanism of how semaphores are used to control access to a critical section in a multi-process environment, ensuring that only one process can access the shared resource at a time\n\n![Critical](https://media.geeksforgeeks.org/wp-content/uploads/20250106173455387890/Critical.png)\n\nNow, let us see how it implements mutual exclusion. Let there be two processes P1 and P2 and a semaphore s is initialized as 1. Now if suppose P1 enters in its critical section then the value of semaphore s becomes 0. Now if P2 wants to enter its critical section then it will wait until s > 0, this can only happen when P1 finishes its critical section and calls V operation on semaphore s.\n\nThis way mutual exclusion is achieved. Look at the below image for details which is a Binary semaphore.\n\n![Mutual Exclusion using Semaphore](https://media.geeksforgeeks.org/wp-content/cdn-uploads/Semaphores_3.jpg)\n\n## **Implementation \u2013** Binary Semaphores\n\nC++`\nstruct semaphore {\n\n    enum value(0, 1);\n    // q contains all Process Control Blocks (PCBs)\n    // corresponding to processes got blocked\n    // while performing down operation.\n    Queue<process> q;\n};\nP(semaphore s)\n{\n    if (s.value == 1) {\n        s.value = 0;\n    }\n    else {\n        // add the process to the waiting queue\n        q.push(P) sleep();\n    }\n}\nV(semaphore s)\n{\n    if (s.q is empty) {\n        s.value = 1;\n    }\n    else {\n        // select a process from waiting queue\n        Process p = q.front();\n        // remove the process from waiting as it has been\n        // sent for CS\n        q.pop();\n        wakeup(p);\n    }\n}\n`C`\n#include <stdio.h>\n#include<stdlib.h>\n#include<sys/queue.h>\nstruct semaphore{\n    Queue<process> q;\n    int value;\n};\nvoid P(struct semaphore s)\n{\n    if (s.value == 1) {\n        s.value = 0;\n    }\n    else {\n        s.q.push(P);\n        sleep();\n    }\n}\nvoid V(semaphore s)\n{\n    if (s.q is empty) {\n        s.value = 1;\n    }\n    else {\n\n        // Get a process from the Waiting Queue\n        Process p = q.front();\n        // Remove the process from waiting\n        q.pop();\n        wakeup(p);\n    }\n}\nint main() {\n    printf(\"This is Hemish!!\");\n\n    // This code is Contributed by Himesh Singh Chauhan\n    return 0;\n}\n// This code is modified by Susobhan Akhuli\n`Java`\nimport java.util.*;\nclass Semaphore {\n    public enum Value { Zero, One }\n    public Queue<Process> q = new LinkedList<Process>();\n    public Value value = Value.One;\n    public void P(Semaphore s, Process p)\n    {\n        if (s.value == Value.One) {\n            s.value = Value.Zero;\n        }\n        else {\n            // add the process to the waiting queue\n            q.add(p);\n            p.Sleep();\n        }\n    }\n    public void V(Semaphore s)\n    {\n        if (s.q.size() == 0) {\n            s.value = Value.One;\n        }\n        else {\n            // select a process from waiting queue\n            Process p = q.peek();\n            // remove the process from waiting as it has\n            // been sent for CS\n            q.remove();\n            p.Wakeup();\n        }\n    }\n}\n`Python`\nfrom enum import Enum\nfrom queue import Queue\nclass Semaphore:\n    class Value(Enum):\n        Zero = 0\n        One = 1\n    def __init__(self):\n        self.q = Queue()\n        self.value = Semaphore.Value.One\n    def P(self, s, p):\n        if s.value == Semaphore.Value.One:\n            s.value = Semaphore.Value.Zero\n        else:\n            # add the process to the waiting queue\n            s.q.put(p)\n            p.Sleep()\n    def V(self, s):\n        if s.q.qsize() == 0:\n            s.value = Semaphore.Value.One\n        else:\n            # select a process from waiting queue\n            p = s.q.queue[0]\n            # remove the process from waiting as it has\n            # been sent for CS\n            s.q.get()\n            p.Wakeup()\n`C#`\nusing System.Collections.Generic;\nclass Semaphore {\n    public enum value { Zero, One }\n    public Queue<Process> q = new Queue<Process>();\n    public void P(Semaphore s, Process p) {\n        if (s.value == value.One) {\n            s.value = value.Zero;\n        } else {\n            // add the process to the waiting queue\n            q.Enqueue(p);\n            p.Sleep();\n        }\n    }\n    public void V(Semaphore s) {\n        if (s.q.Count == 0) {\n            s.value = value.One;\n        } else {\n            // select a process from waiting queue\n            Process p = q.Peek();\n            // remove the process from waiting as it has been\n            // sent for CS\n            q.Dequeue();\n            p.Wakeup();\n        }\n    }\n}\n`JavaScript`\nclass Semaphore {\nconstructor() {\n    this.value = 0;\n    // q contains all Process Control Blocks (PCBs)\n    // corresponding to processes got blocked\n    // while performing down operation.\n    this.q = [];\n}\nP() {\n    if (this.value == 1) {\n      this.value = 0;\n    } else {\n      // add the process to the waiting queue\n      this.q.push(P);\n      sleep();\n    }\n}\nV() {\n    if (this.q.length == 0) {\n      this.value = 1;\n    } else {\n      // select a process from waiting queue\n      let p = this.q.shift();\n      // remove the process from waiting as it has been\n      // sent for CS\n      wakeup(p);\n    }\n}\n}\n`\n\nThe description above is for binary semaphore which can take only two values 0 and 1 and ensure mutual exclusion. There is one other type of semaphore called counting semaphore which can take values greater than one.\n\nNow suppose there is a resource whose number of instances is 4. Now we initialize S = 4 and the rest is the same as for binary semaphore. Whenever the process wants that resource it calls P or waits for function and when it is done it calls V or signal function. If the value of S becomes zero then a process has to wait until S becomes positive. For example, Suppose there are 4 processes P1, P2, P3, and P4, and they all call wait operation on S(initialized with 4). If another process P5 wants the resource then it should wait until one of the four processes calls the signal function and the value of semaphore becomes positive.\n\n### **Limitations**\n\n- One of the biggest limitations of semaphore is [priority inversions](https://www.geeksforgeeks.org/priority-inversion-what-the-heck/).\n- Deadlock, suppose a process is trying to wake up another process that is not in a sleep state. Therefore, a deadlock may be blocked indefinitely.\n- The operating system has to keep track of all calls to wait and signal the semaphore.\n\nThe main problem with semaphores is that they require busy waiting, If a process is in the critical section, then other processes trying to enter the critical section will be waiting until the critical section is not occupied by any process. Whenever any process waits then it continuously checks for semaphore value (look at this line while (s==0); in P operation) and wastes CPU cycle.\n\nThere is also a chance of \u201cspinlock\u201d as the processes keep on spinning while waiting for the lock. To avoid this another implementation is provided below.\n\n## **Implementation** \u2013 Counting semaphore\n\nCPP`\nstruct Semaphore {\n    int value;\n    // q contains all Process Control Blocks(PCBs)\n    // corresponding to processes got blocked\n    // while performing down operation.\n    Queue<process> q;\n};\nP(Semaphore s)\n{\n    s.value = s.value - 1;\n    if (s.value < 0) {\n        // add process to queue\n        // here p is a process which is currently executing\n        q.push(p);\n        block();\n    }\n    else\n        return;\n}\nV(Semaphore s)\n{\n    s.value = s.value + 1;\n    if (s.value <= 0) {\n        // remove process p from queue\n        Process p = q.pop();\n        wakeup(p);\n    }\n    else\n        return;\n}\n`Java`\nimport java.util.LinkedList;\nimport java.util.Queue;\n// semaphore class\nclass Semaphore {\n// our value\nint value;\n    Queue<Process> q;\n    public Semaphore(int value)\n    {\n        this.value = value;\n        q = new LinkedList<>();\n    }\n    public void P(Process p)\n    {\n        value--;\n        if (value < 0) {\n            q.add(p);\n            p.block();\n        }\n    }\n    public void V()\n    {\n        value++;\n        if (value <= 0) {\n            Process p = q.remove();\n            p.wakeup();\n        }\n    }\n}\n`Python`\nimport heapq\n# Global Variable to track the Processes going into Critical Section\nCOUNTER=1\nclass Semaphore:\n    def __init__(self,value):\n        # Value of the Semaphore passed to the Constructor\n        self.value=value\n        # The Waiting queue which will be using the heapq module of Python\n        self.q=list()\n    def getSemaphore(self):\n        ''' Function to print the Value of the Semaphore Variable '''\n        print(f\"Semaphore Value: {self.value}\")\n\ndef block(process):\n    print(f\"Process {process} Blocked.\")\n\ndef wakeup(process):\n    print(f\"Process {process} Waked Up and Completed it's work.\")\ndef P(s):\n    global COUNTER\n    s.value=s.value-1\n    if(s.value<0):\n        heapq.heappush(s.q,COUNTER)\n        block(COUNTER)\n    else:\n        print(f'Process {COUNTER} gone inside the Critical Section.')\n        COUNTER+=1\n        return\n\ndef V(s):\n    global COUNTER\n    s.value=s.value+1\n    if(s.value<=0):\n        p=heapq.heappop(s.q)\n        wakeup(p)\n        COUNTER-=1\n    else:\n        print(f\"Process {COUNTER} completed it's work.\")\n        COUNTER-=1\n        return\n\n# Can Pass the Value of the Counting Semaphore to the Class Constructor\n# Example for Counting Semaphore value as 2\ns1=Semaphore(2)\ns1.getSemaphore()\nP(s1)\ns1.getSemaphore()\nP(s1)\ns1.getSemaphore()\nP(s1)\ns1.getSemaphore()\nV(s1)\ns1.getSemaphore()\nV(s1)\ns1.getSemaphore()\nV(s1)\ns1.getSemaphore()\n# This Code is Contributed by Himesh Singh Chauhan\n`C#`\nusing System.Collections.Generic;\npublic class Semaphore {\n    public int value;\n    // q contains all Process Control Blocks(PCBs)\n    // corresponding to processes got blocked\n    // while performing down operation.\n    Queue<Process> q = new Queue<Process>();\n    public void P(Process p)\n    {\n        value--;\n        if (value < 0) {\n            // add process to queue\n            q.Enqueue(p);\n            p.block();\n        }\n    }\n    public void V()\n    {\n        value++;\n        if (value <= 0) {\n            // remove process p from queue\n            Process p = q.Dequeue();\n            p.wakeup();\n        }\n    }\n}\n`JavaScript`\n// Define a Semaphore object\nfunction Semaphore() {\n    this.value = 0;\n    this.q = []; // Initialize an array to act as a queue\n}\n// Implement the P operation\nSemaphore.prototype.P = function(p) {\n    this.value = this.value - 1;\n    if (this.value < 0) {\n        // Add process to queue\n        this.q.push(p);\n        // Assuming block() and wakeup() functions are defined elsewhere\n        block();\n    }\n};\n// Implement the V operation\nSemaphore.prototype.V = function() {\n    this.value = this.value + 1;\n    if (this.value <= 0) {\n        // Remove process p from queue\n        var p = this.q.shift();\n        // Assuming wakeup() function is defined elsewhere\n        wakeup(p);\n    }\n};\n// This code is contributed by Susobhan Akhuli\n`\n\nIn this implementation whenever the process waits it is added to a waiting queue of processes associated with that semaphore. This is done through the system call block() on that process. When a process is completed it calls the signal function and one process in the queue is resumed. It uses the wakeup() system call.\n\n## Uses of Semaphores\n\n- **Mutual Exclusion** : Semaphore ensures that only one process accesses a shared resource at a time.\n- **Process Synchronization** : Semaphore coordinates the execution order of multiple processes.\n- **Resource Management** : Limits access to a finite set of resources, like printers, devices, etc.\n- **Reader-Writer Problem** : Allows multiple readers but restricts the writers until no reader is present.\n- **Avoiding Deadlocks** : Prevents deadlocks by controlling the order of allocation of resources.\n\n## Advantages of Semaphores\n\n- Semaphore is a simple and effective mechanism for process synchronization\n- Supports coordination between multiple processes. By controlling the access to critical sections, semaphores help in managing multiple processes without them interfering with each other.\n- When used correctly, semaphores can help avoid deadlocks by managing access to resources efficiently and ensuring that no process is indefinitely blocked from accessing necessary resources.\n- Semaphores help prevent race conditions by ensuring that only one process can access a shared resource at a time.\n- Provides a flexible and robust way to manage shared resources.\n\n## Disadvantages of Semaphores\n\n- It Can lead to performance degradation due to overhead associated with wait and signal operations.\n- If semaphores are not managed carefully, they can lead to [deadlock](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/). This often occurs when semaphores are not released properly or when processes acquire semaphores in an inconsistent order.\n- It can cause performance issues in a program if not used properly.\n- It can be difficult to debug and maintain. Debugging systems that rely heavily on semaphores can be challenging, as it is hard to track the state of each semaphore and ensure that all processes are correctly synchronized\n- It can be prone to race conditions and other synchronization problems if not used correctly.\n- It can be vulnerable to certain types of attacks, such as denial of service attacks.\n\n## Classical Synchronization Problems using Semaphores Concept\n\nThese are the classical synchronization problem using the concept of semaphores.\n\n### 1\\. Producer-Consumer Problem\n\nThe [producer-consumer problem](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/) involves two types of processes producers that generate data and consumers that process data. The Producer-Consumer Problem is like a restaurant where the chef (producer) makes food and the customer (consumer) eats it. The counter (buffer: A fixed-size queue where producers place items and consumers remove items.) holds food temporarily. A special lock (semaphore) ensures the chef doesn\u2019t overflow the counter and the customer doesn\u2019t take food when it\u2019s not available. In This way, everything runs smoothly and efficiently and gives faster results.\n\n**Semaphores Used**\n\n- empty: Counts the number of empty slots in the buffer\n- full: Counts the number of full slots in the buffer\n- mutex: Locks access to the buffer (mutual exclusion)\n\n### 2\\. Traffic Light Control\n\n**Description:** Traffic lights at an intersection can be managed using semaphores to control the flow of traffic and ensure safe crossing.\n\n**Example:**\n\n**Traffic Lights:** Represented by semaphores that control the green, yellow, and red lights for different directions.\n\n**Semaphores Used:** Each light direction is controlled by a semaphore that manages the timing and transitions between light states.\n\n**Implementation**\n\n**Light Controller:** Uses semaphores to cycle through green, yellow, and red lights. The controller ensures that only one direction has the green light at a time and manages transitions to avoid conflicts.\n\n### **3\\. Bank Transaction Processing**\n\n- **Multiple Transactions:** Processes that need to access shared resources (accounts)\n- **Account Balance:** Shared resource represented by a semaphore\n- **Semaphore value:** 1 (only one transaction can access and modify an account at a time is crucial for maintaining data integrity).\n\n### **Process**\n\n- **Acquire Semaphore:** A transaction must need to acquire the semaphore first before modifying an account balance.\n- **The account** is **:** Then operations like debiting or crediting the account are performed by the transaction.\n- **Release Semaphore:** After Completing the transactions the semaphore is released to allow other transactions to proceed.\n\n### 4\\. Print Queue Management\n\n- **Multiple Print Jobs:** Processes that need to access shared resources (printers)\n- **Printer:** Shared resource represented by a semaphore\n- **Semaphore Value:** 1 (only one print job can access the printer at a time)\n\n### Process\n\n- **Acquire Semaphore:** First, acquire a semaphore for the printer to begin the print job.\n- **Print Job Execution:** The printer processes the print job.\n- **Release Semaphore:** Now the semaphore is released after the job is done.\n\n### 5\\. Railway Track Management\n\n- **Multiple Trains:** Processes that need to access shared resources (tracks)\n- **Track:** Shared resource represented by a semaphore\n- **Semaphore Value:** 1 (only one train can access the track at a time)\n\n### Process\n\n- **Acquire Semaphore:** A train acquires the semaphore before entering a track.\n- **Travel Across Track:** train Travels across the track.\n- **Release Semaphore:** The semaphores are released after the train passes the track.\n\n### 6\\. Dining Philosopher\u2019s Problem\n\n- **Multiple Philosophers:** Process that needs to access shared resources(forks).\n- **Forks:** Shared resources represented by semaphores, that need to eat. Each philosopher needs two forks to eat.\n- **Semaphore Value:** 1 (Only one philosopher can access a fork at a time preventing deadlock and starvation).\n\n### Process\n\n- **Acquire Forks:** Philosophers acquire the semaphore for both the left and right forks before eating.\n- **Eat** eat **:** When both the forks are acquired then the philosopher eats.\n- **Release Forks:** After eating, both the forks are released for others to use them.\n\n**Solution** \u2013 [Dining Philosopher Problem Using Semaphores](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/)\n\n### 7\\. Reader-Writer Problem\n\nIn [Reader-Writer problem](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/) Synchronizing access to shared data where multiple readers can read the data simultaneously, but writers need exclusive access to modify it. In simple terms imagine a library where multiple readers and writers come and all readers want to read a book, and some people(writers) want to update or edit the book. That\u2019s why we need a system to ensure that these actions are done smoothly without errors or conflicts.\n\n- **Multiple Readers and Writers:** Processes that need to access a shared resource(data).\n- **Data:** Shared resources represented by a Semaphore.\n- **Semaphore Value for Reader:** Process that reads shared data, Can access simultaneously(value>1, more than one reader can access at the same time)\n- **Semaphore Value for Writers:** Processes that modify shared data need exclusive access(value =1, one at a time)\n\n**Solution** \u2013\n\n- [Readers Preference Solution](https://www.geeksforgeeks.org/readers-writers-problem-writers-preference-solution/)\n- [Writers Preference Solution](https://www.geeksforgeeks.org/readers-writers-problem-writers-preference-solution/)\n\n## **Conclusion**\n\nProcess Synchronization is an important of concurrent computing, ensuring that multiple processes can execute without interfering with each other. Semaphores can be used to tackle classic synchronization challenges in computing. It plays a vital role In managing access to shared resources and coordinating the activities of concurrent processes. It also helps to improve system performance, maintain data integrity, and remove the conflicts between the processes. Effective process synchronization ensures consistency, stability, and efficiency in multi-threaded and multi-process systems.\n\n## **Semaphores in Process Synchronization \u2013 FAQs**\n\n### **Why is Synchronization important?**\n\n> To maintain Data Consistency, Efficient use of resources, and avoiding problems like race conditions, and deadlock.\n\n### **What does a semaphore protect?**\n\n> It protects the simultaneous access of shared resources by multiple processes.\n\n### **Why it is important to protect Critical Sections?**\n\n> Protecting critical sections ensures consistency of data and prevents conflicts.\n\n### **What is the difference between process synchronization and mutual exclusion?**\n\n> Process synchronization coordinates access to shared resources, while mutual exclusion ensures only one process can access a resource at a time.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=next_article)\n\n[Semaphores and its types](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=next_article)\n\n![https://media.geeksforgeeks.org/auth/avatar.png](https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png)\n\nGeeksforGeeks\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n265\n\nImprove\n\nArticle Tags :\n\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Operating System Tutorial\\\\\n\\\\\n\\\\\nAn Operating System(OS) is a software that manages and handles hardware and software resources of a computing device. Responsible for managing and controlling all the activities and sharing of computer resources among different running applications.A low-level Software that includes all the basic fu\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/operating-systems/?ref=lbp)\n\n## OS Basics\n\n- [What is an Operating System?\\\\\n\\\\\n\\\\\nAn Operating System is a System software that manages all the resources of the computing deice. Acts as an interface between the software and different parts of the computer or the computer hardware. Manages the overall resources and operations of the computer. Controls and monitors the execution of\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/what-is-an-operating-system/?ref=lbp)\n\n* * *\n\n- [Functions of Operating System\\\\\n\\\\\n\\\\\nAn Operating System acts as a communication interface between the user and computer hardware. Its purpose is to provide a platform on which a user can execute programs conveniently and efficiently. An operating system is software that manages the allocation of Computer Hardware. The coordination of\\\\\n\\\\\n12 min read](https://www.geeksforgeeks.org/functions-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [Commonly Used Operating System\\\\\n\\\\\n\\\\\nThere are various types of Operating Systems used throughout the world and this depends mainly on the type of operations performed. These Operating Systems are manufactured by large multinational companies like Microsoft, Apple, etc. Let's look at the few most commonly used OS in the real world: Win\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/commonly-used-operating-system/?ref=lbp)\n\n* * *\n\n\n## Structure of Operating System\n\n- [Operating System Services\\\\\n\\\\\n\\\\\nAn operating system is software that acts as an intermediary between the user and computer hardware. It is a program with the help of which we are able to run various applications. It is the one program that is running all the time. Every computer must have an operating system to smoothly execute ot\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/operating-system-services/?ref=lbp)\n\n* * *\n\n- [Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n\n* * *\n\n- [System Programs in Operating System\\\\\n\\\\\n\\\\\nSystem Programming can be defined as the act of building Systems Software using System Programming Languages. According to Computer Hierarchy, Hardware comes first then is Operating System, System Programs, and finally Application Programs. In the context of an operating system, system programs are\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/system-programs-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Operating Systems Structures\\\\\n\\\\\n\\\\\nThe operating system can be implemented with the help of various structures. The structure of the OS depends mainly on how the various standard components of the operating system are interconnected and merge into the kernel. This article discusses a variety of operating system implementation structu\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/different-approaches-or-structures-of-operating-systems/?ref=lbp)\n\n* * *\n\n- [History of Operating System\\\\\n\\\\\n\\\\\nAn operating system is a type of software that acts as an interface between the user and the hardware. It is responsible for handling various critical functions of the computer and utilizing resources very efficiently so the operating system is also known as a resource manager. The operating system\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/evolution-of-operating-system/?ref=lbp)\n\n* * *\n\n- [Booting and Dual Booting of Operating System\\\\\n\\\\\n\\\\\nWhen a computer or any other computing device is in a powerless state, its operating system remains stored in secondary storage like a hard disk or SSD. But, when the computer is started, the operating system must be present in the main memory or RAM of the system. What is Booting?When a computer sy\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/booting-and-dual-booting-of-operating-system/?ref=lbp)\n\n* * *\n\n\n## Types of OS\n\n- [Batch Processing Operating System\\\\\n\\\\\n\\\\\nIn the beginning, computers were very large types of machinery that ran from a console table. In all-purpose, card readers or tape drivers were used for input, and punch cards, tape drives, and line printers were used for output. Operators had no direct interface with the system, and job implementat\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/batch-processing-operating-system/?ref=lbp)\n\n* * *\n\n- [Multiprogramming in Operating System\\\\\n\\\\\n\\\\\nAs the name suggests, Multiprogramming means more than one program can be active at the same time. Before the operating system concept, only one program was to be loaded at a time and run. These systems were not efficient as the CPU was not used efficiently. For example, in a single-tasking system,\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/multiprogramming-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Time Sharing Operating System\\\\\n\\\\\n\\\\\nMultiprogrammed, batched systems provide an environment where various system resources were used effectively, but it did not provide for user interaction with computer systems. Time-sharing is a logical extension of multiprogramming. The CPU performs many tasks by switches that are so frequent that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/time-sharing-operating-system/?ref=lbp)\n\n* * *\n\n- [What is a Network Operating System?\\\\\n\\\\\n\\\\\nThe basic definition of an operating system is that the operating system is the interface between the computer hardware and the user. In daily life, we use the operating system on our devices which provides a good GUI, and many more features. Similarly, a network operating system(NOS) is software th\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/what-is-a-network-operating-system/?ref=lbp)\n\n* * *\n\n- [Real Time Operating System (RTOS)\\\\\n\\\\\n\\\\\nReal-time operating systems (RTOS) are used in environments where a large number of events, mostly external to the computer system, must be accepted and processed in a short time or within certain deadlines. such applications are industrial control, telephone switching equipment, flight control, and\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/real-time-operating-system-rtos/?ref=lbp)\n\n* * *\n\n\n## Process Management\n\n- [Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n\n* * *\n\n- [Process Table and Process Control Block (PCB)\\\\\n\\\\\n\\\\\nWhile creating a process, the operating system performs several operations. To identify the processes, it assigns a process identification number (PID) to each process. As the operating system supports multi-programming, it needs to keep track of all the processes. For this task, the process control\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/?ref=lbp)\n\n* * *\n\n- [Operations on Processes\\\\\n\\\\\n\\\\\nProcess operations refer to the actions or activities performed on processes in an operating system. These operations include creating, terminating, suspending, resuming, and communicating between processes. Operations on processes are crucial for managing and controlling the execution of programs i\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/operations-on-processes/?ref=lbp)\n\n* * *\n\n- [Process Schedulers in Operating System\\\\\n\\\\\n\\\\\nA process is the instance of a computer program in execution. Scheduling is important in operating systems with multiprogramming as multiple processes might be eligible for running at a time.One of the key responsibilities of an Operating System (OS) is to decide which programs will execute on the C\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/process-schedulers-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=lbp)\n\n* * *\n\n- [Context Switching in Operating System\\\\\n\\\\\n\\\\\nAn operating system is a program loaded into a system or computer. and manage all the other program which is running on that OS Program, it manages the all other application programs. or in other words, we can say that the OS is an interface between the user and computer hardware. So in this article\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/context-switch-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n\n* * *\n\n\n## CPU Scheduling in OS\n\n- [CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n\n* * *\n\n- [CPU Scheduling Criteria\\\\\n\\\\\n\\\\\nCPU scheduling is essential for the system's performance and ensures that processes are executed correctly and on time. Different CPU scheduling algorithms have other properties and the choice of a particular algorithm depends on various factors. Many criteria have been suggested for comparing CPU s\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/cpu-scheduling-criteria/?ref=lbp)\n\n* * *\n\n- [Multiple-Processor Scheduling in Operating System\\\\\n\\\\\n\\\\\nIn multiple-processor scheduling multiple CPUs are available and hence Load Sharing becomes possible. However multiple processor scheduling is more complex as compared to single processor scheduling. In multiple processor scheduling, there are cases when the processors are identical i.e. HOMOGENEOUS\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/multiple-processor-scheduling-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Thread Scheduling\\\\\n\\\\\n\\\\\nThere is a component in Java that basically decides which thread should execute or get a resource in the operating system. Scheduling of threads involves two boundary scheduling. Scheduling of user-level threads (ULT) to kernel-level threads (KLT) via lightweight process (LWP) by the application dev\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-scheduling/?ref=lbp)\n\n* * *\n\n\n## Threads in OS\n\n- [Thread in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads are also called lightweight processes as they possess some of the properties of processes. Each thread belongs to exactly one process. In an operating system that supports multithreading, the process can consist of many threads. But thre\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/thread-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Threads and its types in Operating System\\\\\n\\\\\n\\\\\nA thread is a single sequence stream within a process. Threads have the same properties as the process so they are called lightweight processes. Threads are executed one after another, but it gives the illusion that they are executing in parallel. Each thread has different states. In this article, w\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/threads-and-its-types-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Multithreading in Operating System\\\\\n\\\\\n\\\\\nA thread is a path that is followed during a program\u00e2\u20ac\u2122s execution. The majority of programs written nowadays run as a single thread. For example, a program is not capable of reading keystrokes while making drawings. These tasks cannot be executed by the program at the same time. This problem can be s\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/multithreading-in-operating-system/?ref=lbp)\n\n* * *\n\n\n## Process Synchronization\n\n- [Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Race Condition Vulnerability\\\\\n\\\\\n\\\\\nRace condition occurs when multiple threads read and write the same variable i.e. they have access to some shared data and they try to change it at the same time. In such a scenario threads are \u00e2\u20ac\u0153racing\u00e2\u20ac\u009d each other to access/change the data. This is a major security vulnerability. What is Race Condit\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/race-condition-vulnerability/?ref=lbp)\n\n* * *\n\n- [Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=lbp)\n\n* * *\n\n- [Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=lbp)\n\n* * *\n\n\n## Critical Section Problem Solution\n\n- [Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=lbp)\n\n* * *\n\n- [Semaphores and its types\\\\\n\\\\\n\\\\\nA semaphore is a tool used in computer science to manage how multiple programs or processes access shared resources, like memory or files, without causing conflicts. Semaphores are compound data types with two fields one is a Non-negative integer S.V(Semaphore Value) and the second is a set of proce\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/semaphores-and-its-types/?ref=lbp)\n\n* * *\n\n- [Producer Consumer Problem using Semaphores \\| Set 1\\\\\n\\\\\n\\\\\nThe Producer-Consumer problem is a classic synchronization issue in operating systems. It involves two types of processes: producers, which generate data, and consumers, which process that data. Both share a common buffer. The challenge is to ensure that the producer doesn't add data to a full buffe\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/?ref=lbp)\n\n* * *\n\n- [Readers-Writers Problem \\| Set 1 (Introduction and Readers Preference Solution)\\\\\n\\\\\n\\\\\nThe readers-writer problem in operating systems is about managing access to shared data. It allows multiple readers to read data at the same time without issues but ensures that only one writer can write at a time, and no one can read while writing is happening. This helps prevent data corruption an\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/?ref=lbp)\n\n* * *\n\n- [Dining Philosopher Problem Using Semaphores\\\\\n\\\\\n\\\\\nThe Dining Philosopher Problem states that K philosophers are seated around a circular table with one chopstick between each pair of philosophers. There is one chopstick between each philosopher. A philosopher may eat if he can pick up the two chopsticks adjacent to him. One chopstick may be picked\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/?ref=lbp)\n\n* * *\n\n- [Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=lbp)\n\n* * *\n\n\n## Deadlocks & Deadlock Handling Methods\n\n- [Introduction of Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss deadlock, its necessary conditions, etc. in detail. Deadlock is a situation in computing where tw\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Conditions for Deadlock in Operating System\\\\\n\\\\\n\\\\\nA deadlock is a situation where a set of processes is blocked because each process is holding a resource and waiting for another resource acquired by some other process. In this article, we will discuss what deadlock is and the necessary conditions required for deadlock. What is Deadlock?Deadlock is\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/conditions-for-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Banker's Algorithm in Operating System\\\\\n\\\\\n\\\\\nBanker's Algorithm is a resource allocation and deadlock avoidance algorithm used in operating systems. It ensures that a system remains in a safe state by carefully allocating resources to processes while avoiding unsafe states that could lead to deadlocks. The Banker's Algorithm is a smart way for\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/bankers-algorithm-in-operating-system-2/?ref=lbp)\n\n* * *\n\n- [Wait For Graph Deadlock Detection in Distributed System\\\\\n\\\\\n\\\\\nDeadlocks are a fundamental problem in distributed systems. A process may request resources in any order and a process can request resources while holding others. A Deadlock is a situation where a set of processes are blocked as each process in a Distributed system is holding some resources and that\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/wait-for-graph-deadlock-detection-in-distributed-system/?ref=lbp)\n\n* * *\n\n- [Handling Deadlocks\\\\\n\\\\\n\\\\\nDeadlock is a situation where a process or a set of processes is blocked, waiting for some other resource that is held by some other waiting process. It is an undesirable state of the system. In other words, Deadlock is a critical situation in computing where a process, or a group of processes, beco\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/handling-deadlocks/?ref=lbp)\n\n* * *\n\n- [Deadlock Prevention And Avoidance\\\\\n\\\\\n\\\\\nDeadlock prevention and avoidance are strategies used in computer systems to ensure that different processes can run smoothly without getting stuck waiting for each other forever. Think of it like a traffic system where cars (processes) must move through intersections (resources) without getting int\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-prevention/?ref=lbp)\n\n* * *\n\n- [Deadlock Detection And Recovery\\\\\n\\\\\n\\\\\nDeadlock Detection and Recovery is the mechanism of detecting and resolving deadlocks in an operating system. In operating systems, deadlock recovery is important to keep everything running smoothly. A deadlock occurs when two or more processes are blocked, waiting for each other to release the reso\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/deadlock-detection-recovery/?ref=lbp)\n\n* * *\n\n- [Deadlock Ignorance in Operating System\\\\\n\\\\\n\\\\\nIn this article we will study in brief about what is Deadlock followed by Deadlock Ignorance in Operating System. What is Deadlock? If each process in the set of processes is waiting for an event that only another process in the set can cause it is actually referred as called Deadlock. In other word\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/deadlock-ignorance-in-operating-system/?ref=lbp)\n\n* * *\n\n- [Recovery from Deadlock in Operating System\\\\\n\\\\\n\\\\\nIn today's world of computer systems and multitasking environments, deadlock is an undesirable situation that can bring operations to a halt. When multiple processes compete for exclusive access to resources and end up in a circular waiting pattern, a deadlock occurs. To maintain the smooth function\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/recovery-from-deadlock-in-operating-system/?ref=lbp)\n\n* * *\n\n\nLike265\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=j0hoowb50lav)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=3ffzfqfuyrch)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Semaphores in Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/20250106165446247852/semaphores.webp",
        "keywords": "Semaphores, process synchronization, critical sections, mutual exclusion, counting semaphores, binary semaphore, resource management, race conditions, Producer-Consumer Problem, Reader-Writer Problem, traffic light control, deadlock prevention, semaphore operations, synchronization primitives",
        "ogUrl": "https://www.geeksforgeeks.org/semaphores-in-process-synchronization/",
        "ogDescription": "Semaphores are synchronization tools in operating systems that manage access to shared resources among processes, preventing conflicts and ensuring mutual exclusion through operations like wait (P) and signal (V).",
        "description": "Semaphores are synchronization tools in operating systems that manage access to shared resources among processes, preventing conflicts and ensuring mutual exclusion through operations like wait (P) and signal (V).",
        "scrapeId": "05c54dad-38f9-4c4e-853c-3bfa78d77e60",
        "sourceURL": "https://www.geeksforgeeks.org/semaphores-in-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/semaphores-in-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 26
  },
  {
    "url": "https://www.geeksforgeeks.org/classical-ipc-problems/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/classical-ipc-problems/?type%3Darticle%26id%3D1357462&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nProgram for HRRN CPU Scheduling Algorithm\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/program-for-hrrn-cpu-scheduling-algorithm/?ref=next_article_top)\n\n# Classical IPC Problems\n\nLast Updated : 10 Jan, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n4 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nInter-Process Communication (IPC) is necessary for processes to communicate and share data. While basic communication between processes may sound simple, certain situations can cause issues that need specific solutions. These situations are known as ClassicalIPCProblems, which involve managing synchronization, avoiding deadlock, and ensuring that resources are accessed in a controlled manner.\n\nSome of the well-known Inter Process Communication problems are:\n\n1. Producer Consumer Problem\n2. Readers-Writers Problem\n3. Dining Philosophers Problem\n\n## Producer Consumer Problem\n\nThe Producer-Consumer Problem involves two types of processes: the Producer, which creates data, and the Consumer, which processes that data. The challenge is ensuring that the Producer doesn't overfill the buffer, and the Consumer doesn't try to consume data from an empty buffer.\n\n### Key Problems in the Producer-Consumer Problem:\n\n1. **Buffer Overflow**: If the producer tries to add data when the buffer is full, there will be no space for new data, causing the producer to be blocked.\n2. **Buffer Underflow**: If the consumer tries to consume data when the buffer is empty, it has nothing to consume, causing the consumer to be blocked.\n\n## Solution to Producer Consumer Problem\n\nThis problem can be solved using synchronization techniques such as semaphores or mutexes to control access to the shared buffer and ensure proper synchronization between the Producer and Consumer.\n\n[Producer-Consumer Problem - Solution](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/) (using Semaphores)\n\n## **Reader-Writer Problem**\n\nThe Reader-Writer Problem involves multiple processes that need to read from and write to shared data. Here, we have two types of processes: Readers, which only read the data, and Writers, which can modify the data.\n\n- **Readers**: These processes only read data from the shared resource and do not modify it.\n- **Writers**: These processes modify or write data to the shared resource.\n\nThe challenge in the Reader-Writer problem is to allow multiple readers to access the shared data simultaneously without causing issues. However, only one writer should be allowed to write at a time, and no reader should be allowed to read while a writer is writing. This ensures the integrity and consistency of the data.\n\n## Solution to **Reader-Writer Problem**\n\nThere are two fundamental solutions to the Readers-Writers problem:\n\n- **Readers Preference:**\u00a0In this solution, readers are given preference over writers. That means that till readers are reading, writers will have to wait. The Writers can access the resource only when no reader is accessing it.\n- **Writer\u2019s Preference:**\u00a0Preference is given to the writers. It simply means that, after arrival, the writers can go ahead with their operations, though perhaps there are readers currently accessing the resource.\n\n[Readers-Writers Problem - Solution](https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/) (Readers Preference Solution)\n\n[Readers-Writers Problem - Solution](https://www.geeksforgeeks.org/readers-writers-problem-writers-preference-solution/) (Writers Preference Solution)\n\n## Dining Philosophers Problem\n\nThe\u00a0[Dining Philosopher Problem](https://www.geeksforgeeks.org/dining-philosophers-problem/)\u00a0is a classic synchronization and concurrency problem that deals with resource sharing, deadlock, and starvation in systems where multiple processes require limited resources. In this article, we will discuss the Dining Philosopher Problem in detail along with proper implementation.\n\nThe\u00a0Dining Philosopher Problem\u00a0involves \u2018n\u2019 philosophers sitting around a circular table. Each philosopher alternates between two states:\u00a0thinking\u00a0and\u00a0eating. To eat, a philosopher needs two chopsticks, one on their left and one on their right. However, the number of chopsticks is equal to the number of philosophers, and each chopstick is shared between two neighboring philosophers.\n\nThe standard problem considers the value of \u2018n\u2019 as 5 i.e. we deal with 5 Philosophers sitting around a circular table.\n\n## Solution to Dining Philosophers Problem\n\nSolutions to this problem typically involve using synchronization techniques like [semaphores](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/) or mutexes to ensure that the philosophers don\u2019t deadlock. One common approach is to use a [monitor](https://www.geeksforgeeks.org/monitors-in-process-synchronization/) to coordinate access to the forks, allowing each philosopher to pick up and put down forks in a way that prevents deadlock.\n\n[Dining Philosophers Problem - Solution](https://www.geeksforgeeks.org/dining-philosopher-problem-using-semaphores/) (using Semaphores)\n\n[Dining-Philosophers Problem - Solution](https://www.geeksforgeeks.org/dining-philosophers-solution-using-monitors/) (Using Monitors)\n\n## Sleeping Barber Problem\n\nIn the Sleeping Barber Problem, there is a barber shop with one barber and several chairs for customers. The barber sleeps while there are no customers. When a customer arrives, they sit in an empty chair. If all chairs are taken, the customer leaves. If the barber is sleeping, the customer wakes him up; if the barber is busy, the customer waits.\n\nThe main challenge is to avoid deadlock (where no customer can get a haircut) and ensure fairness so that customers don\u2019t starve waiting for service\n\n## Solution to Sleeping Barber Problem\n\nThis problem can be solved using synchronization mechanisms like semaphores. A semaphore can be used to manage the availability of the barber and the chairs. Another semaphore is used to manage the customers waiting in line. The barber uses a semaphore to control whether he is sleeping or awake, and customers use another semaphore to wait for their turn.\n\n[Sleeping Barber Problem - Solution](https://www.geeksforgeeks.org/sleeping-barber-problem-in-process-synchronization/) (using Semaphores)\n\n## Conclusion\n\nClassical IPC problems like the Producer-Consumer, Readers-Writers, Dining Philosophers, and Sleeping Barber highlight key challenges in process synchronization, resource sharing, and deadlock prevention. This page serves as a central resource for understanding these problems and their solutions using techniques like semaphores and monitors. You can explore each problem and its implementation details here for better insight.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/program-for-hrrn-cpu-scheduling-algorithm/?ref=next_article)\n\n[Program for HRRN CPU Scheduling Algorithm](https://www.geeksforgeeks.org/program-for-hrrn-cpu-scheduling-algorithm/?ref=next_article)\n\n[B](https://www.geeksforgeeks.org/user/brijkan3mz4/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[brijkan3mz4](https://www.geeksforgeeks.org/user/brijkan3mz4/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n4\n\nImprove\n\nArticle Tags :\n\n- [Misc](https://www.geeksforgeeks.org/category/misc/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n- [Process Management](https://www.geeksforgeeks.org/tag/process-management/?ref=article_tag)\n\n+1 More\n\nPractice Tags :\n\n- [Misc](https://www.geeksforgeeks.org/explore?category=Misc&ref=article_practice_tag)\n\n### Similar Reads\n\n[Decidable and Undecidable Problems in Theory of Computation\\\\\n\\\\\n\\\\\nIn the Theory of Computation, problems can be classified into decidable and undecidable categories based on whether they can be solved using an algorithm. A decidable problem is one for which a solution can be found in a finite amount of time, meaning there exists an algorithm that can always provid\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/decidable-and-undecidable-problems-in-theory-of-computation/?ref=ml_lbp)\n[Previous Solved CS Papers Year wise - GATE / UGC / ISRO\\\\\n\\\\\n\\\\\nHere, we have listed all these important solved year wise papers. We have tried to solve these paper with best and errorless explanations. We have also provided alternative explanation or more than one methods to solve a specific question whenever possible. You can practice them online with prior kn\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/previous-solved-cs-papers-year-wise-gate-ugc-isro/?ref=ml_lbp)\n[Discrete Mathematics - GATE CSE Previous Year Questions\\\\\n\\\\\n\\\\\nDiscrete Mathematics Previous Year GATE Questions help analyze the question pattern, marking scheme, and improve time management, boosting GATE scores. Regular practice of PYQs increases the chances of scoring well. This article focuses on Discrete Mathematics GATE questions from previous years, wit\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/discrete-mathematics-gate-questions/?ref=ml_lbp)\n[Linear Algebra \u00e2\u20ac\u201c GATE CSE Previous Year Questions\\\\\n\\\\\n\\\\\nPreparing for the Graduate Aptitude Test in Engineering (GATE) in Computer Science and Engineering (CSE) is a significant undertaking. Utilizing previous years' question papers is an effective strategy to understand the exam pattern, question types, and difficulty levels. Linear Algebra is a fundame\\\\\n\\\\\n1 min read](https://www.geeksforgeeks.org/linear-algebra-gate-cse-previous-year-questions/?ref=ml_lbp)\n[Previous Year Gate CSE/IT papers with solutions\\\\\n\\\\\n\\\\\nGATE CSE in Past GATE-CS-2015 (Set 1) GATE-CS-2015 (Set 2) GATE-CS-2015 (Set 3) GATE-CS-2014-(Set-1) GATE-CS-2014-(Set-2) GATE-CS-2014-(Set-3) GATE CS 2013 GATE CS 2012 GATE CS 2011 GATE CS 2010 GATE-CS-2009 GATE CS 2008 GATE-CS-2007 GATE-CS-2006 GATE-CS-2005 GATE-CS-2004 GATE-CS-2003 GATE-CS-2002 G\\\\\n\\\\\n1 min read](https://www.geeksforgeeks.org/gate-cs-in-past/?ref=ml_lbp)\n[Engineering Mathematics - GATE CSE Previous Year Questions\\\\\n\\\\\n\\\\\nSolving GATE Previous Year's Questions (PYQs) not only clears the concepts but also helps to gain flexibility, speed, accuracy, and understanding of the level of questions generally asked in the GATE exam, and that eventually helps you to gain good marks in the examination. Previous Year Questions h\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/engineering-mathematics-gate-questions/?ref=ml_lbp)\n[C Language \\| Set 6\\\\\n\\\\\n\\\\\nFollowing questions have been asked in GATE CS 2006 exam. 1. Consider the following C-program fragment in which i, j and n are integer variables. for (i = n, j = 0; i >0; i /= 2, j += i); Let val(j) denote the value stored in the variable j after termination of the for loop. Which one of the foll\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/c-language-set-6/?ref=ml_lbp)\n[C Language \\| Set 7\\\\\n\\\\\n\\\\\nFollowing questions have been asked in GATE CS 2010 exam. 1. What does the following program print? #include<stdio.h> void f(int \\*p, int \\*q) { p = q; \\*p = 2; } int i = 0, j = 1; int main() { f(&i, &j); printf(\"%d %d \\\n\", i, j); getchar(); return 0; } (A) 2 2 (B) 2 1 (C) 0 1 (\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/c-language-set-7/?ref=ml_lbp)\n[C Language \\| Set 8\\\\\n\\\\\n\\\\\nFollowing questions have been asked in GATE CS 2011 exam. 1) What does the following fragment of C-program print? char c\\[\\] = \"GATE2011\"; char \\*p =c; printf(\"%s\", p + p\\[3\\] - p\\[1\\]) ; (A) GATE2011 (B) E2011 (C) 2011 (D) 011 Answer: (C) See comments for explanation. char c\\[\\] = \"\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/c-language-set-8/?ref=ml_lbp)\n[Theory of Computation - GATE CSE Previous Year Questions\\\\\n\\\\\n\\\\\nIn this article, we are mainly focusing on the Theory of Computation GATE Questions that have been asked in Previous Years, with their solutions. And, where an explanation is required, we have also provided the reason. Topic-Wise Quizzes to Practice Previous Year's QuestionsFinite Automata and Regul\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/theory-of-computation-gate-questions/?ref=ml_lbp)\n\nLike4\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/classical-ipc-problems/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1991655247.1740481574&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1914844702)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=lr6bnhshv6vl)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=8plmhjbao7l8)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Classical IPC Problems - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png",
        "keywords": "Inter-Process Communication, Classical IPC Problems, Producer Consumer Problem, Readers-Writers Problem, Dining Philosophers Problem, Buffer Overflow, Buffer Underflow, synchronization techniques, semaphores, mutexes, Readers Preference, Writers Preference, resource sharing, deadlock prevention, Sleeping Barber Problem",
        "ogUrl": "https://www.geeksforgeeks.org/classical-ipc-problems/",
        "ogDescription": "Classical Inter-Process Communication (IPC) problems, including the Producer-Consumer, Readers-Writers, Dining Philosophers, and Sleeping Barber, illustrate critical challenges in process synchronization, resource sharing, and deadlock prevention, with solutions often involving semaphores and monitors.",
        "description": "Classical Inter-Process Communication (IPC) problems, including the Producer-Consumer, Readers-Writers, Dining Philosophers, and Sleeping Barber, illustrate critical challenges in process synchronization, resource sharing, and deadlock prevention, with solutions often involving semaphores and monitors.",
        "scrapeId": "7ba72a9f-3b2a-466a-93d0-0e71b195c20f",
        "sourceURL": "https://www.geeksforgeeks.org/classical-ipc-problems/",
        "url": "https://www.geeksforgeeks.org/classical-ipc-problems/",
        "topic": "operating systems"
      }
    },
    "id": 27
  },
  {
    "url": "https://www.geeksforgeeks.org/signals-c-set-2/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/signals-c-set-2/?type%3Darticle%26id%3D189201&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nChat application between two processes using signals and shared memory\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/chat-application-between-two-processes-using-signals-and-shared-memory/?ref=next_article_top)\n\n# Communication between two process using signals in C\n\nLast Updated : 03 Feb, 2025\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n12 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**Prerequisite :** [**C signal handling**](https://www.geeksforgeeks.org/signals-c-language/) In this post, the communication between child and parent processes is done using kill() and signal(), fork() system call.\n\n- [**fork()**](https://www.geeksforgeeks.org/fork-system-call/) creates the child process from the parent. The pid can be checked to decide whether it is the child (if pid == 0) or the parent (pid = child process id).\n- The parent can then send messages to child using the pid and kill().\n- The child picks up these signals with signal() and calls appropriate functions.\n\n**Example of how 2 processes can talk to each other using kill() and signal():**\n\nC`\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n// function declaration\nvoid sighup();\nvoid sigint();\nvoid sigquit();\nvoid main()\n{\n    int pid;\n    /* get child process */\n    if ((pid = fork()) < 0) {\n        perror(\"fork\");\n        exit(1);\n    }\n    /* child */\n    if (pid == 0) {\n        signal(SIGHUP, sighup);\n        signal(SIGINT, sigint);\n        signal(SIGQUIT, sigquit);\n        for (;;)\n\n            /* loop forever */\n            ;\n    }\n    /* parent */\n    else\n\n    /* pid holds id of child */\n    {\n        write(STDOUT_FILENO, \"\nPARENT: sending SIGHUP\n\n\", 25);\n        kill(pid, SIGHUP);\n        /* pause for 3 secs */\n        sleep(3);\n        write(STDOUT_FILENO, \"\nPARENT: sending SIGINT\n\n\", 25);\n        kill(pid, SIGINT);\n        /* pause for 3 secs */\n        sleep(3);\n        write(STDOUT_FILENO, \"\nPARENT: sending SIGQUIT\n\n\", 26);\n        kill(pid, SIGQUIT);\n        sleep(3);\n    }\n}\n// sighup() function definition\nvoid sighup()\n{\n\n    /* reset signal */\n    signal(SIGHUP, sighup);\n    write(STDOUT_FILENO, \"CHILD: I have received a SIGHUP\n\", 31);\n}\n// sigint() function definition\nvoid sigint()\n{\n\n    /* reset signal */\n    signal(SIGINT, sigint);\n    write(STDOUT_FILENO, \"CHILD: I have received a SIGINT\n\", 32);\n}\n// sigquit() function definition\nvoid sigquit()\n{\n    write(STDOUT_FILENO, \"My DADDY has Killed me!!!\n\", 26);\n    exit(0);\n}\n`\n\n**Output:**![](https://media.geeksforgeeks.org/wp-content/cdn-uploads/Screenshot-from-2018-08-01-18-31-03.png)\n\n**FAQ:**\n\n**What is signal handling in C?**\n\nSignal handling is a way of dealing with interrupts, exceptions, and signals sent to a process by the operating system or another process. In C, we can use the signal() function to register signal handlers to handle specific signals.\n\n**What is the purpose of fork() system call in the program?**\n\nThe fork() system call creates a new child process by duplicating the calling process. The child process is an exact copy of the parent process, including all its memory and open file descriptors.\n\n**How does the parent process communicate with the child process in this program?**\n\nThe parent process sends signals to the child process using the kill() function, passing the child process ID and the signal number as arguments.\n\n**How does the child process handle signals sent by the parent process?**\n\nThe child process sets up signal handlers for the signals it expects to receive using the signal() function. When a signal is received, the corresponding signal handler function is called.\n\n**What is the purpose of the for(;;) loop in the child process?**\n\nThe for(;;) loop is an infinite loop that keeps the child process running and waiting for signals to be received. Without this loop, the child process would exit immediately after setting up its signal handlers.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/chat-application-between-two-processes-using-signals-and-shared-memory/?ref=next_article)\n\n[Chat application between two processes using signals and shared memory](https://www.geeksforgeeks.org/chat-application-between-two-processes-using-signals-and-shared-memory/?ref=next_article)\n\n[K](https://www.geeksforgeeks.org/user/Kishor%20Mishra/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Kishor Mishra](https://www.geeksforgeeks.org/user/Kishor%20Mishra/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n12\n\nImprove\n\nArticle Tags :\n\n- [C Language](https://www.geeksforgeeks.org/category/programming-language/c/?ref=article_category)\n- [Linux-Unix](https://www.geeksforgeeks.org/category/linux-unix/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n\n### Similar Reads\n\n[Communication between two process using signals in C\\\\\n\\\\\n\\\\\nPrerequisite : C signal handling In this post, the communication between child and parent processes is done using kill() and signal(), fork() system call. fork() creates the child process from the parent. The pid can be checked to decide whether it is the child (if pid == 0) or the parent (pid = chi\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/signals-c-set-2/?ref=ml_lbp)\n[Chat application between two processes using signals and shared memory\\\\\n\\\\\n\\\\\nPrerequisite: C signal handling, IPC through shared memory A signal is used in the UNIX system to notify a process that a particular event has occurred. A signal may be received either synchronously or asynchronously depending on the source and the reason for the event being signalled. A signal must\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/chat-application-between-two-processes-using-signals-and-shared-memory/?ref=ml_lbp)\n[Inter Process Communication (IPC)\\\\\n\\\\\n\\\\\nProcesses need to communicate with each other in many situations, for example, to count occurrences of a word in text file, output of grep command needs to be given to wc command, something like grep -o -i <word> <file> \\| wc -l. Inter-Process Communication or IPC is a mechanism that allo\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/inter-process-communication-ipc/?ref=ml_lbp)\n[Client Server Communication in Operating System\\\\\n\\\\\n\\\\\nIn an Operating System, Client Server Communication refers to the exchange of data and Services among multiple machines or processes. In Client client-server communication System one process or machine acts as a client requesting a service or data, and Another machine or process acts like a server f\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/client-server-communication-in-operating-system/?ref=ml_lbp)\n[Getting System and Process Information Using C Programming and Shell in Linux\\\\\n\\\\\n\\\\\nWhenever you start a new process in Linux it creates a file in /proc/ folder with the same name as that of the process id of the process. In that folder, there is a file named \"status\" which has all the details of the process. We can get those Process Information Through shell as follows: cat /proc/\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/getting-system-and-process-information-using-c-programming-and-shell-in-linux/?ref=ml_lbp)\n[Message based Communication in IPC (inter process communication)\\\\\n\\\\\n\\\\\nPrerequisites - Cloud computing, Load balancing in Cloud Computing, Inter-process Communication In the development of models and technologies, message abstraction is a necessary aspect that enables distributed computing. Distributed system is defined as a system in which components reside at network\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/message-based-communication-in-ipc-inter-process-communication/?ref=ml_lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=ml_lbp)\n[Message Passing Model of Process Communication\\\\\n\\\\\n\\\\\nSo message passing means how a message can be sent from one end to the other end. Either it may be a client-server model or it may be from one node to another node. The formal model for distributed message passing has two timing models one is synchronous and the other is asynchronous. The fundamenta\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/message-passing-model-of-process-communication/?ref=ml_lbp)\n[Exit status of a child process in Linux\\\\\n\\\\\n\\\\\nIt is known that fork() system call is used to create a new process which becomes child of the caller process.\u00c2\u00a0Upon exit, the child leaves an exit status that should be returned to the parent. So, when the child finishes it becomes a zombie.Whenever the child exits or stops, the parent is sent a SIG\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/exit-status-child-process-linux/?ref=ml_lbp)\n[Two State Process Model in Operating System\\\\\n\\\\\n\\\\\nPre-requisite: States of a Process in Operating Systems The process in an operating system passes from different states starting from its formation to its completion. A process consists of program data and its associated data and a process control block (PCB). A process may change its state because\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/two-state-process-model-in-operating-system/?ref=ml_lbp)\n\nLike12\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/signals-c-set-2/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1809491734.1740481584&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102696396~102717421&z=1297932218)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=212h0bs392n7)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=nf3lzjqxxxvu)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Communication between two process using signals in C - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/Screenshot-from-2018-08-01-18-31-03.png",
        "keywords": "C signal handling, fork system call, parent child communication, kill function, signal function, signal handlers, process management, SIGHUP signal, SIGINT signal, SIGQUIT signal, infinite loop, process synchronization, signal handling in C, inter-process communication, child process execution",
        "ogUrl": "https://www.geeksforgeeks.org/signals-c-set-2/",
        "ogDescription": "The article explains how parent and child processes in C communicate using the fork(), kill(), and signal() functions, with the parent sending signals to the child, which handles them through registered signal handlers.",
        "description": "The article explains how parent and child processes in C communicate using the fork(), kill(), and signal() functions, with the parent sending signals to the child, which handles them through registered signal handlers.",
        "scrapeId": "efd82046-496e-483f-b63f-063cff78aef7",
        "sourceURL": "https://www.geeksforgeeks.org/signals-c-set-2/",
        "url": "https://www.geeksforgeeks.org/signals-c-set-2/",
        "topic": "operating systems"
      }
    },
    "id": 28
  },
  {
    "url": "https://www.geeksforgeeks.org/mutex-vs-semaphore/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/mutex-vs-semaphore/?type%3Darticle%26id%3D9102&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nDeadlock, Starvation, and Livelock\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/deadlock-starvation-and-livelock/?ref=next_article_top)\n\n# Mutex vs Semaphore\n\nLast Updated : 21 Oct, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n220 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nIn the Operating System, **Mutex and Semaphores** are kernel resources that provide synchronization services (also known as synchronization\u00a0primitives).\u00a0Synchronization is required when multiple processes are executing concurrently, to avoid conflicts between processes using shared resources. In this article we will see differences between Mutex and Semaphore, their advantages and disadvantages.\n\n## What is Mutex?\n\nA mutex is different from a binary semaphore, which provides a locking mechanism. It stands for [Mutual Exclusion](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/) Object. Mutex is mainly used to provide mutual exclusion to a specific portion of the code so that the process can execute and work with a particular section of the code at a particular time.\u00a0A mutex enforces strict ownership. Only the thread that locks the mutex can unlock it. It is specifically used for locking a resource to ensure that only one thread accesses it at a time. Due to this strict ownership, a mutex is not only typically used for signaling between threads, but it is used for mutual exclusion also to ensuring that a resource is accessed by only one thread at a time.\n\nMutex uses a priority inheritance mechanism to avoid [priority inversion](https://www.geeksforgeeks.org/priority-inversion-what-the-heck/) issues. The priority inheritance mechanism keeps higher-priority processes in the blocked state for the minimum possible time. However, this cannot avoid the priority inversion problem, but it can reduce its effect up to an extent.\n\n### **Advantages of Mutex**\n\n- No race condition arises, as only one process is in the [critical section](https://www.geeksforgeeks.org/g-fact-70/) at a time.\n- Data remains consistent and it helps in maintaining integrity.\n- It is a simple locking mechanism thatinto a critical section and is released while leaving the critical section.\n\n### **Disadvantages of Mutex**\n\n- If after entering into the critical section, the thread sleeps or gets preempted by a high-priority process, no other thread can enter into the critical section. This can lead to [starvation](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/).\n- When the previous thread leaves the critical section, then only other processes can enter into it, there is no other mechanism to lock or unlock the critical section.\n- Implementation of mutex can lead to busy waiting, which leads to the wastage of the CPU cycle.\n\n### **Using Mutex**\n\n**The** [**producer-consumer**](https://www.geeksforgeeks.org/producer-consumer-problem-in-c/) **problem:**\u00a0Consider the standard producer-consumer problem. Assume, we have a buffer of 4096-byte length. A producer thread collects the data and writes it to the buffer. A consumer thread processes the collected data from the buffer. The objective is, that both the threads should not run at the same time.\n\n**Solution:** A mutex provides mutual exclusion, either producer or consumer can have the key (mutex) and proceed with their work. As long as the buffer is filled by the producer, the consumer needs to wait, and vice versa.\u00a0At any point in time, only one thread can work with the entire buffer.\u00a0The concept can be generalized using semaphore.\n\n![Mutex](https://media.geeksforgeeks.org/wp-content/uploads/20241015130619461685/Mutex.png)\n\nMutex\n\n## What is Semaphore?\n\nA semaphore is a non-negative integer variable that is shared between various threads. Semaphore works upon signaling mechanism, in this a thread can be signaled by another thread. It provides a less restrictive control mechanism. Any thread can invoke `signal()` (also known as `release()` or `up()`), and any other thread can invoke `wait()` (also known as `acquire()` or `down()`). There is no strict ownership in semaphores, meaning the thread that signals doesn\u2019t necessarily have to be the same one that waited. Semaphores are often used for coordinating signaling between threads. Semaphore uses two atomic operations for process synchronisation:\n\n- Wait (P)\n- Signal (V)\n\n### **Advantages of Semaphore**\n\n- Multiple threads can access the critical section at the same time.\n- [Semaphores](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/) are machine-independent.\n- Only one process will access the critical section at a time, however, multiple threads are allowed.\n- Semaphores are machine-independent, so they should be run over [microkernel](https://www.geeksforgeeks.org/microkernel-in-operating-systems/).\n- Flexible resource management.\n\n### **Disadvantages of Semaphore**\n\n- It has priority inversion.\n- Semaphore operations (Wait, Signal) must be implemented in the correct manner to avoid deadlock.\n- It leads to a loss of modularity, so semaphores can\u2019t be used for large-scale systems.\n- Semaphore is prone to programming error and this can lead to deadlock or violation of mutual exclusion property.\n- Operating System has to track all the calls to wait and signal operations.\n\n#### **Using Semaphore**\n\n**The** [**producer-consumer**](https://www.geeksforgeeks.org/producer-consumer-problem-using-semaphores-set-1/) **problem:**\u00a0Consider the standard producer-consumer problem. Assume, we have a buffer of 4096-byte length. A producer thread collects the data and writes it to the buffer. A consumer thread processes the collected data from the buffer. The objective is, both the threads should not run at the same time.\n\n**Solution:** A semaphore is a generalized **mutex**. instead a single buffer, we can split the 4 KB buffer into four 1 KB buffers (identical resources). A semaphore can be associated with these four buffers. The consumer and producer can work on different buffers at the same time.\n\n![Semaphore](https://media.geeksforgeeks.org/wp-content/uploads/20241015130721027935/Semaphore.png)\n\nSemaphore\n\n## **Difference Between Mutex and Semaphore**\n\n| Mutex | Semaphore |\n| --- | --- |\n| A mutex is an object. | A semaphore is an integer. |\n| Mutex works upon the locking mechanism. | Semaphore uses signaling mechanism. |\n| Operations on mutex:<br>- Lock<br>- Unlock | Operation on semaphore:<br>- Wait<br>- Signal |\n| Mutex does not have any subtypes. | Semaphore is of two types:<br>- Counting Semaphore<br>- Binary Semaphore |\n| A mutex can only be modified by the process that is requesting or releasing a resource. | Semaphore work with two atomic operations (Wait, signal) which can modify it. |\n| If the mutex is locked then the process needs to wait in the process queue, and mutex can only be accessed once the lock is released. | If the process needs a resource, and no resource is free. So, the process needs to perform a wait operation until the semaphore value is greater than zero. |\n\n## **Misconception of Mutex and Semaphore**\n\nThere is an ambiguity between binary semaphore and mutex. We might have come across\u00a0that a mutex is a binary semaphore. But it is not! The purposes of mutex and semaphore are different. Maybe, due to similarity in their implementation of a mutex would be\u00a0referred\u00a0to as a **binary semaphore**.\u00a0 A mutex is a locking mechanism used to synchronize access to a resource. Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. It means there is ownership associated with a mutex, and only the owner can release the lock (mutex).\n\nA semaphore is a signaling mechanism used to control access to shared resources in an operating system. For example, imagine you are downloading a large file on your computer (Task A) while simultaneously trying to print a document (Task B). When the print job is initiated, it triggers a semaphore that checks if the download is complete.\n\nIf the download is still in progress, the semaphore prevents the print task from proceeding, effectively saying, \u201cWait until the download finishes.\u201d Once the download completes, the semaphore signals that Task B can start printing. This ensures that both tasks do not interfere with each other and helps manage system resources efficiently, allowing tasks to run smoothly without conflict.\n\n## Conclusion\n\nMutexes and semaphores are synchronization tools used to manage concurrent access to shared resources. Mutexes ensure mutual exclusion by allowing only one thread to lock a resource at a time. Semaphores use signaling to coordinate access, enabling multiple threads to share resources. While mutexes prevent race conditions, semaphores offer more flexibility. Choosing the right tool depends on the specific synchronization needs.\n\n## Frequently Asked Questions on Mutex vs Semaphore \u2013 FAQ\u2019s\n\n### Can a thread acquire more than one lock (Mutex)?\n\n> Yes, it is possible that a thread is in need of more than one resource, hence the locks. If any lock is not available the thread will wait (block)\u00a0on the lock.\n\n### What happens if a non-recursive mutex is locked more than once?\n\n> Deadlock. If a thread that had already locked a mutex, tries to lock the mutex again, it will enter into the\u00a0waiting\u00a0list of that mutex, which results in a deadlock. It is because no other thread can unlock the mutex. An operating system implementer can exercise care in identifying the owner of the mutex and return if it is already locked by the same thread to prevent deadlocks.\n\n### What are events?\n\n> The semantics of mutex, semaphore, event, critical section, etc are the same. All are synchronization primitives. Based on their cost in using them they are different. We should consult the OS documentation for exact details.\n\n### Can we acquire mutex/semaphore in an Interrupt Service Routine?\n\n> An ISR will run\u00a0asynchronously\u00a0in the context of the current running thread. It is **not recommended** to query (blocking call) the availability of synchronization primitives in an ISR. The ISR is meant to be short, the call to mutex/semaphore may block the current running thread. However, an ISR can signal a semaphore or unlock a mutex.\n\n### What do we mean by \u201cthread blocking on mutex/semaphore\u201d when they are not available?\n\n> Every synchronization primitive has a waiting list associated with it. When the resource is not available, the requesting thread will be moved from the running list of processors to the waiting list of the synchronization primitive. When the resource is available, the higher priority thread on the waiting list gets the resource (more precisely, it depends on the scheduling policies).\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/deadlock-starvation-and-livelock/?ref=next_article)\n\n[Deadlock, Starvation, and Livelock](https://www.geeksforgeeks.org/deadlock-starvation-and-livelock/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n220\n\nImprove\n\nArticle Tags :\n\n- [Computer Subject](https://www.geeksforgeeks.org/category/computer-subject/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n\n### Similar Reads\n\n[Types of Operating Systems\\\\\n\\\\\n\\\\\nOperating Systems can be categorized according to different criteria like whether an operating system is for mobile devices (examples Android and iOS) or desktop (examples Windows and Linux). In this article, we are going to classify based on functionalities an operating system provides. 1. Batch Op\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/types-of-operating-systems/?ref=lbp)\n[Need and Functions of Operating Systems\\\\\n\\\\\n\\\\\nThe fundamental goal of an Operating System is to execute user programs and to make tasks easier. Various application programs along with hardware systems are used to perform this work. Operating System is software that manages and controls the entire set of resources and effectively utilizes every\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/need-and-functions-of-operating-systems/?ref=lbp)\n[Introduction of Process Management\\\\\n\\\\\n\\\\\nProcess Management for a single tasking or batch processing system is easy as only one process is active at a time. With multiple processes (multiprogramming or multitasking) being active, the process management becomes complex as a CPU needs to be efficiently utilized by multiple processes. Multipl\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/introduction-of-process-management/?ref=lbp)\n[States of a Process in Operating Systems\\\\\n\\\\\n\\\\\nIn an operating system, a process is a program that is being executed. During its execution, a process goes through different states. Understanding these states helps us see how the operating system manages processes, ensuring that the computer runs efficiently. Please refer Process in Operating Sys\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/?ref=lbp)\n[CPU Scheduling in Operating Systems\\\\\n\\\\\n\\\\\nCPU scheduling is a process used by the operating system to decide which task or process gets to use the CPU at a particular time. This is important because a CPU can only handle one task at a time, but there are usually many tasks that need to be processed. The following are different purposes of a\\\\\n\\\\\n9 min read](https://www.geeksforgeeks.org/cpu-scheduling-in-operating-systems/?ref=lbp)\n[Preemptive and Non-Preemptive Scheduling\\\\\n\\\\\n\\\\\nIn operating systems, scheduling is the method by which processes are given access the CPU. Efficient scheduling is essential for optimal system performance and user experience. There are two primary types of CPU scheduling: preemptive and non-preemptive. Understanding the differences between preemp\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/preemptive-and-non-preemptive-scheduling/?ref=lbp)\n[Starvation and Aging in Operating Systems\\\\\n\\\\\n\\\\\nStarvation occurs when a process in the OS runs out of resources because other processes are using it. This is a problem with resource management while Operating systems employ aging as a scheduling approach to keep them from starving. It is one of the most common scheduling algorithms in batch syst\\\\\n\\\\\n7 min read](https://www.geeksforgeeks.org/starvation-and-aging-in-operating-systems/?ref=lbp)\n[Introduction of System Call\\\\\n\\\\\n\\\\\nA system call is a programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. A system call is a way for programs to interact with the operating system. A computer program makes a system call when it requests the operating system's kern\\\\\n\\\\\n11 min read](https://www.geeksforgeeks.org/introduction-of-system-call/?ref=lbp)\n[Difference between User Level thread and Kernel Level thread\\\\\n\\\\\n\\\\\nUser-level threads are threads that are managed entirely by the user-level thread library, without any direct intervention from the operating system's kernel, whereas, Kernel-level threads are threads that are managed directly by the operating system's kernel. In this article, we will see the overvi\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/difference-between-user-level-thread-and-kernel-level-thread/?ref=lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=lbp)\n\nLike220\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/mutex-vs-semaphore/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=927826749.1740481594&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1072686756)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=wm283dvmb1ua)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=c4281q8670gj)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Mutex vs Semaphore - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "http://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200-1.png",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/mutex-vs-semaphore/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "fcc1de5e-53ba-4aa8-b780-e98fc4b6c210",
        "sourceURL": "https://www.geeksforgeeks.org/mutex-vs-semaphore/",
        "url": "https://www.geeksforgeeks.org/mutex-vs-semaphore/",
        "topic": "operating systems"
      }
    },
    "id": 29
  },
  {
    "url": "https://www.geeksforgeeks.org/monitors-in-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/monitors-in-process-synchronization/?type%3Darticle%26id%3D142468&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nIntroduction of Process Synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=next_article_top)\n\n# Monitors in Process Synchronization\n\nLast Updated : 24 Mar, 2023\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n82 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nMonitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion, condition variables, and data encapsulation in a single construct.\n\n1. A monitor is essentially a module that encapsulates a shared resource and provides access to that resource through a set of procedures. The procedures provided by a monitor ensure that only one process can access the shared resource at any given time, and that processes waiting for the resource are suspended until it becomes available.\n2. Monitors are used to simplify the implementation of concurrent programs by providing a higher-level abstraction that hides the details of synchronization. Monitors provide a structured way of sharing data and synchronization information, and eliminate the need for complex synchronization primitives such as semaphores and locks.\n3. The key advantage of using monitors for process synchronization is that they provide a simple, high-level abstraction that can be used to implement complex concurrent systems. Monitors also ensure that synchronization is encapsulated within the module, making it easier to reason about the correctness of the system.\n\nHowever, monitors have some limitations. For example, they can be less efficient than lower-level synchronization primitives such as semaphores and locks, as they may involve additional overhead due to their higher-level abstraction. Additionally, monitors may not be suitable for all types of synchronization problems, and in some cases, lower-level primitives may be required for optimal performance.\n\nThe monitor is one of the ways to achieve Process synchronization. The monitor is supported by programming languages to achieve mutual exclusion between processes. For example Java Synchronized methods. Java provides wait() and notify() constructs.\n\n1. It is the collection of condition variables and procedures combined together in a special kind of module or a package.\n2. The processes running outside the monitor can\u2019t access the internal variable of the monitor but can call procedures of the monitor.\n3. Only one process at a time can execute code inside monitors.\n\n**Syntax:** [![monitors](https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/monitors-300x255.png)](https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/monitors.png) **Condition Variables:** Two different operations are performed on the condition variables of the monitor.\n\n```\nWait.\nsignal.\n```\n\nlet say we have 2 condition variables **condition x, y; // Declaring variable** **Wait operation** x.wait() : Process performing wait operation on any condition variable are suspended. The suspended processes are placed in block queue of that condition variable. **Note:** Each condition variable has its unique block queue. \u00a0\u00a0**Signal operation** x.signal(): When a process performs signal operation on condition variable, one of the blocked processes is given chance.\n\n```\nIf (x block queue empty)\n  // Ignore signal\nelse\n  // Resume a process from block queue.\n```\n\n**Advantages of Monitor:** Monitors have the advantage of making parallel programming easier and less error prone than using techniques such as semaphore. **Disadvantages of Monitor:** Monitors have to be implemented as part of the programming language . The compiler must generate code for them. This gives the compiler the additional burden of having to know what operating system facilities are available to control access to critical sections in concurrent processes. Some languages that do support monitors are Java,C#,Visual Basic,Ada and concurrent Euclid.\n\n[iframe](https://cdnads.geeksforgeeks.org/instream/video.html)\n\nMonitors in Process Synchronization\n\n[Visit Course![explore course icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/Vector11.svg)](https://gfgcdn.com/tu/U4D/)\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=next_article)\n\n[Introduction of Process Synchronization](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=next_article)\n\n[![author](https://media.geeksforgeeks.org/auth/profile/sb7ciorr5k5t22woqkes)](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[kartik](https://www.geeksforgeeks.org/user/kartik/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n82\n\nImprove\n\nArticle Tags :\n\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Process Synchronization](https://www.geeksforgeeks.org/tag/os-process-synchronization/?ref=article_tag)\n\n### Similar Reads\n\n[Monitors in Process Synchronization\\\\\n\\\\\n\\\\\nMonitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion,\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/monitors-in-process-synchronization/?ref=ml_lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=ml_lbp)\n[Process Synchronization \\| Set 2\\\\\n\\\\\n\\\\\nProcess Synchronization is a technique which is used to coordinate the process that use shared Data. There are two types of Processes in an Operating Systems:- Independent Process - The process that does not affect or is affected by the other process while its execution then the process is called In\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/process-synchronization-set-2/?ref=ml_lbp)\n[Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=ml_lbp)\n[Dekker's algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Process Synchronization, Inter Process Communication To obtain such a mutual exclusion, bounded waiting, and progress there have been several algorithms implemented, one of which is Dekker's Algorithm. To understand the algorithm let's understand the solution to the critical section p\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Synchronization Examples\\\\\n\\\\\n\\\\\nThe Synchronization is an important concept in operating systems that ensures the smooth and coordinated execution of processes and threads. It is the task of coordinating the execution of processes in such a way that no two processes can access the same shared data and resource. It is a critical pa\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/synchronization-examples/?ref=ml_lbp)\n[Centralized Clock Synchronization\\\\\n\\\\\n\\\\\nCentralized Clock Synchronization is an internal clock synchronization approach where clocks of system are synchronized with one of clock of system. Clock synchronization is carried out to make all clocks in network agree on the same value. In centralized clock synchronization, one of clocks is appo\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/centralized-clock-synchronization/?ref=ml_lbp)\n[Mutual Exclusion in Synchronization\\\\\n\\\\\n\\\\\nDuring concurrent execution of processes, processes need to enter the critical section (or the section of the program shared across processes) at times for execution. It might happen that because of the execution of multiple processes at once, the values stored in the critical section become inconsi\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/mutual-exclusion-in-synchronization/?ref=ml_lbp)\n[Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=ml_lbp)\n\nLike82\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/monitors-in-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1593434867.1740481605&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1052741791)[iframe](https://td.doubleclick.net/td/rul/796001856?random=1740481604934&cv=11&fst=1740481604934&fmt=3&bg=ffffff&guid=ON&async=1&gtm=45be52o0v877914216za200zb884918195&gcd=13l3l3R3l5l1&dma=0&tag_exp=101732279~101732281~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&u_w=1280&u_h=1024&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fmonitors-in-process-synchronization%2F&hn=www.googleadservices.com&frm=0&tiba=Monitors%20in%20Process%20Synchronization%20-%20GeeksforGeeks&npa=0&pscdl=noapi&auid=1841348356.1740481605&uaa=&uab=&uafvl=&uamb=0&uam=&uap=&uapv=&uaw=0&fledge=1&data=event%3Dgtag.config)[iframe](about:blank)[iframe](about:blank)[iframe](about:blank)[iframe](about:blank)[iframe](about:blank)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=h59fxqhoo9yg)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=hqj7cuaklpt7)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Monitors in Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2015/06/monitors-300x255.png",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/monitors-in-process-synchronization/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "a703dd07-3606-4ace-a36c-de1212761ec5",
        "sourceURL": "https://www.geeksforgeeks.org/monitors-in-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/monitors-in-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 30
  },
  {
    "url": "https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [DSA](https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Analysis of Algorithms](https://www.geeksforgeeks.org/design-and-analysis-of-algorithms/?ref=shm)\n- [Sorting](https://www.geeksforgeeks.org/sorting-algorithms/?ref=shm)\n- [Searching](https://www.geeksforgeeks.org/searching-algorithms/?ref=shm)\n- [Greedy](https://www.geeksforgeeks.org/greedy-algorithms/?ref=shm)\n- [Recursion](https://www.geeksforgeeks.org/recursion-algorithms/?ref=shm)\n- [Backtracking](https://www.geeksforgeeks.org/backtracking-algorithms/?ref=shm)\n- [Dynamic Programming](https://www.geeksforgeeks.org/dynamic-programming/?ref=shm)\n- [Divide and Conquer](https://www.geeksforgeeks.org/divide-and-conquer/?ref=shm)\n- [Geometric Algorithms](https://www.geeksforgeeks.org/geometric-algorithms/?ref=shm)\n- [Mathematical Algorithms](https://www.geeksforgeeks.org/mathematical-algorithms/?ref=shm)\n- [Pattern Searching](https://www.geeksforgeeks.org/pattern-searching/?ref=shm)\n- [Bitwise Algorithms](https://www.geeksforgeeks.org/bitwise-algorithms/?ref=shm)\n- [Branch & Bound](https://www.geeksforgeeks.org/branch-and-bound-algorithm/?ref=shm)\n- [Randomized Algorithms](https://www.geeksforgeeks.org/randomized-algorithms/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?type%3Darticle%26id%3D170554&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nBakery Algorithm in Process Synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?ref=next_article_top)\n\n# Dekker\u2019s algorithm in Process Synchronization\n\nLast Updated : 20 Mar, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n8 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nPrerequisite \u2013 [Process Synchronization](https://www.geeksforgeeks.org/process-synchronization-set-1/), [Inter Process Communication](https://www.geeksforgeeks.org/inter-process-communication/)\n\nTo obtain such a mutual exclusion, bounded waiting, and progress there have been several algorithms implemented, one of which is Dekker\u2019s Algorithm. To understand the algorithm let\u2019s understand the solution to the critical section problem first.\n\nA process is generally represented as :\n\n```\ndo {\n    //entry section\n        critical section\n    //exit section\n        remainder section\n} while (TRUE);\n\n```\n\nThe solution to the critical section problem must ensure the following three conditions:\n\n1. Mutual Exclusion\n2. Progress\n3. Bounded Waiting\n\nOne of the solutions for ensuring above all factors is [Peterson\u2019s solution](https://www.geeksforgeeks.org/petersons-algorithm-for-mutual-exclusion-set-1/).\n\nAnother one is **Dekker\u2019s Solution**. Dekker\u2019s algorithm was the first probably-correct solution to the critical section problem. It allows two threads to share a single-use resource without conflict, using only shared memory for communication. It avoids the strict alternation of a na\u00efve turn-taking algorithm, and was one of the first mutual exclusion algorithms to be invented.\n\nAlthough there are many versions of Dekker\u2019s Solution, the final or 5th version is the one that satisfies all of the above conditions and is the most efficient of them all.\n\n**Note \u2013** Dekker\u2019s Solution, mentioned here, ensures mutual exclusion between two processes only, it could be extended to more than two processes with the proper use of arrays and variables.\n\n**Algorithm \u2013** It requires both an array of Boolean values and an integer variable:\n\n```\nvar flag: array [0..1] of boolean;\nturn: 0..1;\nrepeat\n        flag[i] := true;\n        while flag[j] do\n                if turn = j then\n                begin\n                        flag[i] := false;\n                        while turn = j do no-op;\n                        flag[i] := true;\n                end;\n                critical section\n        turn := j;\n        flag[i] := false;\n                remainder section\nuntil false;\n\n```\n\n**First Version of Dekker\u2019s Solution \u2013** The idea is to use a common or shared thread number between processes and stop the other process from entering its critical section if the shared thread indicates the former one already running.\n\nCPP`\nMain()\n{\n    int thread_number = 1;\n    startThreads();\n}\nThread1()\n{\n    do {\n        // entry section\n        // wait until threadnumber is 1\n        while (threadnumber == 2)\n            ;\n        // critical section\n        // exit section\n        // give access to the other thread\n        threadnumber = 2;\n        // remainder section\n    } while (completed == false)\n}\nThread2()\n{\n    do {\n        // entry section\n        // wait until threadnumber is 2\n        while (threadnumber == 1)\n            ;\n        // critical section\n        // exit section\n        // give access to the other thread\n        threadnumber = 1;\n        // remainder section\n    } while (completed == false)\n}\n`Java`\n// Java program for the above approach\nimport java.lang.Thread;\npublic class ThreadExample {\n    static boolean completed = false;\n    static int threadNumber = 1;\n    static void Thread1()\n    {\n        boolean doWhile = false;\n        while (!completed || !doWhile) {\n            doWhile = true;\n            // entry section wait until\n            // threadNumber is 1\n            while (threadNumber == 2) {\n                Thread.yield();\n            }\n            // critical section\n            // exit section give access\n            // to the other thread\n            threadNumber = 2;\n            // remainder section\n        }\n    }\n    static void Thread2()\n    {\n        boolean doWhile = false;\n        while (!completed || !doWhile) {\n            doWhile = true;\n            // entry section wait until\n            // threadNumber is 2\n            while (threadNumber == 1) {\n                Thread.yield();\n            }\n            // critical section\n            // exit section give access\n            // to the other thread\n            threadNumber = 1;\n            // remainder section\n        }\n    }\n    static void StartThreads()\n    {\n        Thread t1 = new Thread(ThreadExample::Thread1);\n        Thread t2 = new Thread(ThreadExample::Thread2);\n        t1.start();\n        t2.start();\n    }\n    // Driver Code\n    public static void main(String[] args)\n    {\n        threadNumber = 1;\n        StartThreads();\n    }\n}\n`C#`\nusing System.Threading;\nclass ThreadExample {\n    static bool completed = false;\n    static int threadNumber = 1;\n    static void Thread1()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile) {\n            doWhile = true;\n            // entry section\n            // wait until threadNumber is 1\n            while (threadNumber == 2) {\n                Thread.Yield();\n            }\n            // critical section\n            // exit section\n            // give access to the other thread\n            threadNumber = 2;\n            // remainder section\n        }\n    }\n    static void Thread2()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile) {\n            doWhile = true;\n            // entry section\n            // wait until threadNumber is 2\n            while (threadNumber == 1) {\n                Thread.Yield();\n            }\n            // critical section\n            // exit section\n            // give access to the other thread\n            threadNumber = 1;\n            // remainder section\n        }\n    }\n    static void StartThreads()\n    {\n        Thread t1 = new Thread(Thread1);\n        Thread t2 = new Thread(Thread2);\n        t1.Start();\n        t2.Start();\n    }\n    static void Main(string[] args)\n    {\n        threadNumber = 1;\n        StartThreads();\n    }\n}\n// This code is contributed by Shivhack999\n`JavaScript`\nlet thread_number = 1;\nfunction Thread1() {\n    let doWhile = false;\n    while (!completed || !doWhile) {\n        doWhile = true;\n        // entry section\n        // wait until threadnumber is 1\n        while (thread_number === 2) {\n            // pass\n        }\n        // critical section\n        // exit section\n        // give access to the other thread\n        thread_number = 2;\n        // remainder section\n    }\n}\nfunction Thread2() {\n    let doWhile = false;\n    while (!completed || !doWhile) {\n        doWhile = true;\n        // entry section\n        // wait until threadnumber is 2\n        while (thread_number === 1) {\n            // pass\n        }\n        // critical section\n        // exit section\n        // give access to the other thread\n        thread_number = 1;\n        // remainder section\n    }\n}\nstartThreads();\n`Python3`\ndef Thread1():\n    doWhile=False\n    while not completed or not doWhile:\n        doWhile=True\n        # entry section\n        # wait until threadnumber is 1\n        while (threadnumber == 2):\n            pass\n        # critical section\n        # exit section\n        # give access to the other thread\n        threadnumber = 2\n        # remainder section\ndef Thread2():\n    doWhile=False\n    while not completed or not doWhile:\n        doWhile=True\n        # entry section\n        # wait until threadnumber is 2\n        while (threadnumber == 1):\n            pass\n        # critical section\n        # exit section\n        # give access to the other thread\n        threadnumber = 1\n        # remainder section\nif __name__ == '__main__':\n    thread_number = 1\n    startThreads()\n`\n\nThe problem arising in the above implementation is lockstep synchronization, i.e each thread depends on the other for its execution. If one of the processes completes, then the second process runs, gives access to the completed one, and waits for its turn, however, the former process is already completed and would never run to return the access back to the latter one. Hence, the second process waits infinitely then.\n\n**Second Version of Dekker\u2019s Solution \u2013** To remove lockstep synchronization, it uses two flags to indicate its current status and updates them accordingly at the entry and exit section.\n\nCPP`\nMain()\n{\n    // flags to indicate if each thread is in\n    // its critical section or not.\n    boolean thread1 = false;\n    boolean thread2 = false;\n    startThreads();\n}\nThread1()\n{\n    do {\n        // entry section\n        // wait until thread2 is in its critical section\n        while (thread2 == true)\n            ;\n        // indicate thread1 entering its critical section\n        thread1 = true;\n        // critical section\n        // exit section\n        // indicate thread1 exiting its critical section\n        thread1 = false;\n        // remainder section\n    } while (completed == false)\n}\nThread2()\n{\n    do {\n        // entry section\n        // wait until thread1 is in its critical section\n        while (thread1 == true)\n            ;\n        // indicate thread2 entering its critical section\n        thread2 = true;\n        // critical section\n        // exit section\n        // indicate thread2 exiting its critical section\n        thread2 = false;\n        // remainder section\n    } while (completed == false)\n}\n`Java`\npublic class MutualExclusion {\n    // flags to indicate if each thread is in\n    // its critical section or not\n    boolean thread1 = false;\n    boolean thread2 = false;\n    // method to start the threads\n    public void startThreads() {\n        new Thread(new Runnable() {\n            public void run() {\n                thread1();\n            }\n        }).start();\n        new Thread(new Runnable() {\n            public void run() {\n                thread2();\n            }\n        }).start();\n    }\n    public void thread1() {\n        do {\n            // entry section\n            // wait until thread2 is in its critical section\n            while (thread2 == true);\n            // indicate thread1 entering its critical section\n            thread1 = true;\n            // critical section\n            // exit section\n            // indicate thread1 exiting its critical section\n            thread1 = false;\n            // remainder section\n        } while (completed == false);\n    }\n    public void thread2() {\n        do {\n            // entry section\n            // wait until thread1 is in its critical section\n            while (thread1 == true);\n            // indicate thread2 entering its critical section\n            thread2 = true;\n            // critical section\n            // exit section\n            // indicate thread2 exiting its critical section\n            thread2 = false;\n            // remainder section\n        } while (completed == false);\n    }\n    public static void main(String[] args) {\n        MutualExclusion me = new MutualExclusion();\n        me.startThreads();\n    }\n}\n`C#`\nusing System;\nusing System.Threading;\nclass Program\n{\n    static bool thread1 = false;\n    static bool thread2 = false;\n    static bool completed = false;\n    static void Main(string[] args)\n    {\n        // Start both threads\n        Thread threadOne = new Thread(new ThreadStart(Thread1));\n        Thread threadTwo = new Thread(new ThreadStart(Thread2));\n        threadOne.Start();\n        threadTwo.Start();\n    }\n    static void Thread1()\n    {\n        do\n        {\n            // entry section\n            // wait until thread2 is in its critical section\n            while (thread2)\n            {\n                // Spin-wait\n            }\n            // indicate thread1 entering its critical section\n            thread1 = true;\n            // critical section\n            // exit section\n            // indicate thread1 exiting its critical section\n            thread1 = false;\n            // remainder section\n        }\n        while (!completed);\n    }\n    static void Thread2()\n    {\n        do\n        {\n            // entry section\n            // wait until thread1 is in its critical section\n            while (thread1)\n            {\n                // Spin-wait\n            }\n            // indicate thread2 entering its critical section\n            thread2 = true;\n            // critical section\n            // exit section\n            // indicate thread2 exiting its critical section\n            thread2 = false;\n            // remainder section\n        }\n        while (!completed);\n    }\n}\n`JavaScript`\nlet thread1InCriticalSection = false;\nlet thread2InCriticalSection = false;\nfunction thread1() {\n// entry section\nPromise.resolve().then(() => {\n    // wait until thread2 is in its critical section\n    while (thread2InCriticalSection) {}\n    // indicate thread1 entering its critical section\n    thread1InCriticalSection = true;\n    // critical section\n    // exit section\n    // indicate thread1 exiting its critical section\n    thread1InCriticalSection = false;\n    // remainder section\n    thread1();\n});\n}\nfunction thread2() {\n// entry section\nPromise.resolve().then(() => {\n    // wait until thread1 is in its critical section\n    while (thread1InCriticalSection) {}\n    // indicate thread2 entering its critical section\n    thread2InCriticalSection = true;\n    // critical section\n    // exit section\n    // indicate thread2 exiting its critical section\n    thread2InCriticalSection = false;\n    // remainder section\n    thread2();\n});\n}\nthread1(); // start thread1\nthread2(); // start thread2\n`Python3`\ndef Thread1():\n    doWhile=False\n    while not completed or not doWhile:\n        doWhile=True\n        # entry section\n        # wait until thread2 is in its critical section\n        while (thread2):\n            pass\n        # indicate thread1 entering its critical section\n        thread1 = True\n        # critical section\n        # exit section\n        # indicate thread1 exiting its critical section\n        thread1 = False\n        # remainder section\ndef Thread2():\n    doWhile=False\n    while not completed or not doWhile:\n        doWhile=True\n        # entry section\n        # wait until thread1 is in its critical section\n        while (thread1):\n            pass\n        # indicate thread1 entering its critical section\n        thread2 = True\n        # critical section\n        # exit section\n        # indicate thread2 exiting its critical section\n        thread2 = False\n        # remainder section\n\nif __name__ == '__main__':\n    # flags to indicate if each thread is in\n    # its critical section or not.\n    thread1 = False\n    thread2 = False\n    startThreads()\n`\n\nThe problem arising in the above version is mutual exclusion itself. If threads are preempted (stopped) during flag updation ( i.e during current\\_thread = true ) then, both the threads enter their critical section once the preempted thread is restarted, also the same can be observed at the start itself, when both the flags are false.\n\n**Third Version of Dekker\u2019s Solution \u2013** To re-ensure mutual exclusion, it sets the flags before the entry section itself.\n\nC++`\nMain()\n{\n    // flags to indicate if each thread is in\n    // queue to enter its critical section\n    boolean thread1wantstoenter = false;\n    boolean thread2wantstoenter = false;\n    startThreads();\n}\nThread1()\n{\n    do {\n        thread1wantstoenter = true;\n        // entry section\n        // wait until thread2 wants to enter\n        // its critical section\n        while (thread2wantstoenter == true)\n            ;\n        // critical section\n        // exit section\n        // indicate thread1 has completed\n        // its critical section\n        thread1wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\nThread2()\n{\n    do {\n        thread2wantstoenter = true;\n        // entry section\n        // wait until thread1 wants to enter\n        // its critical section\n        while (thread1wantstoenter == true)\n            ;\n        // critical section\n        // exit section\n        // indicate thread2 has completed\n        // its critical section\n        thread2wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\n`Java`\nclass SharedData {\n    static boolean completed = false;\n}\nclass Thread1 extends Thread {\n    private static boolean thread1wantstoenter = false;\n    private static boolean thread2wantstoenter = false;\n    @Override\n    public void run() {\n        do {\n            thread1wantstoenter = true;\n            // Entry section\n            // Wait until Thread2 wants to enter its critical section\n            while (thread2wantstoenter)\n                ;\n            // Critical section\n            System.out.println(\"Thread1 is in the critical section\");\n            // Exit section\n            // Indicate Thread1 has completed its critical section\n            thread1wantstoenter = false;\n            // Remainder section\n        } while (!SharedData.completed);\n    }\n}\nclass Thread2 extends Thread {\n    private static boolean thread1wantstoenter = false;\n    private static boolean thread2wantstoenter = false;\n    @Override\n    public void run() {\n        do {\n            thread2wantstoenter = true;\n            // Entry section\n            // Wait until Thread1 wants to enter its critical section\n            while (thread1wantstoenter)\n                ;\n            // Critical section\n            System.out.println(\"Thread2 is in the critical section\");\n            // Exit section\n            // Indicate Thread2 has completed its critical section\n            thread2wantstoenter = false;\n            // Remainder section\n        } while (!SharedData.completed);\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        SharedData.completed = false;\n        Thread1 thread1 = new Thread1();\n        Thread2 thread2 = new Thread2();\n        thread1.start();\n        thread2.start();\n        // Assuming some condition when threads should stop\n        // For demonstration purposes, let's say after a certain time\n        try {\n            Thread.sleep(5000); // Sleep for 5 seconds\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        SharedData.completed = true; // Stop the threads\n    }\n}\n`C#`\nusing System;\nusing System.Threading;\nclass Program\n{\n    private static AutoResetEvent thread1Event = new AutoResetEvent(false);\n    private static AutoResetEvent thread2Event = new AutoResetEvent(false);\n    private static bool completed = false;\n    static void Main()\n    {\n        StartThreads();\n    }\n    static void StartThreads()\n    {\n        // Create threads for Thread1 and Thread2\n        Thread t1 = new Thread(Thread1);\n        Thread t2 = new Thread(Thread2);\n        // Start the threads\n        t1.Start();\n        t2.Start();\n        // Wait for both threads to complete or a timeout\n        t1.Join(5000); // Set a timeout (adjust as needed)\n        t2.Join(5000); // Set a timeout (adjust as needed)\n        // If threads do not complete within the timeout, consider alternative handling\n        if (t1.IsAlive || t2.IsAlive)\n        {\n            Console.WriteLine(\"Threads did not complete within the timeout.\");\n            // Perform additional handling or force termination as needed\n        }\n        else\n        {\n            Console.WriteLine(\"Both threads completed.\");\n        }\n    }\n    static void Thread1()\n    {\n        do\n        {\n            // Entry section\n            thread1Event.Set();\n            // Wait until Thread2 wants to enter its critical section or completion\n            if (!completed)\n            {\n                thread2Event.WaitOne();\n            }\n            // Critical section\n            // Exit section\n            // Indicate Thread1 has completed its critical section\n            thread1Event.Reset();\n            // Remainder section\n        } while (!completed);\n    }\n    static void Thread2()\n    {\n        do\n        {\n            // Entry section\n            thread2Event.Set();\n            // Wait until Thread1 wants to enter its critical section or completion\n            if (!completed)\n            {\n                thread1Event.WaitOne();\n            }\n            // Critical section\n            // Exit section\n            // Indicate Thread2 has completed its critical section\n            thread2Event.Reset();\n            // Remainder section\n        } while (!completed);\n    }\n}\n`JavaScript``\nlet thread1wantstoenter = false;\nlet thread2wantstoenter = false;\nlet completed = false; // Variable to indicate if both threads have completed\n// Function to simulate thread execution\nasync function runThread(threadName, wantstoenter, otherThreadWantsToEnter) {\n    do {\n        wantstoenter = true;\n        while (otherThreadWantsToEnter) {\n            // Wait for a random amount of time\n            await wait(100); // Simulating random wait time\n        }\n        // Entry section\n        // Wait until the other thread wants to enter its critical section\n        // Critical section\n        console.log(`${threadName} is in the critical section`);\n        // Exit section\n        // Indicate the current thread has completed its critical section\n        wantstoenter = false;\n        // Remainder section\n        console.log(`${threadName} is executing the remainder section`);\n    } while (!completed);\n}\n// Function to simulate waiting\nfunction wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n// Start both threads\nasync function startThreads() {\n    await Promise.all([\\\n        runThread('Thread1', thread1wantstoenter, thread2wantstoenter),\\\n        runThread('Thread2', thread2wantstoenter, thread1wantstoenter)\\\n    ]);\n}\n// Start the threads\nstartThreads().then(() => {\n    console.log(\"Both threads have completed their execution\");\n});\n``Python3`\nif __name__=='__main__':\n    # flags to indicate if each thread is in\n    # queue to enter its critical section\n    thread1wantstoenter = False\n    thread2wantstoenter = False\n    startThreads()\ndef Thread1():\n    doWhile=False\n    while (completed == False or not doWhile):\n        doWhile=True\n        thread1wantstoenter = True\n        # entry section\n        # wait until thread2 wants to enter\n        # its critical section\n        while (thread2wantstoenter == True):\n            pass\n\n        # critical section\n        # exit section\n        # indicate thread1 has completed\n        # its critical section\n        thread1wantstoenter = False\n        # remainder section\ndef Thread2():\n    doWhile=False\n    while (completed == False or not doWhile) :\n        doWhile=True\n        thread2wantstoenter = True\n        # entry section\n        # wait until thread1 wants to enter\n        # its critical section\n        while (thread1wantstoenter == True):\n            pass\n\n        # critical section\n        # exit section\n        # indicate thread2 has completed\n        # its critical section\n        thread2wantstoenter = False\n        # remainder section\n`\n\nThe problem with this version is a deadlock possibility. Both threads could set their flag as true simultaneously and both will wait infinitely later on.\n\n**Fourth Version of Dekker\u2019s Solution \u2013** Uses small time interval to recheck the condition, eliminates deadlock, and ensures mutual exclusion as well.\n\nCPP`\nMain()\n{\n    // flags to indicate if each thread is in\n    // queue to enter its critical section\n    boolean thread1wantstoenter = false;\n    boolean thread2wantstoenter = false;\n    startThreads();\n}\nThread1()\n{\n    do {\n        thread1wantstoenter = true;\n        while (thread2wantstoenter == true) {\n            // gives access to other thread\n            // wait for random amount of time\n            thread1wantstoenter = false;\n            thread1wantstoenter = true;\n        }\n        // entry section\n        // wait until thread2 wants to enter\n        // its critical section\n        // critical section\n        // exit section\n        // indicate thread1 has completed\n        // its critical section\n        thread1wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\nThread2()\n{\n    do {\n        thread2wantstoenter = true;\n        while (thread1wantstoenter == true) {\n            // gives access to other thread\n            // wait for random amount of time\n            thread2wantstoenter = false;\n            thread2wantstoenter = true;\n        }\n        // entry section\n        // wait until thread1 wants to enter\n        // its critical section\n        // critical section\n        // exit section\n        // indicate thread2 has completed\n        // its critical section\n        thread2wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\n`Java`\npublic class TwoThreadMutex {\n    // flags to indicate if each thread wants to\n    // enter its critical section\n    private static boolean thread1wantstoenter = false;\n    private static boolean thread2wantstoenter = false;\n    public static void main(String[] args) {\n        startThreads();\n    }\n    private static void startThreads() {\n        Thread t1 = new Thread(TwoThreadMutex::Thread1);\n        Thread t2 = new Thread(TwoThreadMutex::Thread2);\n        t1.start();\n        t2.start();\n        try {\n            t1.join();\n            t2.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    private static void Thread1() {\n        do {\n            thread1wantstoenter = true;\n            while (thread2wantstoenter == true) {\n                // gives access to other thread\n                // wait for random amount of time\n                thread1wantstoenter = false;\n                thread1wantstoenter = true;\n            }\n            // entry section\n            // wait until thread2 wants to enter\n            // its critical section\n            // critical section\n            // exit section\n            // indicate thread1 has completed\n            // its critical section\n            thread1wantstoenter = false;\n            // remainder section\n        } while (completed == false);\n    }\n    private static void Thread2() {\n        do {\n            thread2wantstoenter = true;\n            while (thread1wantstoenter == true) {\n                // gives access to other thread\n                // wait for random amount of time\n                thread2wantstoenter = false;\n                thread2wantstoenter = true;\n            }\n            // entry section\n            // wait until thread1 wants to enter\n            // its critical section\n            // critical section\n            // exit section\n            // indicate thread2 has completed\n            // its critical section\n            thread2wantstoenter = false;\n            // remainder section\n        } while (completed == false);\n    }\n}\n`C#`\nusing System;\nusing System.Threading;\nclass Program\n{\n    static object lockObject = new object(); // Lock object for synchronization\n    static bool completed = false;\n    static void Main()\n    {\n        // Start both threads\n        Thread thread1 = new Thread(Thread1);\n        Thread thread2 = new Thread(Thread2);\n        thread1.Start();\n        thread2.Start();\n        // Wait for both threads to complete\n        thread1.Join();\n        thread2.Join();\n    }\n    static void Thread1()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile)\n        {\n            doWhile = true;\n            lock (lockObject)\n            {\n                // Entry section\n                Monitor.Wait(lockObject); // Wait until signaled by Thread2\n                // Critical section\n                Console.WriteLine(\"Thread1 is in critical section\");\n                completed = true; // Indicate completion\n                // Exit section\n                Monitor.Pulse(lockObject); // Notify Thread2\n            }\n            // Remainder section\n        }\n    }\n    static void Thread2()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile)\n        {\n            doWhile = true;\n            lock (lockObject)\n            {\n                // Entry section\n                Monitor.Wait(lockObject); // Wait until signaled by Thread1\n                // Critical section\n                Console.WriteLine(\"Thread2 is in critical section\");\n                completed = true; // Indicate completion\n                // Exit section\n                Monitor.Pulse(lockObject); // Notify Thread1\n            }\n            // Remainder section\n        }\n    }\n}\n`JavaScript`\nlet thread1wantstoenter = false;\nlet thread2wantstoenter = false;\nlet completed = false; // Variable to indicate if both threads have completed\nfunction startThreads() {\n    // Start both threads\n    Thread1();\n    Thread2();\n}\nfunction Thread1() {\n    do {\n        thread1wantstoenter = true;\n        while (thread2wantstoenter) {\n            // Gives access to other thread\n            // Wait for a random amount of time\n            thread1wantstoenter = false;\n            thread1wantstoenter = true;\n        }\n        // Entry section\n        // Wait until Thread2 wants to enter its critical section\n        // Critical section\n        // Exit section\n        // Indicate Thread1 has completed its critical section\n        thread1wantstoenter = false;\n        // Remainder section\n    } while (!completed);\n}\nfunction Thread2() {\n    do {\n        thread2wantstoenter = true;\n        while (thread1wantstoenter) {\n            // Gives access to other thread\n            // Wait for a random amount of time\n            thread2wantstoenter = false;\n            thread2wantstoenter = true;\n        }\n        // Entry section\n        // Wait until Thread1 wants to enter its critical section\n        // Critical section\n        // Exit section\n        // Indicate Thread2 has completed its critical section\n        thread2wantstoenter = false;\n        // Remainder section\n    } while (!completed);\n}\n// Start the threads\nstartThreads();\n`Python3`\nif __name__ == '__main__':\n    # flags to indicate if each thread is in\n    # queue to enter its critical section\n    thread1wantstoenter = False\n    thread2wantstoenter = False\n    startThreads()\ndef Thread1():\n    doWhile=False\n    while (completed == False or not doWhile):\n        doWhile=True\n        thread1wantstoenter = True\n        while (thread2wantstoenter == True) :\n            # gives access to other thread\n            # wait for random amount of time\n            thread1wantstoenter = False\n            thread1wantstoenter = True\n\n        # entry section\n        # wait until thread2 wants to enter\n        # its critical section\n        # critical section\n        # exit section\n        # indicate thread1 has completed\n        # its critical section\n        thread1wantstoenter = False\n        # remainder section\n\ndef Thread2():\n    doWhile=False\n    while (completed == False or not doWhile):\n        doWhile=True\n        thread2wantstoenter = True\n        while (thread1wantstoenter == True) :\n            # gives access to other thread\n            # wait for random amount of time\n            thread2wantstoenter = False\n            thread2wantstoenter = True\n\n        # entry section\n        # wait until thread1 wants to enter\n        # its critical section\n        # critical section\n        # exit section\n        # indicate thread2 has completed\n        # its critical section\n        thread2wantstoenter = False\n        # remainder section\n`\n\nThe problem with this version is the indefinite postponement. Also, a random amount of time is erratic depending upon the situation in which the algorithm is being implemented, hence not an acceptable solution in business critical systems.\n\n**Dekker\u2019s Algorithm: Final and completed Solution \u2013** -Idea is to use favoured thread notion to determine entry to the critical section. Favoured thread alternates between the thread providing mutual exclusion and avoiding deadlock, indefinite postponement, or lockstep synchronization.\n\nCPP`\nMain()\n{\n    // to denote which thread will enter next\n    int favouredthread = 1;\n    // flags to indicate if each thread is in\n    // queue to enter its critical section\n    boolean thread1wantstoenter = false;\n    boolean thread2wantstoenter = false;\n    startThreads();\n}\nThread1()\n{\n    do {\n        thread1wantstoenter = true;\n        // entry section\n        // wait until thread2 wants to enter\n        // its critical section\n        while (thread2wantstoenter == true) {\n            // if 2nd thread is more favored\n            if (favaouredthread == 2) {\n                // gives access to other thread\n                thread1wantstoenter = false;\n                // wait until this thread is favored\n                while (favouredthread == 2)\n                    ;\n                thread1wantstoenter = true;\n            }\n        }\n        // critical section\n        // favor the 2nd thread\n        favouredthread = 2;\n        // exit section\n        // indicate thread1 has completed\n        // its critical section\n        thread1wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\nThread2()\n{\n    do {\n        thread2wantstoenter = true;\n        // entry section\n        // wait until thread1 wants to enter\n        // its critical section\n        while (thread1wantstoenter == true) {\n            // if 1st thread is more favored\n            if (favaouredthread == 1) {\n                // gives access to other thread\n                thread2wantstoenter = false;\n                // wait until this thread is favored\n                while (favouredthread == 1)\n                    ;\n                thread2wantstoenter = true;\n            }\n        }\n        // critical section\n        // favour the 1st thread\n        favouredthread = 1;\n        // exit section\n        // indicate thread2 has completed\n        // its critical section\n        thread2wantstoenter = false;\n        // remainder section\n    } while (completed == false)\n}\n`Java`\npublic class Main {\n    static int favouredThread = 1;\n    static boolean thread1WantsToEnter = false;\n    static boolean thread2WantsToEnter = false;\n    static boolean completed = false; // Declaration of the shared variable\n    public static void main(String[] args) {\n        startThreads();\n    }\n    static void startThreads() {\n        Thread thread1 = new Thread(() -> Thread1());\n        Thread thread2 = new Thread(() -> Thread2());\n        thread1.start();\n        thread2.start();\n    }\n    static void Thread1() {\n        do {\n            thread1WantsToEnter = true;\n            while (thread2WantsToEnter) {\n                if (favouredThread == 2) {\n                    thread1WantsToEnter = false;\n                    while (favouredThread == 2);\n                    thread1WantsToEnter = true;\n                }\n            }\n            favouredThread = 2;\n            thread1WantsToEnter = false;\n        } while (!completed);\n    }\n    static void Thread2() {\n        do {\n            thread2WantsToEnter = true;\n            while (thread1WantsToEnter) {\n                if (favouredThread == 1) {\n                    thread2WantsToEnter = false;\n                    while (favouredThread == 1);\n                    thread2WantsToEnter = true;\n                }\n            }\n            favouredThread = 1;\n            thread2WantsToEnter = false;\n        } while (!completed);\n    }\n}\n`C#`\nusing System;\nusing System.Threading;\npublic class MainClass\n{\n    // to denote which thread will enter next\n    private static volatile int favouredThread = 1;\n    // flags to indicate if each thread is in\n    // queue to enter its critical section\n    private static volatile bool thread1WantsToEnter = false;\n    private static volatile bool thread2WantsToEnter = false;\n    private static volatile bool completed = false; // Assume completed is a boolean variable\n    public static void Main(string[] args)\n    {\n        Thread t1 = new Thread(Thread1);\n        Thread t2 = new Thread(Thread2);\n        t1.Start();\n        t2.Start();\n        t1.Join();\n        t2.Join();\n        Console.WriteLine(\"Both threads have completed.\");\n    }\n    private static void Thread1()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile)\n        {\n            doWhile = true;\n            thread1WantsToEnter = true;\n            // entry section\n            // wait until thread2 wants to enter\n            // its critical section\n            while (thread2WantsToEnter)\n            {\n                // if 2nd thread is more favored\n                if (favouredThread == 2)\n                {\n                    // gives access to other thread\n                    thread1WantsToEnter = false;\n                    // wait until this thread is favored\n                    while (favouredThread == 2)\n                    {\n                        // Busy wait\n                    }\n                    thread1WantsToEnter = true;\n                }\n            }\n            // critical section\n            // favor the 2nd thread\n            favouredThread = 2;\n            // exit section\n            // indicate thread1 has completed\n            // its critical section\n            thread1WantsToEnter = false;\n            // remainder section\n        }\n    }\n    private static void Thread2()\n    {\n        bool doWhile = false;\n        while (!completed || !doWhile)\n        {\n            doWhile = true;\n            thread2WantsToEnter = true;\n            // entry section\n            // wait until thread1 wants to enter\n            // its critical section\n            while (thread1WantsToEnter)\n            {\n                // if 1st thread is more favored\n                if (favouredThread == 1)\n                {\n                    // gives access to other thread\n                    thread2WantsToEnter = false;\n                    // wait until this thread is favored\n                    while (favouredThread == 1)\n                    {\n                        // Busy wait\n                    }\n                    thread2WantsToEnter = true;\n                }\n            }\n            // critical section\n            // favour the 1st thread\n            favouredThread = 1;\n            // exit section\n            // indicate thread2 has completed\n            // its critical section\n            thread2WantsToEnter = false;\n            // remainder section\n        }\n    }\n}\n`JavaScript`\nlet favouredThread = 1;\nlet thread1WantsToEnter = false;\nlet thread2WantsToEnter = false;\nlet completed = false;\nfunction startThreads() {\n    const thread1 = new Thread(Thread1);\n    const thread2 = new Thread(Thread2);\n    thread1.start();\n    thread2.start();\n}\nfunction Thread1() {\n    do {\n        thread1WantsToEnter = true;\n        while (thread2WantsToEnter) {\n            if (favouredThread === 2) {\n                thread1WantsToEnter = false;\n                while (favouredThread === 2);\n                thread1WantsToEnter = true;\n            }\n        }\n        favouredThread = 2;\n        thread1WantsToEnter = false;\n    } while (!completed);\n}\nfunction Thread2() {\n    do {\n        thread2WantsToEnter = true;\n        while (thread1WantsToEnter) {\n            if (favouredThread === 1) {\n                thread2WantsToEnter = false;\n                while (favouredThread === 1);\n                thread2WantsToEnter = true;\n            }\n        }\n        favouredThread = 1;\n        thread2WantsToEnter = false;\n    } while (!completed);\n}\n// Mock Thread class for demonstration\nclass Thread {\n    constructor(task) {\n        this.task = task;\n    }\n    start() {\n        // In a real environment, you would start the thread execution here.\n        // For simplicity, we just directly call the task function.\n        this.task();\n    }\n}\n// Main function\nfunction main() {\n    startThreads();\n}\n// Entry point\nmain();\n`Python3`\nif __name__ == '__main__':\n    # to denote which thread will enter next\n    favouredthread = 1\n    # flags to indicate if each thread is in\n    # queue to enter its critical section\n    thread1wantstoenter = False\n    thread2wantstoenter = False\n    startThreads()\ndef Thread1():\n    doWhile=False\n    while (completed == False or not doWhile) :\n        doWhile=True\n        thread1wantstoenter = True\n        # entry section\n        # wait until thread2 wants to enter\n        # its critical section\n        while (thread2wantstoenter == True) :\n            # if 2nd thread is more favored\n            if (favaouredthread == 2) :\n                # gives access to other thread\n                thread1wantstoenter = False\n                # wait until this thread is favored\n                while (favouredthread == 2):\n                    pass\n\n                thread1wantstoenter = True\n\n\n        # critical section\n        # favor the 2nd thread\n        favouredthread = 2\n        # exit section\n        # indicate thread1 has completed\n        # its critical section\n        thread1wantstoenter = False\n        # remainder section\n\ndef Thread2():\n    doWhile=False\n    while (completed == False or not doWhile) :\n        doWhile=True\n        thread2wantstoenter = True\n        # entry section\n        # wait until thread1 wants to enter\n        # its critical section\n        while (thread1wantstoenter == True) :\n            # if 1st thread is more favored\n            if (favaouredthread == 1) :\n                # gives access to other thread\n                thread2wantstoenter = False\n                # wait until this thread is favored\n                while (favouredthread == 1):\n                    pass\n\n                thread2wantstoenter = True\n\n\n        # critical section\n        # favour the 1st thread\n        favouredthread = 1\n        # exit section\n        # indicate thread2 has completed\n        # its critical section\n        thread2wantstoenter = False\n        # remainder section\n\n`\n\nThis version guarantees a complete solution to the critical solution problem.\n\n**References \u2013**\n\n[Dekker\u2019s Algorithm -csisdmz.ul.ie](http://garryowen.csisdmz.ul.ie/~cs4023/resources/oth9.pdf)\n\n[Dekker\u2019s algorithm \u2013 Wikipedia](https://en.wikipedia.org/wiki/Dekker%27s_algorithm)\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?ref=next_article)\n\n[Bakery Algorithm in Process Synchronization](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?ref=next_article)\n\n[S](https://www.geeksforgeeks.org/user/Sudarshan%20Khasnis/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Sudarshan Khasnis](https://www.geeksforgeeks.org/user/Sudarshan%20Khasnis/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n8\n\nImprove\n\nArticle Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/category/dsa/algorithm/?ref=article_category)\n- [DSA](https://www.geeksforgeeks.org/category/dsa/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [Functions](https://www.geeksforgeeks.org/tag/functions/?ref=article_tag)\n- [mutli-threading](https://www.geeksforgeeks.org/tag/mutli-threading/?ref=article_tag)\n- [Perl-Scalars](https://www.geeksforgeeks.org/tag/perl-scalars/?ref=article_tag)\n- [python-dict](https://www.geeksforgeeks.org/tag/python-dict/?ref=article_tag)\n- [QA - Placement Quizzes-Data Interpretation](https://www.geeksforgeeks.org/tag/qa-placement-quizzes-data-interpretation/?ref=article_tag)\n- [TCS-coding-questions](https://www.geeksforgeeks.org/tag/tcs-coding-questions/?ref=article_tag)\n\n+6 More\n\nPractice Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/explore?category=Algorithms&ref=article_practice_tag)\n- [Functions](https://www.geeksforgeeks.org/explore?category=Functions&ref=article_practice_tag)\n- [python-dict](https://www.geeksforgeeks.org/explore?category=python-dict&ref=article_practice_tag)\n\n### Similar Reads\n\n[Dekker's algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Process Synchronization, Inter Process Communication To obtain such a mutual exclusion, bounded waiting, and progress there have been several algorithms implemented, one of which is Dekker's Algorithm. To understand the algorithm let's understand the solution to the critical section p\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Bakery Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Critical Section, Process Synchronization, Inter Process Communication The Bakery algorithm is one of the simplest known solutions to the mutual exclusion problem for the general case of N process. Bakery Algorithm is a critical section solution for N processes. The algorithm preserve\\\\\n\\\\\n13 min read](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=ml_lbp)\n[FIFO Barbershop in Process synchronization\\\\\n\\\\\n\\\\\nOverview :In process synchronization, there exists a Sleeping Barber problem, as discussed here. But in the above solution, there is no guarantee that the customers are served in the order they arrive in the barbershop, i.e. there is no guarantee that the customers enter a FIFO manner(First-in First\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/fifo-barbershop-in-process-synchronization/?ref=ml_lbp)\n[Process Synchronization \\| Set 2\\\\\n\\\\\n\\\\\nProcess Synchronization is a technique which is used to coordinate the process that use shared Data. There are two types of Processes in an Operating Systems:- Independent Process - The process that does not affect or is affected by the other process while its execution then the process is called In\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/process-synchronization-set-2/?ref=ml_lbp)\n[Monitors in Process Synchronization\\\\\n\\\\\n\\\\\nMonitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion,\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/monitors-in-process-synchronization/?ref=ml_lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=ml_lbp)\n[Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=ml_lbp)\n[Hardware Synchronization Algorithms : Unlock and Lock, Test and Set, Swap\\\\\n\\\\\n\\\\\nProcess Synchronization problems occur when two processes running concurrently share the same data or same variable. The value of that variable may not be updated correctly before its being used by a second process. Such a condition is known as Race Around Condition. There are a software as well as\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/hardware-synchronization-algorithms-unlock-and-lock-test-and-set-swap/?ref=ml_lbp)\n[Huang's Termination detection algorithm\\\\\n\\\\\n\\\\\nHuang's algorithm is an algorithm for detecting termination in a distributed system. The algorithm was proposed by Shing-Tsaan Huang in 1989 in the Journal of Computers. In a distributed system, a process is either in an active state or in an idle state at any given point of time. Termination occurs\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/huangs-termination-detection-algorithm/?ref=ml_lbp)\n\nLike8\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=769737819.1740481616&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=374055856)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=cti9mjhf1hi8)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=9pb0kfw3cm5d)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Dekker's algorithm in Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "http://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200-1.png",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "c0a8a984-52c4-4708-8263-981a75649f69",
        "sourceURL": "https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 31
  },
  {
    "url": "https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [DSA](https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Analysis of Algorithms](https://www.geeksforgeeks.org/design-and-analysis-of-algorithms/?ref=shm)\n- [Sorting](https://www.geeksforgeeks.org/sorting-algorithms/?ref=shm)\n- [Searching](https://www.geeksforgeeks.org/searching-algorithms/?ref=shm)\n- [Greedy](https://www.geeksforgeeks.org/greedy-algorithms/?ref=shm)\n- [Recursion](https://www.geeksforgeeks.org/recursion-algorithms/?ref=shm)\n- [Backtracking](https://www.geeksforgeeks.org/backtracking-algorithms/?ref=shm)\n- [Dynamic Programming](https://www.geeksforgeeks.org/dynamic-programming/?ref=shm)\n- [Divide and Conquer](https://www.geeksforgeeks.org/divide-and-conquer/?ref=shm)\n- [Geometric Algorithms](https://www.geeksforgeeks.org/geometric-algorithms/?ref=shm)\n- [Mathematical Algorithms](https://www.geeksforgeeks.org/mathematical-algorithms/?ref=shm)\n- [Pattern Searching](https://www.geeksforgeeks.org/pattern-searching/?ref=shm)\n- [Bitwise Algorithms](https://www.geeksforgeeks.org/bitwise-algorithms/?ref=shm)\n- [Branch & Bound](https://www.geeksforgeeks.org/branch-and-bound-algorithm/?ref=shm)\n- [Randomized Algorithms](https://www.geeksforgeeks.org/randomized-algorithms/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?type%3Darticle%26id%3D170859&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nDekker's algorithm in Process Synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=next_article_top)\n\n# Bakery Algorithm in Process Synchronization\n\nLast Updated : 01 May, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n18 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nPrerequisite \u2013 [Critical Section](https://www.geeksforgeeks.org/g-fact-70/), [Process Synchronization](https://www.geeksforgeeks.org/process-synchronization-set-1/), [Inter Process Communication](https://www.geeksforgeeks.org/inter-process-communication/) The **Bakery algorithm** is one of the simplest known solutions to the mutual exclusion problem for the general case of N process. Bakery Algorithm is a critical section solution for **N** processes. The algorithm preserves the first come first serve property.\n\n**How does the Bakery Algorithm work?**\n\nIn the Bakery Algorithm, each process is assigned a number (a ticket) in a lexicographical order. Before entering the critical section, a process receives a ticket number, and the process with the smallest ticket number enters the critical section. If two processes receive the same ticket number, the process with the lower process ID is given priority.\n\n**How does the Bakery Algorithm ensure fairness?**\n\nThe Bakery Algorithm ensures fairness by assigning a unique ticket number to each process based on a lexicographical order. This ensures that processes are served in the order they arrive, which guarantees that all processes will eventually enter the critical section.\n\n- Before entering its critical section, the process receives a number. Holder of the smallest number enters the critical section.\n- If processes Pi and Pj receive the same number,\n\n```\nif i < j\nPi is served first;\nelse\nPj is served first.\n\n```\n\n- The numbering scheme always generates numbers in increasing order of enumeration; i.e., 1, 2, 3, 3, 3, 3, 4, 5, \u2026\n\n**Notation \u2013** lexicographical order (ticket #, process id #) \u2013 Firstly the ticket number is compared. If same then the process ID is compared next, i.e.-\n\n```\n\u2013 (a, b) < (c, d) if a < c or if a = c and b < d\n\u2013 max(a [0], . . ., a [n-1]) is a number, k, such that k >= a[i]  for i = 0, . . ., n - 1\n\n```\n\nShared data \u2013 choosing is an array \\[0..n \u2013 1\\] of boolean values; & number is an array \\[0..n \u2013 1\\] of integer values. Both are initialized to **False & Zero** respectively. **Algorithm Pseudocode \u2013**\n\n```\nrepeat\n    choosing[i] := true;\n    number[i] := max(number[0], number[1], ..., number[n - 1])+1;\n    choosing[i] := false;\n    for j := 0 to n - 1\n        do begin\n            while choosing[j] do no-op;\n            while number[j] != 0\n                and (number[j], j) < (number[i], i) do no-op;\n        end;\n        critical section\n\n    number[i] := 0;\n\n        remainder section\nuntil false;\n\n```\n\n**Explanation \u2013** Firstly the process sets its \u201cchoosing\u201d variable to be TRUE indicating its intent to enter critical section. Then it gets assigned the highest ticket number corresponding to other processes. Then the \u201cchoosing\u201d variable is set to FALSE indicating that it now has a new ticket number. This is in-fact the most important and confusing part of the algorithm. It is actually a small critical section in itself ! The very purpose of the first three lines is that if a process is modifying its TICKET value then at that time some other process should not be allowed to check its old ticket value which is now obsolete. This is why inside the for loop before checking ticket value we first make sure that all other processes have the \u201cchoosing\u201d variable as FALSE. After that we proceed to check the ticket values of processes where process with least ticket number/process id gets inside the critical section. The exit section just resets the ticket value to zero.\n\n**Code \u2013** Here\u2019s the code implementation of the Bakery Algorithm. Run the following in a **UNIX environment** \u2013\n\nC++`\n#include <chrono>\n#include <iostream>\n#include <mutex>\n#include <thread>\n#include <vector>\n#define THREAD_COUNT 8\nstd::vector<int> tickets(THREAD_COUNT);\nstd::vector<int> choosing(THREAD_COUNT);\nvolatile int resource = 0;\nstd::mutex mtx; // Mutex for resource access\nvoid lock(int thread)\n{\n    choosing[thread] = 1;\n    std::atomic_thread_fence(std::memory_order_seq_cst);\n    int max_ticket = 0;\n    for (int i = 0; i < THREAD_COUNT; ++i) {\n        int ticket = tickets[i];\n        max_ticket\n            = ticket > max_ticket ? ticket : max_ticket;\n    }\n    tickets[thread] = max_ticket + 1;\n    std::atomic_thread_fence(std::memory_order_seq_cst);\n    choosing[thread] = 0;\n    for (int other = 0; other < THREAD_COUNT; ++other) {\n        while (choosing[other]) {\n        }\n        std::atomic_thread_fence(std::memory_order_seq_cst);\n        while (tickets[other] != 0\n               && (tickets[other] < tickets[thread]\n                   || (tickets[other] == tickets[thread]\n                       && other < thread))) {\n        }\n    }\n}\nvoid unlock(int thread)\n{\n    std::atomic_thread_fence(std::memory_order_seq_cst);\n    tickets[thread] = 0;\n}\nvoid use_resource(int thread)\n{\n    std::lock_guard<std::mutex> lock(mtx);\n    if (resource != 0) {\n        std::cout << \"Resource was acquired by \" << thread\n                  << \", but is still in-use by \" << resource\n                  << \"!\n\";\n    }\n    resource = thread;\n    std::cout << thread << \" using resource...\n\";\n    std::atomic_thread_fence(std::memory_order_seq_cst);\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n    resource = 0;\n}\nvoid thread_body(int thread)\n{\n    lock(thread);\n    use_resource(thread);\n    unlock(thread);\n}\nint main()\n{\n    std::fill(tickets.begin(), tickets.end(), 0);\n    std::fill(choosing.begin(), choosing.end(), 0);\n    resource = 0;\n    std::vector<std::thread> threads;\n    for (int i = 0; i < THREAD_COUNT; ++i) {\n        threads.emplace_back(thread_body, i);\n    }\n    for (auto& thread : threads) {\n        thread.join();\n    }\n    return 0;\n}\n// Compile this code using the following command to link\n// against the pthread library: g++ -std=c++11 -pthread\n// Solution.cpp -o Solution\n// Note: Ensure that you have the '-pthread' option to\n// properly link against the pthread library.\n`C`\n// Importing the thread library\n#include \"pthread.h\"\n#include \"stdio.h\"\n// Importing POSIX Operating System API library\n#include \"unistd.h\"\n#include \"string.h\"\n// This is a memory barrier instruction.\n// Causes compiler to enforce an ordering\n// constraint on memory operations.\n// This means that operations issued prior\n// to the barrier will be performed\n// before operations issued after the barrier.\n#define MEMBAR __sync_synchronize()\n#define THREAD_COUNT 8\nvolatile int tickets[THREAD_COUNT];\nvolatile int choosing[THREAD_COUNT];\n// VOLATILE used to prevent the compiler\n// from applying any optimizations.\nvolatile int resource;\nvoid lock(int thread)\n{\n    // Before getting the ticket number\n    //\"choosing\" variable is set to be true\n    choosing[thread] = 1;\n    MEMBAR;\n    // Memory barrier applied\n    int max_ticket = 0;\n    // Finding Maximum ticket value among current threads\n    for (int i = 0; i < THREAD_COUNT; ++i) {\n        int ticket = tickets[i];\n        max_ticket\n            = ticket > max_ticket ? ticket : max_ticket;\n    }\n    // Allotting a new ticket value as MAXIMUM + 1\n    tickets[thread] = max_ticket + 1;\n    MEMBAR;\n    choosing[thread] = 0;\n    MEMBAR;\n    // The ENTRY Section starts from here\n    for (int other = 0; other < THREAD_COUNT; ++other) {\n        // Applying the bakery algorithm conditions\n        while (choosing[other]) {\n        }\n        MEMBAR;\n        while (tickets[other] != 0\n               && (tickets[other] < tickets[thread]\n                   || (tickets[other] == tickets[thread]\n                       && other < thread))) {\n        }\n    }\n}\n// EXIT Section\nvoid unlock(int thread)\n{\n    MEMBAR;\n    tickets[thread] = 0;\n}\n// The CRITICAL Section\nvoid use_resource(int thread)\n{\n    if (resource != 0) {\n        printf(\"Resource was acquired by %d, but is still \"\n               \"in-use by %d!\n\",\n               thread, resource);\n    }\n    resource = thread;\n    printf(\"%d using resource...\n\", thread);\n    MEMBAR;\n    sleep(2);\n    resource = 0;\n}\n// A simplified function to show the implementation\nvoid* thread_body(void* arg)\n{\n    long thread = (long)arg;\n    lock(thread);\n    use_resource(thread);\n    unlock(thread);\n    return NULL;\n}\nint main(int argc, char** argv)\n{\n    memset((void*)tickets, 0, sizeof(tickets));\n    memset((void*)choosing, 0, sizeof(choosing));\n    resource = 0;\n    // Declaring the thread variables\n    pthread_t threads[THREAD_COUNT];\n    for (int i = 0; i < THREAD_COUNT; ++i) {\n        // Creating a new thread with the function\n        //\"thread_body\" as its thread routine\n        pthread_create(&threads[i], NULL, &thread_body,\n                       (void*)((long)i));\n    }\n    for (int i = 0; i < THREAD_COUNT; ++i) {\n        // Reaping the resources used by\n        // all threads once their task is completed !\n        pthread_join(threads[i], NULL);\n    }\n    return 0;\n}\n`Java`\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class Main {\n    // Define the number of threads\n    private static final int THREAD_COUNT = 8;\n    // Define tickets for each thread\n    private static AtomicInteger[] tickets\n        = new AtomicInteger[THREAD_COUNT];\n    // Define choosing array to indicate if a thread is\n    // trying to enter the critical section\n    private static AtomicInteger[] choosing\n        = new AtomicInteger[THREAD_COUNT];\n    // Define the shared resource\n    private static AtomicInteger resource\n        = new AtomicInteger(0);\n    // Mutex for resource access\n    private static Lock mtx = new ReentrantLock();\n    public static void main(String[] args)\n    {\n        // Initialize tickets and choosing arrays\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            tickets[i] = new AtomicInteger(0);\n            choosing[i] = new AtomicInteger(0);\n        }\n        // Initialize the shared resource\n        resource.set(0);\n        // Create threads\n        Thread[] threads = new Thread[THREAD_COUNT];\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            final int thread = i;\n            threads[i] = new Thread(() -> {\n                lock(thread); // Acquire the lock\n                useResource(\n                    thread); // Use the shared resource\n                unlock(thread); // Release the lock\n            });\n            threads[i].start(); // Start the thread\n        }\n        // Wait for all threads to finish\n        for (Thread thread : threads) {\n            try {\n                thread.join();\n            }\n            catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    // Method to acquire the lock\n    private static void lock(int thread)\n    {\n        choosing[thread].set(\n            1); // Indicate that the thread is trying to\n                // enter the critical section\n        // Find the maximum ticket number and assign the\n        // next number to the current thread\n        int maxTicket = 0;\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            int ticket = tickets[i].get();\n            maxTicket = Math.max(ticket, maxTicket);\n        }\n        tickets[thread].set(\n            maxTicket + 1); // Assign the next ticket number\n                            // to the current thread\n        choosing[thread].set(0); // Indicate that the thread\n                                 // has got its ticket\n        // Wait until all other threads have got their\n        // tickets and it's the current thread's turn\n        for (int other = 0; other < THREAD_COUNT; other++) {\n            while (choosing[other].get() != 0) {\n            }\n            while (tickets[other].get() != 0\n                   && (tickets[other].get()\n                           < tickets[thread].get()\n                       || (tickets[other].get()\n                               == tickets[thread].get()\n                           && other < thread))) {\n            }\n        }\n    }\n    // Method to release the lock\n    private static void unlock(int thread)\n    {\n        tickets[thread].set(\n            0); // Reset the ticket of the current thread\n    }\n    // Method to use the shared resource\n    private static void useResource(int thread)\n    {\n        mtx.lock(); // Acquire the mutex lock\n        try {\n            // Check if the resource is already in use\n            if (resource.get() != 0) {\n                System.out.println(\n                    \"Resource was acquired by \" + thread\n                    + \", but is still in-use by \"\n                    + resource.get() + \"!\");\n            }\n            // Use the resource\n            resource.set(thread);\n            System.out.println(thread\n                               + \" using resource...\");\n            // Simulate the usage of the resource\n            try {\n                Thread.sleep(2000);\n            }\n            catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            // Release the resource\n            resource.set(0);\n        }\n        finally {\n            mtx.unlock(); // Release the mutex lock\n        }\n    }\n}\n`C#`\nusing System;\nusing System.Threading;\npublic class Solution {\n    private const int THREAD_COUNT = 8;\n    private static int[] tickets\n        = new int[THREAD_COUNT]; // Ticket array for each\n                                 // thread\n    private static int[] choosing\n        = new int[THREAD_COUNT]; // Array to indicate if a\n                                 // thread is choosing\n    private static volatile int resource\n        = 0; // Volatile resource variable\n    private static object lockObj\n        = new object(); // Lock object for synchronization\n    // Memory barrier instruction.\n    private static void Membar() { Thread.MemoryBarrier(); }\n    // Function to acquire the lock\n    private static void Lock(int thread)\n    {\n        choosing[thread]\n            = 1; // Indicate that this thread is choosing\n        Membar(); // Memory barrier\n        int maxTicket = 0;\n        // Find the maximum ticket value\n        for (int i = 0; i < THREAD_COUNT; i++) {\n            int ticket = tickets[i];\n            maxTicket = Math.Max(ticket, maxTicket);\n        }\n        // Assign ticket to this thread\n        tickets[thread] = maxTicket + 1;\n        Membar(); // Memory barrier\n        choosing[thread] = 0; // Done choosing\n        Membar(); // Memory barrier\n        // The ENTRY Section starts from here\n        for (int other = 0; other < THREAD_COUNT; ++other) {\n            // Applying the bakery algorithm conditions\n            while (choosing[other] != 0) {\n            }\n            Membar();\n            while (tickets[other] != 0\n                   && (tickets[other] < tickets[thread]\n                       || (tickets[other] == tickets[thread]\n                           && other < thread))) {\n            }\n        }\n    }\n    // EXIT Section\n    private static void Unlock(int thread)\n    {\n        Membar();\n        tickets[thread] = 0;\n    }\n    // The CRITICAL Section\n    private static void UseResource(int thread)\n    {\n        lock(lockObj) // Lock to ensure thread-safe access\n                      // to resource\n        {\n            // Check if resource is already in use\n            if (resource != 0) {\n                Console.WriteLine(\n                    $\n                    \"Resource was acquired by {thread}, but is still in-use by {resource}!\");\n            }\n            // Acquire resource\n            resource = thread;\n            Console.WriteLine($\n                              \"{thread} using resource...\");\n        }\n        // Simulate resource usage\n        Thread.Sleep(TimeSpan.FromSeconds(2));\n        // Release resource\n        lock(lockObj) { resource = 0; }\n    }\n    // A simplified function to show the implementation\n    private static void ThreadBody(object arg)\n    {\n        long thread = (long)arg;\n        Lock((int)thread); // Acquire lock\n        UseResource((int)thread); // Use resource\n        Unlock((int)thread); // Release lock\n    }\n    public static void Main(string[] args)\n    {\n        Array.Clear(\n            tickets, 0,\n            THREAD_COUNT); // Initialize ticket array\n        Array.Clear(\n            choosing, 0,\n            THREAD_COUNT); // Initialize choosing array\n        resource = 0; // Initialize resource\n        Thread[] threads = new Thread[THREAD_COUNT];\n        for (int i = 0; i < THREAD_COUNT; ++i) {\n            threads[i] = new Thread(ThreadBody);\n            threads[i].Start(i);\n        }\n        for (int i = 0; i < THREAD_COUNT; ++i) {\n            threads[i].Join();\n        }\n    }\n}\n`JavaScript``\nconst THREAD_COUNT = 8;\nconst tickets = new Array(THREAD_COUNT).fill(0);\nconst choosing = new Array(THREAD_COUNT).fill(0);\nlet resource = 0;\nconst lockObj = {};\n// Memory barrier instruction.\nfunction membar() {\n// JavaScript doesn't have explicit memory barrier instructions.\n// In most cases, JavaScript's single-threaded\n//nature makes explicit memory barriers unnecessary.\n// If working with Web Workers or other asynchronous operations,\n// additional synchronization may be required.\n}\n// Function to acquire the lock\nfunction lock(thread) {\nchoosing[thread] = 1;\nmembar();\nlet maxTicket = 0;\n// Find the maximum ticket value\nfor (let i = 0; i < THREAD_COUNT; i++) {\n    const ticket = tickets[i];\n    maxTicket = Math.max(ticket, maxTicket);\n}\n// Assign ticket to this thread\ntickets[thread] = maxTicket + 1;\nmembar();\nchoosing[thread] = 0;\nmembar();\n// The ENTRY Section starts from here\nfor (let other = 0; other < THREAD_COUNT; ++other) {\n    while (choosing[other] !== 0) {}\n    membar();\n    while (tickets[other] !== 0 && (tickets[other] <\n    tickets[thread] || (tickets[other] === tickets[thread] &&\n    other < thread))) {}\n}\n}\n// EXIT Section\nfunction unlock(thread) {\nmembar();\ntickets[thread] = 0;\n}\n// The CRITICAL Section\nfunction useResource(thread) {\nlockObj.lock = true;\n// Check if resource is already in use\nif (resource !== 0) {\n    console.log(`Resource was acquired by ${thread},\n    but is still in-use by ${resource}!`);\n}\n// Acquire resource\nresource = thread;\nconsole.log(`${thread} using resource...`);\n// Simulate resource usage\nsetTimeout(() => {\n    // Release resource\n    resource = 0;\n    lockObj.lock = false;\n}, 2000);\n}\n// A simplified function to show the implementation\nfunction threadBody(thread) {\nlock(thread);\nuseResource(thread);\nunlock(thread);\n}\nconst threads = [];\nfor (let i = 0; i < THREAD_COUNT; ++i) {\nthreads[i] = setTimeout(threadBody, 0, i);\n}\n//This code is contributed by Aman.\n// Note: This code uses setTimeout to simulate threads,\n// but for actual multithreading in JavaScript,\n// you would need to use a library or environment that supports it,\n// such as Node.js with Worker Threads\n// or a web browser environment with Web Workers.\n// use this node multithreading.js\n``\n\n**Output:**![Output](https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2017-12-23-04-15-36.png)\n\n**Advantages of Bakery Algorithm:**\n\n- **Fairness:** The Bakery Algorithm provides fairness, as it ensures that all processes get a fair chance to access the critical section, and no process will be left waiting indefinitely.\n- **Easy to Implement:** The algorithm is easy to understand and implement, as it uses simple concepts such as turn numbers and flags to ensure mutual exclusion.\n- **No Deadlock:** The Bakery Algorithm ensures that there is no deadlock situation in the system.\n- **No starvation:** The algorithm also ensures that there is no starvation of any process, as every process gets a fair chance to enter the critical section.\n\n**Disadvantages Bakery Algorithm:**\n\n- **Not Scalable:** The Bakery Algorithm is not scalable, as the overhead of the algorithm increases with the number of processes in the system.\n- **High Time Complexity:** The algorithm has a high time complexity, which increases as the number of processes in the system increases. This can result in performance issues in systems with a large number of processes.\n- **Busy Waiting:** The algorithm requires busy waiting, which can lead to wastage of CPU cycles and increased power consumption.\n- **Memory Overhead:** The algorithm requires extra memory to store the turn number and flag values, which can lead to increased memory overhead in systems with a large number of processes.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=next_article)\n\n[Dekker's algorithm in Process Synchronization](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=next_article)\n\n[S](https://www.geeksforgeeks.org/user/Siddhant-Bajaj/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\n[Siddhant-Bajaj](https://www.geeksforgeeks.org/user/Siddhant-Bajaj/contributions/?itm_source=geeksforgeeks&itm_medium=article_author&itm_campaign=auth_user)\n\nFollow\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n18\n\nImprove\n\nArticle Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/category/dsa/algorithm/?ref=article_category)\n- [GATE CS](https://www.geeksforgeeks.org/category/gate-cs/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [C++-Misc C++](https://www.geeksforgeeks.org/tag/c-misc-c/?ref=article_tag)\n- [Functions](https://www.geeksforgeeks.org/tag/functions/?ref=article_tag)\n- [Intellipaat](https://www.geeksforgeeks.org/tag/intellipaat/?ref=article_tag)\n- [QA - Placement Quizzes-Data Interpretation](https://www.geeksforgeeks.org/tag/qa-placement-quizzes-data-interpretation/?ref=article_tag)\n- [TCS-coding-questions](https://www.geeksforgeeks.org/tag/tcs-coding-questions/?ref=article_tag)\n- [Volkswagen IT Services](https://www.geeksforgeeks.org/tag/volkswagen-it-services/?ref=article_tag)\n\n+5 More\n\nPractice Tags :\n\n- [Algorithms](https://www.geeksforgeeks.org/explore?category=Algorithms&ref=article_practice_tag)\n- [Functions](https://www.geeksforgeeks.org/explore?category=Functions&ref=article_practice_tag)\n\n### Similar Reads\n\n[Bakery Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Critical Section, Process Synchronization, Inter Process Communication The Bakery algorithm is one of the simplest known solutions to the mutual exclusion problem for the general case of N process. Bakery Algorithm is a critical section solution for N processes. The algorithm preserve\\\\\n\\\\\n13 min read](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Dekker's algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPrerequisite - Process Synchronization, Inter Process Communication To obtain such a mutual exclusion, bounded waiting, and progress there have been several algorithms implemented, one of which is Dekker's Algorithm. To understand the algorithm let's understand the solution to the critical section p\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/?ref=ml_lbp)\n[Peterson's Algorithm in Process Synchronization\\\\\n\\\\\n\\\\\nPeterson's Algorithm is a classic solution to the critical section problem in process synchronization. It ensures mutual exclusion meaning only one process can access the critical section at a time and avoids race conditions. The algorithm uses two shared variables to manage the turn-taking mechanis\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/petersons-algorithm-in-process-synchronization/?ref=ml_lbp)\n[FIFO Barbershop in Process synchronization\\\\\n\\\\\n\\\\\nOverview :In process synchronization, there exists a Sleeping Barber problem, as discussed here. But in the above solution, there is no guarantee that the customers are served in the order they arrive in the barbershop, i.e. there is no guarantee that the customers enter a FIFO manner(First-in First\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/fifo-barbershop-in-process-synchronization/?ref=ml_lbp)\n[Monitors in Process Synchronization\\\\\n\\\\\n\\\\\nMonitors are a higher-level synchronization construct that simplifies process synchronization by providing a high-level abstraction for data access and synchronization. Monitors are implemented as programming language constructs, typically in object-oriented languages, and provide mutual exclusion,\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/monitors-in-process-synchronization/?ref=ml_lbp)\n[Introduction of Process Synchronization\\\\\n\\\\\n\\\\\nProcess Synchronization is used in a computer system to ensure that multiple processes or threads can run concurrently without interfering with each other. The main objective of process synchronization is to ensure that multiple processes access shared resources without interfering with each other a\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/introduction-of-process-synchronization/?ref=ml_lbp)\n[Process Synchronization \\| Set 2\\\\\n\\\\\n\\\\\nProcess Synchronization is a technique which is used to coordinate the process that use shared Data. There are two types of Processes in an Operating Systems:- Independent Process - The process that does not affect or is affected by the other process while its execution then the process is called In\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/process-synchronization-set-2/?ref=ml_lbp)\n[Semaphores in Process Synchronization\\\\\n\\\\\n\\\\\nSemaphores are a tool used in operating systems to help manage how different processes (or programs) share resources, like memory or data, without causing conflicts. A semaphore is a special kind of synchronization data that can be used only through specific synchronization primitives. Semaphores ar\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/semaphores-in-process-synchronization/?ref=ml_lbp)\n[Critical Section in Synchronization\\\\\n\\\\\n\\\\\nA critical section is a part of a program where shared resources like memory or files are accessed by multiple processes or threads. To avoid issues like data inconsistency or race conditions, synchronization techniques ensure that only one process or thread uses the critical section at a time. The\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/g-fact-70/?ref=ml_lbp)\n[Synchronization Examples\\\\\n\\\\\n\\\\\nThe Synchronization is an important concept in operating systems that ensures the smooth and coordinated execution of processes and threads. It is the task of coordinating the execution of processes in such a way that no two processes can access the same shared data and resource. It is a critical pa\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/synchronization-examples/?ref=ml_lbp)\n\nLike18\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=1428494486.1740481626&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453~102717422&z=1798942748)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=ycwdhify5b7s)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=isn00wwy803a)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Bakery Algorithm in Process Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/Screenshot-from-2017-12-23-04-15-36.png",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "8fedba27-da6f-414d-bae5-d31469b64008",
        "sourceURL": "https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/",
        "url": "https://www.geeksforgeeks.org/bakery-algorithm-in-process-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 32
  },
  {
    "url": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [Shell Scripting](https://www.geeksforgeeks.org/introduction-linux-shell-shell-scripting/?ref=shm)\n- [Kali Linux](https://www.geeksforgeeks.org/introduction-to-kali-linux/?ref=shm)\n- [Ubuntu](https://www.geeksforgeeks.org/how-to-install-ubuntu-on-virtualbox/?ref=shm)\n- [Red Hat](https://www.geeksforgeeks.org/tag/red-hat/?ref=shm)\n- [CentOS](https://www.geeksforgeeks.org/getting-started-with-centos/?ref=shm)\n- [Docker in Linux](https://www.geeksforgeeks.org/introduction-to-docker/?ref=shm)\n- [Kubernetes in Linux](https://www.geeksforgeeks.org/introduction-to-kubernetes-k8s/?ref=shm)\n- [Linux interview question](https://www.geeksforgeeks.org/linux-interview-questions/?ref=shm)\n- [Python](https://www.geeksforgeeks.org/python-programming-language/?ref=shm)\n- [R](https://www.geeksforgeeks.org/r-tutorial/?ref=shm)\n- [Java](https://www.geeksforgeeks.org/java/?ref=shm)\n- [C](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [C++](https://www.geeksforgeeks.org/c-plus-plus/?ref=shm)\n- [JavaScript](https://www.geeksforgeeks.org/javascript/?ref=shm)\n- [DSA](https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/?type%3Darticle%26id%3D147567&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nPrint numbers in sequence using thread synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article_top)\n\n# Mutex lock for Linux Thread Synchronization\n\nLast Updated : 24 May, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n44 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**Prerequisite :** [Multithreading in C](https://www.geeksforgeeks.org/multithreading-c-2/)\n\n**Thread synchronization** is defined as a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as a critical section. Processes\u2019 access to critical section is controlled by using synchronization techniques. When one thread starts executing the [critical section](https://www.geeksforgeeks.org/g-fact-70/) (a serialized segment of the program) the other thread should wait until the first thread finishes. If proper synchronization techniques are not applied, it may cause a race condition where the values of variables may be unpredictable and vary depending on the timings of context switches of the processes or threads.\n\n**Thread Synchronization Problems**\n\nAn example code to study synchronization problems :\n\n|     |\n| --- |\n| `#include <pthread.h> `<br>`#include <stdio.h> `<br>`#include <stdlib.h> `<br>`#include <string.h> `<br>`#include <unistd.h> `<br>`\u00a0`<br>`pthread_t tid[2]; `<br>`int` `counter; `<br>`\u00a0`<br>`void` `* trythis(` `void` `* arg) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``unsigned ` `long` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``counter += 1; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has started\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``for` `(i = 0; i < (0xFFFFFFFF); i++) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has finished\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `NULL; `<br>`} `<br>`\u00a0`<br>`int` `main(` `void` `) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``int` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``int` `error; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``while` `(i < 2) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``error = pthread_create(&(tid[i]), NULL, &trythis, NULL); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``if` `(error != 0) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\nThread can't be created : [%s]\"` `, ` `strerror` `(error)); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``i++; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[0], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[1], NULL); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `0; `<br>`} ` |\n\n```\n\n```\n\n```\n\n```\n\n**How to compile above program?**\n\nTo compile a multithreaded program using gcc, we need to link it with the pthreads library. Following is the command used to compile the program.\n\n```\ngfg@ubuntu:~/$ gcc filename.c -lpthread\n\n```\n\nIn this example, two threads(jobs) are created and in the start function of these threads, a counter is maintained to get the logs about job number which is started and when it is completed.\n\nOutput :\n\n```\nJob 1 has started\nJob 2 has started\nJob 2 has finished\nJob 2 has finished\n\n```\n\n**Problem:** From the last two logs, one can see that the log \u2018 _Job 2 has finished_\u2019 is repeated twice while no log for \u2018 _Job 1 has finished_\u2019 is seen.\n\n**Why it has occurred ?**\n\nOn observing closely and visualizing the execution of the code, we can see that :\n\n- The log \u2018 _Job 2 has started_\u2019 is printed just after \u2018 _Job 1 has Started_\u2019 so it can easily be concluded that while thread 1 was processing the scheduler scheduled the thread 2.\n- If we take the above assumption true then the value of the \u2018 _counter_\u2019 variable got incremented again before job 1 got finished.\n- So, when Job 1 actually got finished, then the wrong value of counter produced the log \u2018 _Job 2 has finished_\u2019 followed by the \u2018 _Job 2 has finished_\u2019 for the actual job 2 or vice versa as it is dependent on scheduler.\n- So we see that its not the repetitive log but the wrong value of the \u2018counter\u2019 variable that is the problem.\n- The actual problem was the usage of the variable \u2018counter\u2019 by a second thread when the first thread was using or about to use it.\n- In other words, we can say that lack of synchronization between the threads while using the shared resource \u2018counter\u2019 caused the problems or in one word we can say that this problem happened due to \u2018Synchronization problem\u2019 between two threads.\n\n**How to solve it ?**\n\nThe most popular way of achieving thread synchronization is by using **Mutexes**.\n\n### Mutex\n\n  - A Mutex is a lock that we set before using a shared resource and release after using it.\n  - When the lock is set, no other thread can access the locked region of code.\n  - So we see that even if thread 2 is scheduled while thread 1 was not done accessing the shared resource and the code is locked by thread 1 using mutexes then thread 2 cannot even access that region of code.\n  - So this ensures synchronized access of shared resources in the code.\n\n**Working of a mutex**\n\n1. Suppose one thread has locked a region of code using mutex and is executing that piece of code.\n2. Now if scheduler decides to do a context switch, then all the other threads which are ready to execute the same region are unblocked.\n3. Only one of all the threads would make it to the execution but if this thread tries to execute the same region of code that is already locked then it will again go to sleep.\n4. Context switch will take place again and again but no thread would be able to execute the locked region of code until the mutex lock over it is released.\n5. Mutex lock will only be released by the thread who locked it.\n6. So this ensures that once a thread has locked a piece of code then no other thread can execute the same region until it is unlocked by the thread who locked it.\n\nHence, this system ensures synchronization among the threads while working on shared resources.\n\n**A mutex is initialized and then a lock is achieved by calling the following two functions :** The first function initializes a mutex and through second function any critical region in the code can be locked.\n\n1. **int pthread\\_mutex\\_init(pthread\\_mutex\\_t \\*restrict mutex, const pthread\\_mutexattr\\_t \\*restrict attr) :** Creates a mutex, referenced by mutex, with attributes specified by attr. If attr is NULL, the default mutex attribute (NONRECURSIVE) is used.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_init() returns 0, and the state of the mutex becomes initialized and unlocked.\n\n\n     If unsuccessful, pthread\\_mutex\\_init() returns -1.\n\n2. **int pthread\\_mutex\\_lock(pthread\\_mutex\\_t \\*mutex) :** Locks a mutex object, which identifies a mutex. If the mutex is already locked by another thread, the thread waits for the mutex to become available. The thread that has locked a mutex becomes its current owner and remains the owner until the same thread has unlocked it. When the mutex has the attribute of recursive, the use of the lock may be different. When this kind of mutex is locked multiple times by the same thread, then a count is incremented and no waiting thread is posted. The owning thread must call pthread\\_mutex\\_unlock() the same number of times to decrement the count to zero.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_lock() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_lock() returns -1.\n\n**The mutex can be unlocked and destroyed by calling following two functions :** The first function releases the lock and the second function destroys the lock so that it cannot be used anywhere in future.\n\n1. **int pthread\\_mutex\\_unlock(pthread\\_mutex\\_t \\*mutex) :** Releases a mutex object. If one or more threads are waiting to lock the mutex, pthread\\_mutex\\_unlock() causes one of those threads to return from pthread\\_mutex\\_lock() with the mutex object acquired. If no threads are waiting for the mutex, the mutex unlocks with no current owner. When the mutex has the attribute of recursive the use of the lock may be different. When this kind of mutex is locked multiple times by the same thread, then unlock will decrement the count and no waiting thread is posted to continue running with the lock. If the count is decremented to zero, then the mutex is released and if any thread is waiting for it is posted.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_unlock() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_unlock() returns -1\n\n2. **int pthread\\_mutex\\_destroy(pthread\\_mutex\\_t \\*mutex) :** Deletes a mutex object, which identifies a mutex. Mutexes are used to protect shared resources. mutex is set to an invalid value, but can be reinitialized using pthread\\_mutex\\_init().\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_destroy() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_destroy() returns -1.\n\n![mutex](https://media.geeksforgeeks.org/wp-content/uploads/Mutex_lock_for_linux.jpg)\n\nAn example to show how mutexes are used for thread synchronization\n\n|     |\n| --- |\n| `#include <pthread.h> `<br>`#include <stdio.h> `<br>`#include <stdlib.h> `<br>`#include <string.h> `<br>`#include <unistd.h> `<br>`\u00a0`<br>`pthread_t tid[2]; `<br>`int` `counter; `<br>`pthread_mutex_t lock; `<br>`\u00a0`<br>`void` `* trythis(` `void` `* arg) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_lock(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``unsigned ` `long` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``counter += 1; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has started\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``for` `(i = 0; i < (0xFFFFFFFF); i++) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has finished\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_unlock(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `NULL; `<br>`} `<br>`\u00a0`<br>`int` `main(` `void` `) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``int` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``int` `error; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``if` `(pthread_mutex_init(&lock, NULL) != 0) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n mutex init has failed\n\"` `); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``return` `1; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``while` `(i < 2) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``error = pthread_create(&(tid[i]), `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``NULL, `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``&trythis, NULL); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``if` `(error != 0) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\nThread can't be created :[%s]\"` `, `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``strerror` `(error)); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``i++; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[0], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[1], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_destroy(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `0; `<br>`} ` |\n\n```\n\n```\n\n```\n\n```\n\nIn the above code:\n\n  - A mutex is initialized in the beginning of the main function.\n  - The same mutex is locked in the \u2018trythis()\u2019 function while using the shared resource \u2018counter\u2019.\n  - At the end of the function \u2018trythis()\u2019 the same mutex is unlocked.\n  - At the end of the main function when both the threads are done, the mutex is destroyed.\n\nOutput :\n\n```\nJob 1 started\nJob 1 finished\nJob 2 started\nJob 2 finished\n\n```\n\nSo this time the start and finish logs of both the jobs are present. So thread synchronization took place by the use of Mutex.\n\nReferences :\n\n[Synchronization (computer science)](https://en.wikipedia.org/wiki/Synchronization_(computer_science))\n\n[Lock (computer science)](https://en.wikipedia.org/wiki/Lock_(computer_science))\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article)\n\n[Print numbers in sequence using thread synchronization](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article)\n\nK\n\nKishlay Verma\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n44\n\nImprove\n\nArticle Tags :\n\n- [Linux-Unix](https://www.geeksforgeeks.org/category/linux-unix/?ref=article_category)\n\n### Similar Reads\n\n[Mutex lock for Linux Thread Synchronization\\\\\n\\\\\n\\\\\nPrerequisite : Multithreading in C Thread synchronization is defined as a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as a critical section. Processes' access to critical section is controlled by using s\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/?ref=ml_lbp)\n[Print numbers in sequence using thread synchronization\\\\\n\\\\\n\\\\\nThe problem is to synchronize n number of threads using pthread library. The idea is take thread count and print 1 in first thread, print 2 in second thread, print 3 in third thread, ..... print n in nth thread and again repeat from thread 1 infinitely. Prerequisite : Multithreading Examples : Input\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=ml_lbp)\n[Shell Script for a flexible file locking mechanism\\\\\n\\\\\n\\\\\nFile-locking mechanisms can be implemented in Linux using shell scripts. Locking files is required and becomes necessary to make a mutual exclusion environment where multiple processes can read and write the same file without violating consistency issues. A typical race condition occurs when the out\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/shell-script-for-a-flexible-file-locking-mechanism/?ref=ml_lbp)\n[Conditional wait and signal in multi-threading\\\\\n\\\\\n\\\\\nWhat are conditional wait and signal in multi-threading? Explanation: When you want to sleep a thread, condition variable can be used. In C under Linux, there is a function pthread\\_cond\\_wait() to wait or sleep. On the other hand, there is a function pthread\\_cond\\_signal() to wake up sleeping or waiti\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/condition-wait-signal-multi-threading/?ref=ml_lbp)\n[Difference Between Lock and Monitor in Java Concurrency\\\\\n\\\\\n\\\\\nJava Concurrency deals with concepts like Multithreading and other concurrent operations. To manage shared resources effectively, tools like Locks (Mutex) and Monitors are used to ensure thread synchronization and avoid race conditions. Locks represent a low-level synchronization mechanism and Monit\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/difference-between-lock-and-monitor-in-java-concurrency/?ref=ml_lbp)\n[Mutex in C++\\\\\n\\\\\n\\\\\nMutex stands for Mutual Exclusion. In C++, std::mutex class is a synchronization primitive that is used to protect the shared data from being accessed by multiple threads simultaneously. The shared data can be in the form of variables, data structures, etc. std::mutex class implements mutex in C++.\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/std-mutex-in-cpp/?ref=ml_lbp)\n[Object level and Class level locks in Java\\\\\n\\\\\n\\\\\nSynchronization: Synchronization is a modifier that is used for the method and blocks only. With the help of a synchronized modifier, we can restrict a shared resource to be accessed only by one thread. When two or more threads need access to shared resources, there is some loss of data i.e. data in\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/object-level-class-level-lock-java/?ref=ml_lbp)\n[How to Use Locks in Multi-Threaded Java Program?\\\\\n\\\\\n\\\\\nA lock may be a more flexible and complicated thread synchronization mechanism than the standard synchronized block. A lock may be a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: just one thread at a time can ac\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/how-to-use-locks-in-multi-threaded-java-program/?ref=ml_lbp)\n[Python \\| How to lock Critical Sections\\\\\n\\\\\n\\\\\nThis article aims how to lock the threads and critical sections in the given program to avoid race conditions. So, using Lock object in the threading library to make mutable objects safe to use by multiple threads. Code #1 : import threading class counter\\_share: ''' multiple threads can share. ''' d\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/python-how-to-lock-critical-sections/?ref=ml_lbp)\n[std::shared\\_mutex in C++\\\\\n\\\\\n\\\\\nIn C++, std::mutex is a mechanism that locks access to the shared resource when some other thread is working on it so that errors such as race conditions can be avoided and threads can be synchronized. But in some cases, several threads need to read the data from shared resources at the same time. H\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/std-shared_mutex-in-cpp/?ref=ml_lbp)\n\nLike44\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=p2icue985jsf)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&size=normal&cb=ksnq9kh51oo0)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=IyZ984yGrXrBd6ihLOYGwy9X&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Mutex lock for Linux Thread Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/Mutex_lock_for_linux.jpg",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "7e273b70-3543-4345-9d32-ebc119935717",
        "sourceURL": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "url": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 33
  },
  {
    "url": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
    "data": {
      "success": true,
      "markdown": "- [Shell Scripting](https://www.geeksforgeeks.org/introduction-linux-shell-shell-scripting/?ref=shm)\n- [Kali Linux](https://www.geeksforgeeks.org/introduction-to-kali-linux/?ref=shm)\n- [Ubuntu](https://www.geeksforgeeks.org/how-to-install-ubuntu-on-virtualbox/?ref=shm)\n- [Red Hat](https://www.geeksforgeeks.org/tag/red-hat/?ref=shm)\n- [CentOS](https://www.geeksforgeeks.org/getting-started-with-centos/?ref=shm)\n- [Docker in Linux](https://www.geeksforgeeks.org/introduction-to-docker/?ref=shm)\n- [Kubernetes in Linux](https://www.geeksforgeeks.org/introduction-to-kubernetes-k8s/?ref=shm)\n- [Linux interview question](https://www.geeksforgeeks.org/linux-interview-questions/?ref=shm)\n- [Python](https://www.geeksforgeeks.org/python-programming-language/?ref=shm)\n- [R](https://www.geeksforgeeks.org/r-tutorial/?ref=shm)\n- [Java](https://www.geeksforgeeks.org/java/?ref=shm)\n- [C](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [C++](https://www.geeksforgeeks.org/c-plus-plus/?ref=shm)\n- [JavaScript](https://www.geeksforgeeks.org/javascript/?ref=shm)\n- [DSA](https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/?type%3Darticle%26id%3D147567&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nPrint numbers in sequence using thread synchronization\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article_top)\n\n# Mutex lock for Linux Thread Synchronization\n\nLast Updated : 24 May, 2024\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n44 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n**Prerequisite :** [Multithreading in C](https://www.geeksforgeeks.org/multithreading-c-2/)\n\n**Thread synchronization** is defined as a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as a critical section. Processes\u2019 access to critical section is controlled by using synchronization techniques. When one thread starts executing the [critical section](https://www.geeksforgeeks.org/g-fact-70/) (a serialized segment of the program) the other thread should wait until the first thread finishes. If proper synchronization techniques are not applied, it may cause a race condition where the values of variables may be unpredictable and vary depending on the timings of context switches of the processes or threads.\n\n**Thread Synchronization Problems**\n\nAn example code to study synchronization problems :\n\n|     |\n| --- |\n| `#include <pthread.h> `<br>`#include <stdio.h> `<br>`#include <stdlib.h> `<br>`#include <string.h> `<br>`#include <unistd.h> `<br>`\u00a0`<br>`pthread_t tid[2]; `<br>`int` `counter; `<br>`\u00a0`<br>`void` `* trythis(` `void` `* arg) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``unsigned ` `long` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``counter += 1; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has started\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``for` `(i = 0; i < (0xFFFFFFFF); i++) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has finished\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `NULL; `<br>`} `<br>`\u00a0`<br>`int` `main(` `void` `) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``int` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``int` `error; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``while` `(i < 2) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``error = pthread_create(&(tid[i]), NULL, &trythis, NULL); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``if` `(error != 0) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\nThread can't be created : [%s]\"` `, ` `strerror` `(error)); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``i++; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[0], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[1], NULL); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `0; `<br>`} ` |\n\n```\n\n```\n\n```\n\n```\n\n**How to compile above program?**\n\nTo compile a multithreaded program using gcc, we need to link it with the pthreads library. Following is the command used to compile the program.\n\n```\ngfg@ubuntu:~/$ gcc filename.c -lpthread\n\n```\n\nIn this example, two threads(jobs) are created and in the start function of these threads, a counter is maintained to get the logs about job number which is started and when it is completed.\n\nOutput :\n\n```\nJob 1 has started\nJob 2 has started\nJob 2 has finished\nJob 2 has finished\n\n```\n\n**Problem:** From the last two logs, one can see that the log \u2018 _Job 2 has finished_\u2019 is repeated twice while no log for \u2018 _Job 1 has finished_\u2019 is seen.\n\n**Why it has occurred ?**\n\nOn observing closely and visualizing the execution of the code, we can see that :\n\n- The log \u2018 _Job 2 has started_\u2019 is printed just after \u2018 _Job 1 has Started_\u2019 so it can easily be concluded that while thread 1 was processing the scheduler scheduled the thread 2.\n- If we take the above assumption true then the value of the \u2018 _counter_\u2019 variable got incremented again before job 1 got finished.\n- So, when Job 1 actually got finished, then the wrong value of counter produced the log \u2018 _Job 2 has finished_\u2019 followed by the \u2018 _Job 2 has finished_\u2019 for the actual job 2 or vice versa as it is dependent on scheduler.\n- So we see that its not the repetitive log but the wrong value of the \u2018counter\u2019 variable that is the problem.\n- The actual problem was the usage of the variable \u2018counter\u2019 by a second thread when the first thread was using or about to use it.\n- In other words, we can say that lack of synchronization between the threads while using the shared resource \u2018counter\u2019 caused the problems or in one word we can say that this problem happened due to \u2018Synchronization problem\u2019 between two threads.\n\n**How to solve it ?**\n\nThe most popular way of achieving thread synchronization is by using **Mutexes**.\n\n### Mutex\n\n  - A Mutex is a lock that we set before using a shared resource and release after using it.\n  - When the lock is set, no other thread can access the locked region of code.\n  - So we see that even if thread 2 is scheduled while thread 1 was not done accessing the shared resource and the code is locked by thread 1 using mutexes then thread 2 cannot even access that region of code.\n  - So this ensures synchronized access of shared resources in the code.\n\n**Working of a mutex**\n\n1. Suppose one thread has locked a region of code using mutex and is executing that piece of code.\n2. Now if scheduler decides to do a context switch, then all the other threads which are ready to execute the same region are unblocked.\n3. Only one of all the threads would make it to the execution but if this thread tries to execute the same region of code that is already locked then it will again go to sleep.\n4. Context switch will take place again and again but no thread would be able to execute the locked region of code until the mutex lock over it is released.\n5. Mutex lock will only be released by the thread who locked it.\n6. So this ensures that once a thread has locked a piece of code then no other thread can execute the same region until it is unlocked by the thread who locked it.\n\nHence, this system ensures synchronization among the threads while working on shared resources.\n\n**A mutex is initialized and then a lock is achieved by calling the following two functions :** The first function initializes a mutex and through second function any critical region in the code can be locked.\n\n1. **int pthread\\_mutex\\_init(pthread\\_mutex\\_t \\*restrict mutex, const pthread\\_mutexattr\\_t \\*restrict attr) :** Creates a mutex, referenced by mutex, with attributes specified by attr. If attr is NULL, the default mutex attribute (NONRECURSIVE) is used.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_init() returns 0, and the state of the mutex becomes initialized and unlocked.\n\n\n     If unsuccessful, pthread\\_mutex\\_init() returns -1.\n\n2. **int pthread\\_mutex\\_lock(pthread\\_mutex\\_t \\*mutex) :** Locks a mutex object, which identifies a mutex. If the mutex is already locked by another thread, the thread waits for the mutex to become available. The thread that has locked a mutex becomes its current owner and remains the owner until the same thread has unlocked it. When the mutex has the attribute of recursive, the use of the lock may be different. When this kind of mutex is locked multiple times by the same thread, then a count is incremented and no waiting thread is posted. The owning thread must call pthread\\_mutex\\_unlock() the same number of times to decrement the count to zero.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_lock() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_lock() returns -1.\n\n**The mutex can be unlocked and destroyed by calling following two functions :** The first function releases the lock and the second function destroys the lock so that it cannot be used anywhere in future.\n\n1. **int pthread\\_mutex\\_unlock(pthread\\_mutex\\_t \\*mutex) :** Releases a mutex object. If one or more threads are waiting to lock the mutex, pthread\\_mutex\\_unlock() causes one of those threads to return from pthread\\_mutex\\_lock() with the mutex object acquired. If no threads are waiting for the mutex, the mutex unlocks with no current owner. When the mutex has the attribute of recursive the use of the lock may be different. When this kind of mutex is locked multiple times by the same thread, then unlock will decrement the count and no waiting thread is posted to continue running with the lock. If the count is decremented to zero, then the mutex is released and if any thread is waiting for it is posted.\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_unlock() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_unlock() returns -1\n\n2. **int pthread\\_mutex\\_destroy(pthread\\_mutex\\_t \\*mutex) :** Deletes a mutex object, which identifies a mutex. Mutexes are used to protect shared resources. mutex is set to an invalid value, but can be reinitialized using pthread\\_mutex\\_init().\n\n     **Returned value**\n\n\n     If successful, pthread\\_mutex\\_destroy() returns 0.\n\n\n     If unsuccessful, pthread\\_mutex\\_destroy() returns -1.\n\n![mutex](https://media.geeksforgeeks.org/wp-content/uploads/Mutex_lock_for_linux.jpg)\n\nAn example to show how mutexes are used for thread synchronization\n\n|     |\n| --- |\n| `#include <pthread.h> `<br>`#include <stdio.h> `<br>`#include <stdlib.h> `<br>`#include <string.h> `<br>`#include <unistd.h> `<br>`\u00a0`<br>`pthread_t tid[2]; `<br>`int` `counter; `<br>`pthread_mutex_t lock; `<br>`\u00a0`<br>`void` `* trythis(` `void` `* arg) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_lock(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``unsigned ` `long` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``counter += 1; `<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has started\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``for` `(i = 0; i < (0xFFFFFFFF); i++) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n Job %d has finished\n\"` `, counter); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_unlock(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `NULL; `<br>`} `<br>`\u00a0`<br>`int` `main(` `void` `) `<br>`{ `<br>`\u00a0\u00a0\u00a0\u00a0``int` `i = 0; `<br>`\u00a0\u00a0\u00a0\u00a0``int` `error; `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``if` `(pthread_mutex_init(&lock, NULL) != 0) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\n mutex init has failed\n\"` `); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``return` `1; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``while` `(i < 2) { `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``error = pthread_create(&(tid[i]), `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``NULL, `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``&trythis, NULL); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``if` `(error != 0) `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``printf` `(` `\"\nThread can't be created :[%s]\"` `, `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``strerror` `(error)); `<br>`\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0``i++; `<br>`\u00a0\u00a0\u00a0\u00a0``} `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[0], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_join(tid[1], NULL); `<br>`\u00a0\u00a0\u00a0\u00a0``pthread_mutex_destroy(&lock); `<br>`\u00a0`<br>`\u00a0\u00a0\u00a0\u00a0``return` `0; `<br>`} ` |\n\n```\n\n```\n\n```\n\n```\n\nIn the above code:\n\n  - A mutex is initialized in the beginning of the main function.\n  - The same mutex is locked in the \u2018trythis()\u2019 function while using the shared resource \u2018counter\u2019.\n  - At the end of the function \u2018trythis()\u2019 the same mutex is unlocked.\n  - At the end of the main function when both the threads are done, the mutex is destroyed.\n\nOutput :\n\n```\nJob 1 started\nJob 1 finished\nJob 2 started\nJob 2 finished\n\n```\n\nSo this time the start and finish logs of both the jobs are present. So thread synchronization took place by the use of Mutex.\n\nReferences :\n\n[Synchronization (computer science)](https://en.wikipedia.org/wiki/Synchronization_(computer_science))\n\n[Lock (computer science)](https://en.wikipedia.org/wiki/Lock_(computer_science))\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article)\n\n[Print numbers in sequence using thread synchronization](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=next_article)\n\nK\n\nKishlay Verma\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n44\n\nImprove\n\nArticle Tags :\n\n- [Linux-Unix](https://www.geeksforgeeks.org/category/linux-unix/?ref=article_category)\n\n### Similar Reads\n\n[Mutex lock for Linux Thread Synchronization\\\\\n\\\\\n\\\\\nPrerequisite : Multithreading in C Thread synchronization is defined as a mechanism which ensures that two or more concurrent processes or threads do not simultaneously execute some particular program segment known as a critical section. Processes' access to critical section is controlled by using s\\\\\n\\\\\n8 min read](https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/?ref=ml_lbp)\n[Print numbers in sequence using thread synchronization\\\\\n\\\\\n\\\\\nThe problem is to synchronize n number of threads using pthread library. The idea is take thread count and print 1 in first thread, print 2 in second thread, print 3 in third thread, ..... print n in nth thread and again repeat from thread 1 infinitely. Prerequisite : Multithreading Examples : Input\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/?ref=ml_lbp)\n[Shell Script for a flexible file locking mechanism\\\\\n\\\\\n\\\\\nFile-locking mechanisms can be implemented in Linux using shell scripts. Locking files is required and becomes necessary to make a mutual exclusion environment where multiple processes can read and write the same file without violating consistency issues. A typical race condition occurs when the out\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/shell-script-for-a-flexible-file-locking-mechanism/?ref=ml_lbp)\n[Conditional wait and signal in multi-threading\\\\\n\\\\\n\\\\\nWhat are conditional wait and signal in multi-threading? Explanation: When you want to sleep a thread, condition variable can be used. In C under Linux, there is a function pthread\\_cond\\_wait() to wait or sleep. On the other hand, there is a function pthread\\_cond\\_signal() to wake up sleeping or waiti\\\\\n\\\\\n2 min read](https://www.geeksforgeeks.org/condition-wait-signal-multi-threading/?ref=ml_lbp)\n[Difference Between Lock and Monitor in Java Concurrency\\\\\n\\\\\n\\\\\nJava Concurrency deals with concepts like Multithreading and other concurrent operations. To manage shared resources effectively, tools like Locks (Mutex) and Monitors are used to ensure thread synchronization and avoid race conditions. Locks represent a low-level synchronization mechanism and Monit\\\\\n\\\\\n5 min read](https://www.geeksforgeeks.org/difference-between-lock-and-monitor-in-java-concurrency/?ref=ml_lbp)\n[Mutex in C++\\\\\n\\\\\n\\\\\nMutex stands for Mutual Exclusion. In C++, std::mutex class is a synchronization primitive that is used to protect the shared data from being accessed by multiple threads simultaneously. The shared data can be in the form of variables, data structures, etc. std::mutex class implements mutex in C++.\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/std-mutex-in-cpp/?ref=ml_lbp)\n[Object level and Class level locks in Java\\\\\n\\\\\n\\\\\nSynchronization: Synchronization is a modifier that is used for the method and blocks only. With the help of a synchronized modifier, we can restrict a shared resource to be accessed only by one thread. When two or more threads need access to shared resources, there is some loss of data i.e. data in\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/object-level-class-level-lock-java/?ref=ml_lbp)\n[How to Use Locks in Multi-Threaded Java Program?\\\\\n\\\\\n\\\\\nA lock may be a more flexible and complicated thread synchronization mechanism than the standard synchronized block. A lock may be a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: just one thread at a time can ac\\\\\n\\\\\n6 min read](https://www.geeksforgeeks.org/how-to-use-locks-in-multi-threaded-java-program/?ref=ml_lbp)\n[Python \\| How to lock Critical Sections\\\\\n\\\\\n\\\\\nThis article aims how to lock the threads and critical sections in the given program to avoid race conditions. So, using Lock object in the threading library to make mutable objects safe to use by multiple threads. Code #1 : import threading class counter\\_share: ''' multiple threads can share. ''' d\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/python-how-to-lock-critical-sections/?ref=ml_lbp)\n[std::shared\\_mutex in C++\\\\\n\\\\\n\\\\\nIn C++, std::mutex is a mechanism that locks access to the shared resource when some other thread is working on it so that errors such as race conditions can be avoided and threads can be synchronized. But in some cases, several threads need to read the data from shared resources at the same time. H\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/std-shared_mutex-in-cpp/?ref=ml_lbp)\n\nLike44\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=454460633.1740481647&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=212920466)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=5xgsj1mpibrk)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=5oaripwed9p9)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)",
      "metadata": {
        "title": "Mutex lock for Linux Thread Synchronization - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": "https://media.geeksforgeeks.org/wp-content/uploads/Mutex_lock_for_linux.jpg",
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "1acccd31-3207-475c-920b-deb623c3c070",
        "sourceURL": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "url": "https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",
        "topic": "operating systems"
      }
    },
    "id": 34
  },
  {
    "url": "https://www.geeksforgeeks.org/tracing-memory-usage-linux/",
    "data": {
      "success": true,
      "markdown": "- [Aptitude](https://www.geeksforgeeks.org/aptitude-questions-and-answers/?ref=shm)\n- [Engineering Mathematics](https://www.geeksforgeeks.org/engineering-mathematics-tutorials/?ref=shm)\n- [Discrete Mathematics](https://www.geeksforgeeks.org/discrete-mathematics-tutorial/?ref=shm)\n- [Operating System](https://www.geeksforgeeks.org/operating-systems/?ref=shm)\n- [DBMS](https://www.geeksforgeeks.org/dbms/?ref=shm)\n- [Computer Networks](https://www.geeksforgeeks.org/computer-network-tutorials/?ref=shm)\n- [Digital Logic and Design](https://www.geeksforgeeks.org/digital-electronics-logic-design-tutorials/?ref=shm)\n- [C Programming](https://www.geeksforgeeks.org/c-programming-language/?ref=shm)\n- [Data Structures](https://www.geeksforgeeks.org/data-structures/?ref=shm)\n- [Algorithms](https://www.geeksforgeeks.org/fundamentals-of-algorithms/?ref=shm)\n- [Theory of Computation](https://www.geeksforgeeks.org/theory-of-computation-automata-tutorials/?ref=shm)\n- [Compiler Design](https://www.geeksforgeeks.org/compiler-design-tutorials/?ref=shm)\n- [Computer Org and Architecture](https://www.geeksforgeeks.org/computer-organization-and-architecture-tutorials/?ref=shm)\n\n\u25b2\n\n[Open In App](https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/tracing-memory-usage-linux/?type%3Darticle%26id%3D155379&apn=free.programming.programming&isi=1641848816&ibi=org.geeksforgeeks.GeeksforGeeksDev&efr=1)\n\n[Next Article:\\\\\n\\\\\nMemory Management in Operating System\\\\\n\\\\\n![Next article icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/ep_right.svg)](https://www.geeksforgeeks.org/memory-management-in-operating-system/?ref=next_article_top)\n\n# Tracing memory usage in Linux\n\nLast Updated : 08 Jun, 2023\n\nSummarize\n\nComments\n\nImprove\n\nSuggest changes\n\n7 Likes\n\nLike\n\nShare\n\nReport\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)Follow](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\nMemory is a critical resource in computing because its usage affects the performance and stability of a system. It\u2019s necessary to trace the memory usage of the system in order to determine the program that consumes all CPU resources or the program that is responsible for slowing down the activities of the CPU.\n\nTracing memory usage also becomes necessary to determine the load on the server. Parsing the usage data enables the servers to be able to balance the load and serve the user\u2019s request without slowing down the system. In Linux, there are several ways to trace memory usage, and we are going to discuss them.\n\n## Using the \\`free\\` command to check memory usage in Linux.\n\n**free** Displays the amount of memory that is currently available and used by the system (both physical and swapped). free command gathers this data by parsing /proc/meminfo. By default, the amount of memory is displayed in kilobytes.\n\n```\nfree\n```\n\n![free](https://media.geeksforgeeks.org/wp-content/uploads/20230509170637/103-(2).webp)\n\n**free**\n\nTo display the memory usage in megabytes every 5 seconds, we use the following command. Watch command is used to execute a program periodically.\n\n```\nwatch -n 5 free -m\n```\n\n![watch -n 5 free -m](https://media.geeksforgeeks.org/wp-content/uploads/20230509171147/104-(2).webp)\n\n**watch -n 5 free -m**\n\n## Using the \\`vmstat\\` command to check memory usage in Linux.\n\n**vmstat** vmstat command is used to display virtual memory statistics of the system. This command reports data about the memory, paging, disk, and CPU activities, etc. The first use of this command returns the data averages since the last reboot. Further users return the data based on sampling periods of long delays.\n\n```\n vmstat\n```\n\n![ vmstat](https://media.geeksforgeeks.org/wp-content/uploads/20230509171717/105.webp)\n\nvmstat\n\nTo view disk statics\n\n```\nvmstat -d\n```\n\n![vmstat -d](https://media.geeksforgeeks.org/wp-content/uploads/20230509171945/106.webp)\n\nvmstat -d\n\nDisplays the amount of memory used and available.\n\n```\nvmstat -s\n```\n\n![vmstat -s](https://media.geeksforgeeks.org/wp-content/uploads/20230509172156/107.webp)\n\nvmstat -s\n\n## Using the \\`top\\` command to check memory usage in Linux.\n\n**top** command displays all the currently running processes in the system. This command displays the list of processes and thread currently being handled by the kernel. The top command can also be used to monitor the total amount of memory usage.\n\n![top](https://media.geeksforgeeks.org/wp-content/uploads/20230509173456/108.webp)\n\n**top**\n\nThread-mode operation. Displays individual thread that are currently in the system. Without this command option, a summation of all thread in each process is displayed.\n\n```\n top -H\n```\n\n![ top -H ](https://media.geeksforgeeks.org/wp-content/uploads/20230510105103/109.webp)\n\n**top -H**\n\n## Using the \\` **/proc/meminfo** \\` location to check memory usage in Linux.\n\n**/proc/meminfo** This file contains all the data about the memory usage. It provides the current memory usage details rather than old, stored values.\n\n```\ncat /proc/meminfo\n```\n\n![cat /proc/meminfo](https://media.geeksforgeeks.org/wp-content/uploads/20230510105325/110.webp)\n\ncat /proc/meminfo\n\n## Using the \\`htop \\` command to check memory usage in Linux.\n\n**htop** is an interactive process viewer. This command is similar to top command except that it allows to scroll vertically and horizontally to allows users to view all processes running on the system, along with their full command line as well as viewing them as a process tree, selecting multiple processes and acting on them all at once.\n\nTo use htop we need to install it in our system.\n\n```\nsudo apt-get install htop\n```\n\nNow we can use the following command.\n\n```\nhtop\n```\n\n![htop](https://media.geeksforgeeks.org/wp-content/uploads/20230510110008/111.webp)\n\nhtop\n\n## Conclusion\n\nIn this article we are discussing different methods to trace memory usage in Linux as memory usage is an essential aspect of computing which is used to optimize the performance and stability of a system. We have discussed commands like free, vmstat, top, /proc/meminfo, and htop. \u00a0By using these commands, we can monitor memory usage and diagnose problems that may occur in a system. Overall, we can say monitoring memory usage in Linux system is important for efficient system management.\n\nComment\n\n\nMore info\n\n[Advertise with us](https://www.geeksforgeeks.org/about/contact-us/?listicles)\n\n[Next Article](https://www.geeksforgeeks.org/memory-management-in-operating-system/?ref=next_article)\n\n[Memory Management in Operating System](https://www.geeksforgeeks.org/memory-management-in-operating-system/?ref=next_article)\n\n![https://media.geeksforgeeks.org/auth/avatar.png](https://media.geeksforgeeks.org/wp-content/uploads/20200717172614/authPreLogo.png)\n\nGeeksforGeeks\n\n[![News](https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg)](https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen)\n\n7\n\nImprove\n\nArticle Tags :\n\n- [Linux-Unix](https://www.geeksforgeeks.org/category/linux-unix/?ref=article_category)\n- [Operating Systems](https://www.geeksforgeeks.org/category/computer-subject/operating-systems/?ref=article_category)\n- [linux-command](https://www.geeksforgeeks.org/tag/linux-command/?ref=article_tag)\n\n### Similar Reads\n\n[Tracing memory usage in Linux\\\\\n\\\\\n\\\\\nMemory is a critical resource in computing because its usage affects the performance and stability of a system. It's necessary to trace the memory usage of the system in order to determine the program that consumes all CPU resources or the program that is responsible for slowing down the activities\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/tracing-memory-usage-linux/?ref=ml_lbp)\n[Memory Management in Operating System\\\\\n\\\\\n\\\\\nThe term memory can be defined as a collection of data in a specific format. It is used to store instructions and process data. The memory comprises a large array or group of words or bytes, each with its own location. The primary purpose of a computer system is to execute programs. These programs,\\\\\n\\\\\n10 min read](https://www.geeksforgeeks.org/memory-management-in-operating-system/?ref=ml_lbp)\n[What is Linux Operating System\\\\\n\\\\\n\\\\\nThe Linux Operating System is a type of operating system that is similar to Unix, and it is built upon the Linux Kernel. The Linux Kernel is like the brain of the operating system because it manages how the computer interacts with its hardware and resources. It makes sure everything works smoothly a\\\\\n\\\\\n13 min read](https://www.geeksforgeeks.org/introduction-to-linux-operating-system/?ref=ml_lbp)\n[Virtual Memory in Operating System\\\\\n\\\\\n\\\\\nVirtual memory is a memory management technique used by operating systems to give the appearance of a large, continuous block of memory to applications, even if the physical memory (RAM) is limited. It allows larger applications to run on systems with less RAM. The main objective of virtual memory i\\\\\n\\\\\n15+ min read](https://www.geeksforgeeks.org/virtual-memory-in-operating-system/?ref=ml_lbp)\n[User mode and Kernel mode Switching\\\\\n\\\\\n\\\\\nIn it's life span a process executes in user mode and kernel mode. The User mode is normal mode where the process has limited access. While the Kernel mode is the privileged mode where the process has unrestricted access to system resources like hardware, memory, etc. A process can access I/O Hardwa\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/user-mode-and-kernel-mode-switching/?ref=ml_lbp)\n[Linux Networking Tools\\\\\n\\\\\n\\\\\nOne can use a variety of network tools to perform tasks such as obtaining information about other systems on your network, accessing other systems, and communicating directly with other users. Network information can be obtained using utilities such as ping, finger, traceroute, host, dig, nslookup e\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/linux-networking-tools/?ref=ml_lbp)\n[Linux - Hegemon Modular System Monitoring Tool\\\\\n\\\\\n\\\\\nHegemon is a work-in-progress modular system monitor written in secure Rust programming language. This allows users to monitor utilization and hardware in a single dashboard. The system hardware and utilization information are collected through the use of variables like chan, termion, systemstat and\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/linux-hegemon-modular-system-monitoring-tool/?ref=ml_lbp)\n[Architecture of linux operating system\\\\\n\\\\\n\\\\\nLinux is an open-source UNIX-based operating system. The main component of the Linux operating system is Linux kernel. It is developed to provide low-cost or free operating system service to personal system users, which includes an X-window system, Emacs editor, IP/TCP GUI, etc. Linux distribution:L\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/architecture-of-linux-operating-system/?ref=ml_lbp)\n[Smem Tool To Display Memory Usage More Accurate in Linux\\\\\n\\\\\n\\\\\nMultiple tools are available to monitor the memory usage on a Linux system. Memory management by monitoring memory usage is one of the important things to do on our Linux system, Smem is one of the memory usage monitoring tools available in Linux. Smem displays the memory usage of the processes on t\\\\\n\\\\\n3 min read](https://www.geeksforgeeks.org/smem-tool-to-display-memory-usage-more-accurate-in-linux/?ref=ml_lbp)\n[POSIX shared-memory API\\\\\n\\\\\n\\\\\nSeveral IPC mechanisms are available for POSIX systems, including shared memory and message passing. Here, we explore the POSIX API for shared memory. POSIX shared memory is organized using memory-mapped files, which associate the region of shared memory with a file. A process must first create a sh\\\\\n\\\\\n4 min read](https://www.geeksforgeeks.org/posix-shared-memory-api/?ref=ml_lbp)\n\nLike7\n\n[![three90RightbarBannerImg](https://media.geeksforgeeks.org/auth-dashboard-uploads/premium_oin_rbar_min.png)](https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription?itm_source=geeksforgeeks&itm_medium=rightbar_oin&itm_campaign=premium)\n\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you\nacknowledge that you have read and understood our\n[Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/) &\n[Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/)\nGot It !\n\n\n![Lightbox](https://www.geeksforgeeks.org/tracing-memory-usage-linux/)\n\nImprovement\n\nSuggest changes\n\nSuggest Changes\n\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\n![geeksforgeeks-suggest-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/suggestChangeIcon.png)\n\nCreate Improvement\n\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\n![geeksforgeeks-improvement-icon](https://media.geeksforgeeks.org/auth-dashboard-uploads/createImprovementIcon.png)\n\nSuggest Changes\n\nmin 4 words, max CharLimit:2000\n\n## What kind of Experience do you want to share?\n\n[Interview Experiences](https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0) [Admission Experiences](https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede) [Career Journeys](https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31) [Work Experiences](https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f) [Campus Experiences](https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae) [Competitive Exam Experiences](https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2)\n\n[iframe](https://td.doubleclick.net/td/ga/rul?tid=G-DWCCJLKX3X&gacid=762872211.1740481658&gtm=45je52o0v884918195za200&dma=0&gcd=13l3l3l3l1l1&npa=0&pscdl=noapi&aip=1&fledge=1&frm=0&tag_exp=101732282~101732284~102067808~102482433~102539968~102558064~102587591~102605417~102640600~102658453&z=1604719593)\n\nLogin Modal \\| GeeksforGeeks\n\nPlease Login To Continue\n\u00d7\n\nSign InSign Up\n\n_account\\_circle_\n\n_lock_\n\nRemember meForgot Password\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=2jygyo18yep0)\n\nSign In\n\n_email_\n\n_lock_\n\n_business_\n\n```\n\n```\n\n[iframe](https://www.google.com/recaptcha/api2/anchor?ar=1&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa&co=aHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmc6NDQz&hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&size=normal&cb=y915zay0xbmu)\n\nSign Up\n\nor\n\n[Google](javascript:void(0))\n\nFacebook\n\n\nLinkedIn\n\n\nGitHub\n\n\n[Why Create an Account?](https://www.geeksforgeeks.org/why-create-an-account-on-geeksforgeeks/)\n\nBy creating this account, you agree to our [Privacy Policy](https://www.geeksforgeeks.org/privacy-policy/) & [Cookie Policy](https://www.geeksforgeeks.org/cookie-policy/).\n\n\nPlease enter your email address or userHandle.\n\n_account\\_circle_\n\nBack to Login\n\nReset Password\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://www.google.com/recaptcha/api2/bframe?hl=en&v=rW64dpMGAGrjU7JJQr9xxPl8&k=6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa)\n\n[iframe](https://securepubads.g.doubleclick.net/static/topics/topics_frame.html)",
      "metadata": {
        "title": "Tracing memory usage in Linux - GeeksforGeeks",
        "ogSiteName": "GeeksforGeeks",
        "og:image": [
          "https://media.geeksforgeeks.org/wp-content/uploads/20230510110008/111.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230510105325/110.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509171717/105.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509171147/104-(2).webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509170637/103-(2).webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509173456/108.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509172156/107.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230510105103/109.webp",
          "https://media.geeksforgeeks.org/wp-content/uploads/20230509171945/106.webp"
        ],
        "keywords": "Data Structures, Algorithms, Python, Java, C, C++, JavaScript, Android Development, SQL, Data Science, Machine Learning, PHP, Web Development, System Design, Tutorial, Technical Blogs, Interview Experience, Interview Preparation, Programming, Competitive Programming, Jobs, Coding Contests, GATE CSE, HTML, CSS, React, NodeJS, Placement, Aptitude, Quiz, Computer Science, Programming Examples, GeeksforGeeks Courses, Puzzles, SSC, Banking, UPSC, Commerce, Finance, CBSE, School, k12, General Knowledge, News, Mathematics, Exams",
        "ogUrl": "https://www.geeksforgeeks.org/tracing-memory-usage-linux/",
        "ogDescription": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "description": "A Computer Science portal for geeks. It contains well written, well thought and well explained computer science and programming articles, quizzes and practice/competitive programming/company interview Questions.",
        "scrapeId": "668c6b75-2904-40e7-8e87-df33a25a2678",
        "sourceURL": "https://www.geeksforgeeks.org/tracing-memory-usage-linux/",
        "url": "https://www.geeksforgeeks.org/tracing-memory-usage-linux/",
        "topic": "operating systems"
      }
    },
    "id": 35
  }
]